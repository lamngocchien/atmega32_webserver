
AVR Ethernet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000076aa  0000773e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006ac  008000ae  008000ae  0000778c  2**0
                  ALLOC
  3 .stab         00003c60  00000000  00000000  0000778c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dc9  00000000  00000000  0000b3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c8b  00000000  00000000  0000c375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000055ac  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001352  00000000  00000000  000125ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004dd6  00000000  00000000  000138fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000910  00000000  00000000  000186d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001197  00000000  00000000  00018fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004589  00000000  00000000  0001a17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000418  00000000  00000000  0001e704  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  0001eb1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__ctors_end>
       4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       c:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__vector_3>
      10:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      14:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      18:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      1c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      20:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      24:	0c 94 95 33 	jmp	0x672a	; 0x672a <__vector_9>
      28:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      2c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      30:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      34:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      38:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      3c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      40:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      44:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      48:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      4c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      50:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <enc28j60_config>:
      d6:	04 00 05 00 06 ff 07 05 08 00 09 06 0a ff 0b 1f     ................
      e6:	c1 00 c0 0d c2 32 ca ee cb 05 c4 12 c6 12 c7 0c     .....2..........
      f6:	e4 30 e5 4f e2 46 e3 49 e0 43 e1 45                 .0.O.F.I.C.E

00000102 <Page1>:
     102:	3c 21 44 4f 43 54 59 50 45 20 68 74 6d 6c 20 50     <!DOCTYPE html P
     112:	55 42 4c 49 43 20 22 2d 2f 2f 57 33 43 2f 2f 44     UBLIC "-//W3C//D
     122:	54 44 20 58 48 54 4d 4c 20 31 2e 30 20 54 72 61     TD XHTML 1.0 Tra
     132:	6e 73 69 74 69 6f 6e 61 6c 2f 2f 45 4e 22 20 22     nsitional//EN" "
     142:	68 74 74 70 3a 2f 2f 77 77 77 2e 77 33 2e 6f 72     http://www.w3.or
     152:	67 2f 54 52 2f 78 68 74 6d 6c 31 2f 44 54 44 2f     g/TR/xhtml1/DTD/
     162:	78 68 74 6d 6c 31 2d 74 72 61 6e 73 69 74 69 6f     xhtml1-transitio
     172:	6e 61 6c 2e 64 74 64 22 3e 3c 68 74 6d 6c 20 78     nal.dtd"><html x
     182:	6d 6c 6e 73 3d 22 68 74 74 70 3a 2f 2f 77 77 77     mlns="http://www
     192:	2e 77 33 2e 6f 72 67 2f 31 39 39 39 2f 78 68 74     .w3.org/1999/xht
     1a2:	6d 6c 22 20 64 69 72 3d 22 6c 74 72 22 20 6c 61     ml" dir="ltr" la
     1b2:	6e 67 3d 22 65 6e 22 3e 3c 68 65 61 64 3e 3c 6d     ng="en"><head><m
     1c2:	65 74 61 20 68 74 74 70 2d 65 71 75 69 76 3d 22     eta http-equiv="
     1d2:	43 6f 6e 74 65 6e 74 2d 54 79 70 65 22 20 63 6f     Content-Type" co
     1e2:	6e 74 65 6e 74 3d 22 74 65 78 74 2f 68 74 6d 6c     ntent="text/html
     1f2:	3b 20 63 68 61 72 73 65 74 3d 55 54 46 2d 38 22     ; charset=UTF-8"
     202:	3e 3c 74 69 74 6c 65 3e 41 56 52 20 77 65 62 20     ><title>AVR web 
     212:	73 65 72 76 65 72 3c 2f 74 69 74 6c 65 3e 3c 73     server</title><s
     222:	74 79 6c 65 20 74 79 70 65 3d 22 74 65 78 74 2f     tyle type="text/
     232:	63 73 73 22 3e 2e 6f 6e 20 7b 20 62 6f 72 64 65     css">.on { borde
     242:	72 3a 31 3b 20 77 69 64 74 68 3a 20 32 30 70 78     r:1; width: 20px
     252:	3b 20 68 65 69 67 68 74 3a 20 32 30 70 78 3b 20     ; height: 20px; 
     262:	62 61 63 6b 67 72 6f 75 6e 64 3a 20 62 6c 75 65     background: blue
     272:	3b 20 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63 65     ; text-align: ce
     282:	6e 74 65 72 3b 20 70 61 64 64 69 6e 67 3a 20 30     nter; padding: 0
     292:	70 78 3b 20 63 6f 6c 6f 72 3a 20 23 66 66 66 3b     px; color: #fff;
     2a2:	20 2d 6d 6f 7a 2d 62 6f 72 64 65 72 2d 72 61 64      -moz-border-rad
     2b2:	69 75 73 3a 20 31 30 70 78 3b 20 2d 77 65 62 6b     ius: 10px; -webk
     2c2:	69 74 2d 62 6f 72 64 65 72 2d 72 61 64 69 75 73     it-border-radius
     2d2:	3a 20 31 30 70 78 3b 20 62 6f 72 64 65 72 2d 72     : 10px; border-r
     2e2:	61 64 69 75 73 3a 20 31 30 70 78 3b 7d 2e 62 75     adius: 10px;}.bu
     2f2:	74 74 6f 6e 7b 77 69 64 74 68 3a 20 31 30 30 25     tton{width: 100%
     302:	3b 7d 2e 6f 66 66 20 7b 20 62 6f 72 64 65 72 3a     ;}.off { border:
     312:	31 3b 20 77 69 64 74 68 3a 20 32 30 70 78 3b 20     1; width: 20px; 
     322:	68 65 69 67 68 74 3a 20 32 30 70 78 3b 20 62 61     height: 20px; ba
     332:	63 6b 67 72 6f 75 6e 64 3a 20 77 68 69 74 65 3b     ckground: white;
     342:	20 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63 65 6e      text-align: cen
     352:	74 65 72 3b 20 70 61 64 64 69 6e 67 3a 20 30 70     ter; padding: 0p
     362:	78 3b 20 63 6f 6c 6f 72 3a 20 23 66 66 66 3b 20     x; color: #fff; 
     372:	2d 6d 6f 7a 2d 62 6f 72 64 65 72 2d 72 61 64 69     -moz-border-radi
     382:	75 73 3a 20 31 30 70 78 3b 20 2d 77 65 62 6b 69     us: 10px; -webki
     392:	74 2d 62 6f 72 64 65 72 2d 72 61 64 69 75 73 3a     t-border-radius:
     3a2:	20 31 30 70 78 3b 20 62 6f 72 64 65 72 2d 72 61      10px; border-ra
     3b2:	64 69 75 73 3a 20 31 30 70 78 3b 7d 20 2e 62 75     dius: 10px;} .bu
     3c2:	74 74 6f 6e 32 7b 77 69 64 74 68 3a 20 38 30 70     tton2{width: 80p
     3d2:	78 3b 7d 3c 2f 73 74 79 6c 65 3e 3c 2f 68 65 61     x;}</style></hea
     3e2:	64 3e 3c 62 6f 64 79 20 62 67 63 6f 6c 6f 72 3d     d><body bgcolor=
     3f2:	22 23 64 30 64 30 64 30 22 20 61 6c 69 67 6e 3d     "#d0d0d0" align=
     402:	22 63 65 6e 74 65 72 22 20 73 74 79 6c 65 3d 22     "center" style="
     412:	70 61 64 64 69 6e 67 3a 20 37 35 70 78 20 30 70     padding: 75px 0p
     422:	78 20 30 70 78 20 30 70 78 3b 22 3e 3c 74 61 62     x 0px 0px;"><tab
     432:	6c 65 20 62 67 63 6f 6c 6f 72 3d 22 23 32 46 34     le bgcolor="#2F4
     442:	46 34 46 22 20 69 64 3d 22 72 6f 6f 74 22 20 62     F4F" id="root" b
     452:	6f 72 64 65 72 3d 22 31 22 20 61 6c 69 67 6e 3d     order="1" align=
     462:	22 63 65 6e 74 65 72 22 20 77 69 64 74 68 3d 22     "center" width="
     472:	38 36 38 70 78 22 3e 3c 74 62 6f 64 79 3e 3c 74     868px"><tbody><t
     482:	72 3e 3c 74 64 20 63 6f 6c 73 70 61 6e 3d 22 34     r><td colspan="4
     492:	22 20 68 65 69 67 68 74 3d 22 31 30 30 22 3e 3c     " height="100"><
     4a2:	62 3e 3c 64 69 76 20 61 6c 69 67 6e 3d 22 63 65     b><div align="ce
     4b2:	6e 74 65 72 22 20 73 74 79 6c 65 3d 22 66 6f 6e     nter" style="fon
     4c2:	74 2d 73 69 7a 65 3a 32 35 70 74 3b 20 63 6f 6c     t-size:25pt; col
     4d2:	6f 72 3a 23 46 46 46 46 46 46 22 3e 52 45 4d 4f     or:#FFFFFF">REMO
     4e2:	54 45 20 43 4f 4e 54 52 4f 4c 20 41 56 52 20 57     TE CONTROL AVR W
     4f2:	45 42 53 45 52 56 45 52 3c 2f 64 69 76 3e 3c 2f     EBSERVER</div></
     502:	62 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 74 72 20     b></td></tr><tr 
     512:	61 6c 69 67 6e 3d 22 6c 65 66 74 22 3e 3c 74 64     align="left"><td
     522:	20 68 65 69 67 68 74 3d 22 32 35 22 20 76 61 6c      height="25" val
     532:	69 67 6e 3d 22 74 6f 70 22 20 77 69 64 74 68 3d     ign="top" width=
     542:	22 37 35 25 22 3e 3c 62 3e 3c 64 69 76 20 73 74     "75%"><b><div st
     552:	79 6c 65 3d 22 63 6f 6c 6f 72 3a 23 46 46 46 46     yle="color:#FFFF
     562:	46 46 22 3e 26 6e 62 73 70 3b 44 65 76 69 63 65     FF">&nbsp;Device
     572:	73 3c 2f 64 69 76 3e 3c 2f 62 3e 3c 2f 74 64 3e     s</div></b></td>
     582:	3c 74 64 20 68 65 69 67 68 74 3d 22 32 35 22 20     <td height="25" 
     592:	76 61 6c 69 67 6e 3d 22 74 6f 70 22 20 77 69 64     valign="top" wid
     5a2:	74 68 3d 22 61 75 74 6f 22 3e 3c 62 3e 3c 64 69     th="auto"><b><di
     5b2:	76 20 73 74 79 6c 65 3d 22 63 6f 6c 6f 72 3a 23     v style="color:#
     5c2:	46 46 46 46 46 46 22 3e 26 6e 62 73 70 3b 53 65     FFFFFF">&nbsp;Se
     5d2:	6e 73 6f 72 73 20 28 3c 73 75 70 3e 6f 3c 2f 73     nsors (<sup>o</s
     5e2:	75 70 3e 43 29 3c 2f 64 69 76 3e 3c 2f 62 3e 3c     up>C)</div></b><
     5f2:	2f 74 64 3e 3c 2f 74 72 3e 3c 74 72 3e 3c 74 64     /td></tr><tr><td
     602:	20 68 65 69 67 68 74 3d 22 61 75 74 6f 22 20 76      height="auto" v
     612:	61 6c 69 67 6e 3d 22 74 6f 70 22 20 77 69 64 74     align="top" widt
     622:	68 3d 22 32 30 30 22 3e 3c 70 3e 3c 2f 70 3e 3c     h="200"><p></p><
     632:	64 69 76 3e 3c 66 6f 72 6d 20 6d 65 74 68 6f 64     div><form method
     642:	3d 22 50 4f 53 54 22 20 61 63 74 69 6f 6e 3d 22     ="POST" action="
     652:	22 3e 3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23     "><font color="#
     662:	46 46 46 46 46 46 22 3e 3c 74 61 62 6c 65 20 77     FFFFFF"><table w
     672:	69 64 74 68 3d 22 39 35 25 22 20 62 6f 72 64 65     idth="95%" borde
     682:	72 3d 22 31 22 20 61 6c 69 67 6e 3d 22 63 65 6e     r="1" align="cen
     692:	74 65 72 22 20 69 64 3d 22 74 61 62 6c 65 5f 64     ter" id="table_d
     6a2:	65 76 69 63 65 22 3e 3c 74 72 20 61 6c 69 67 6e     evice"><tr align
     6b2:	3d 22 63 65 6e 74 65 72 22 3e 3c 74 64 20 77 69     ="center"><td wi
     6c2:	64 74 68 3d 22 31 35 25 22 3e 4e 61 6d 65 73 3c     dth="15%">Names<
     6d2:	2f 74 64 3e 3c 74 64 20 77 69 64 74 68 3d 22 39     /td><td width="9
     6e2:	25 22 3e 4e 6f 77 20 53 74 61 74 65 73 3c 2f 74     %">Now States</t
     6f2:	64 3e 3c 74 64 20 77 69 64 74 68 3d 22 31 31 25     d><td width="11%
     702:	22 3e 43 6f 6e 74 72 6f 6c 20 50 61 6e 65 6c 3c     ">Control Panel<
     712:	2f 74 64 3e 3c 74 64 3e 43 6f 6d 6d 61 6e 64 3c     /td><td>Command<
     722:	2f 74 64 3e 3c 74 64 20 77 69 64 74 68 3d 22 31     /td><td width="1
     732:	35 25 22 3e 43 6f 75 6e 74 64 6f 77 6e 20 28 4d     5%">Countdown (M
     742:	69 6e 75 74 65 73 29 3c 2f 74 64 3e 3c 74 64 20     inutes)</td><td 
     752:	77 69 64 74 68 3d 22 31 31 25 22 3e 54 69 6d 65     width="11%">Time
     762:	72 20 53 74 61 74 75 73 3c 2f 74 64 3e 3c 74 64     r Status</td><td
     772:	20 77 69 64 74 68 3d 22 31 35 25 22 3e 41 75 74      width="15%">Aut
     782:	6f 20 4f 4e 20 28 3c 73 75 70 3e 6f 3c 2f 73 75     o ON (<sup>o</su
     792:	70 3e 43 29 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 74     p>C)</td></tr><t
     7a2:	72 20 61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22     r align="center"
     7b2:	3e 3c 74 64 3e 44 65 76 69 63 65 20 31 3c 2f 74     ><td>Device 1</t
     7c2:	64 3e 3c 74 64 3e 3c 64 69 76 20 63 6c 61 73 73     d><td><div class
     7d2:	3d 22 25 43 4c 31 22 3e 3c 2f 64 69 76 3e 3c 2f     ="%CL1"></div></
     7e2:	74 64 3e 3c 74 64 3e 3c 69 6e 70 75 74 20 63 6c     td><td><input cl
     7f2:	61 73 73 3d 22 62 75 74 74 6f 6e 22 20 74 79 70     ass="button" typ
     802:	65 3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65     e="submit" value
     812:	3d 22 25 52 53 31 22 20 6e 61 6d 65 3d 22 52 4c     ="%RS1" name="RL
     822:	31 22 3e 3c 2f 74 64 3e 3c 74 64 3e 3c 69 6e 70     1"></td><td><inp
     832:	75 74 20 74 79 70 65 3d 22 74 65 78 74 22 20 6e     ut type="text" n
     842:	61 6d 65 3d 22 41 75 74 6f 31 22 2f 3e 3c 2f 74     ame="Auto1"/></t
     852:	64 3e 3c 74 64 3e 25 43 44 31 3c 2f 74 64 3e 3c     d><td>%CD1</td><
     862:	74 64 3e 25 54 53 31 3c 2f 74 64 3e 3c 74 64 3e     td>%TS1</td><td>
     872:	25 54 41 31 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 74     %TA1</td></tr><t
     882:	72 20 61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22     r align="center"
     892:	3e 3c 74 64 3e 44 65 76 69 63 65 20 32 3c 2f 74     ><td>Device 2</t
     8a2:	64 3e 3c 74 64 3e 3c 64 69 76 20 63 6c 61 73 73     d><td><div class
     8b2:	3d 22 25 43 4c 32 22 3e 3c 2f 64 69 76 3e 3c 2f     ="%CL2"></div></
     8c2:	74 64 3e 3c 74 64 3e 3c 69 6e 70 75 74 20 63 6c     td><td><input cl
     8d2:	61 73 73 3d 22 62 75 74 74 6f 6e 22 20 74 79 70     ass="button" typ
     8e2:	65 3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65     e="submit" value
     8f2:	3d 22 25 52 53 32 22 20 6e 61 6d 65 3d 22 52 4c     ="%RS2" name="RL
     902:	32 22 3e 3c 2f 74 64 3e 3c 74 64 3e 3c 69 6e 70     2"></td><td><inp
     912:	75 74 20 74 79 70 65 3d 22 74 65 78 74 22 20 6e     ut type="text" n
     922:	61 6d 65 3d 22 41 75 74 6f 32 22 2f 3e 3c 2f 74     ame="Auto2"/></t
     932:	64 3e 3c 74 64 3e 25 43 44 32 3c 2f 74 64 3e 3c     d><td>%CD2</td><
     942:	74 64 3e 25 54 53 32 3c 2f 74 64 3e 3c 74 64 3e     td>%TS2</td><td>
     952:	25 54 41 32 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 74     %TA2</td></tr><t
     962:	72 20 61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22     r align="center"
     972:	3e 3c 74 64 3e 44 65 76 69 63 65 20 33 3c 2f 74     ><td>Device 3</t
     982:	64 3e 3c 74 64 3e 3c 64 69 76 20 63 6c 61 73 73     d><td><div class
     992:	3d 22 25 43 4c 33 22 3e 3c 2f 64 69 76 3e 3c 2f     ="%CL3"></div></
     9a2:	74 64 3e 3c 74 64 3e 3c 69 6e 70 75 74 20 63 6c     td><td><input cl
     9b2:	61 73 73 3d 22 62 75 74 74 6f 6e 22 20 74 79 70     ass="button" typ
     9c2:	65 3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65     e="submit" value
     9d2:	3d 22 25 52 53 33 22 20 6e 61 6d 65 3d 22 52 4c     ="%RS3" name="RL
     9e2:	33 22 3e 3c 2f 74 64 3e 3c 74 64 3e 3c 69 6e 70     3"></td><td><inp
     9f2:	75 74 20 74 79 70 65 3d 22 74 65 78 74 22 20 6e     ut type="text" n
     a02:	61 6d 65 3d 22 41 75 74 6f 33 22 2f 3e 3c 2f 74     ame="Auto3"/></t
     a12:	64 3e 3c 74 64 3e 25 43 44 33 3c 2f 74 64 3e 3c     d><td>%CD3</td><
     a22:	74 64 3e 25 54 53 33 3c 2f 74 64 3e 3c 74 64 3e     td>%TS3</td><td>
     a32:	25 54 41 33 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 74     %TA3</td></tr><t
     a42:	72 20 61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22     r align="center"
     a52:	3e 3c 74 64 3e 44 65 76 69 63 65 20 34 3c 2f 74     ><td>Device 4</t
     a62:	64 3e 3c 74 64 3e 3c 64 69 76 20 63 6c 61 73 73     d><td><div class
     a72:	3d 22 25 43 4c 34 22 3e 3c 2f 64 69 76 3e 3c 2f     ="%CL4"></div></
     a82:	74 64 3e 3c 74 64 3e 3c 69 6e 70 75 74 20 63 6c     td><td><input cl
     a92:	61 73 73 3d 22 62 75 74 74 6f 6e 22 20 74 79 70     ass="button" typ
     aa2:	65 3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65     e="submit" value
     ab2:	3d 22 25 52 53 34 22 20 6e 61 6d 65 3d 22 52 4c     ="%RS4" name="RL
     ac2:	34 22 3e 3c 2f 74 64 3e 3c 74 64 3e 3c 69 6e 70     4"></td><td><inp
     ad2:	75 74 20 74 79 70 65 3d 22 74 65 78 74 22 20 6e     ut type="text" n
     ae2:	61 6d 65 3d 22 41 75 74 6f 34 22 2f 3e 3c 2f 74     ame="Auto4"/></t
     af2:	64 3e 3c 74 64 3e 25 43 44 34 3c 2f 74 64 3e 3c     d><td>%CD4</td><
     b02:	74 64 3e 25 54 53 34 3c 2f 74 64 3e 3c 74 64 3e     td>%TS4</td><td>
     b12:	25 54 41 34 3c 2f 74 64 3e 3c 2f 74 72 3e 3c 2f     %TA4</td></tr></
     b22:	74 61 62 6c 65 3e 3c 2f 66 6f 6e 74 3e 3c 70 20     table></font><p 
     b32:	61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22 3e 3c     align="center"><
     b42:	69 6e 70 75 74 20 63 6c 61 73 73 3d 22 62 75 74     input class="but
     b52:	74 6f 6e 32 22 20 74 79 70 65 3d 22 73 75 62 6d     ton2" type="subm
     b62:	69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d 69     it" value="Submi
     b72:	74 22 20 6e 61 6d 65 3d 22 53 55 42 22 3e 3c 2f     t" name="SUB"></
     b82:	70 3e 3c 2f 66 6f 72 6d 3e 3c 2f 64 69 76 3e 3c     p></form></div><
     b92:	2f 74 64 3e 3c 74 64 20 68 65 69 67 68 74 3d 22     /td><td height="
     ba2:	61 75 74 6f 22 20 61 6c 69 67 6e 3d 22 63 65 6e     auto" align="cen
     bb2:	74 65 72 22 20 77 69 64 74 68 3d 22 61 75 74 6f     ter" width="auto
     bc2:	22 3e 3c 64 69 76 20 73 74 79 6c 65 3d 22 66 6f     "><div style="fo
     bd2:	6e 74 2d 73 69 7a 65 3a 35 30 70 74 3b 20 63 6f     nt-size:50pt; co
     be2:	6c 6f 72 3a 23 46 46 46 46 46 46 22 3e 25 41 44     lor:#FFFFFF">%AD
     bf2:	3c 2f 64 69 76 3e 3c 2f 74 64 3e 3c 2f 74 72 3e     </div></td></tr>
     c02:	3c 74 72 3e 3c 74 64 20 63 6f 6c 73 70 61 6e 3d     <tr><td colspan=
     c12:	22 34 22 20 68 65 69 67 68 74 3d 22 32 35 22 20     "4" height="25" 
     c22:	77 69 64 74 68 3d 22 61 75 74 6f 22 3e 3c 64 69     width="auto"><di
     c32:	76 20 61 6c 69 67 6e 3d 22 63 65 6e 74 65 72 22     v align="center"
     c42:	20 73 74 79 6c 65 3d 22 63 6f 6c 6f 72 3a 23 46      style="color:#F
     c52:	46 46 46 46 46 22 3e 54 69 6d 65 7a 6f 6e 65 3a     FFFFF">Timezone:
     c62:	20 47 4d 54 2b 37 2e 20 43 75 72 72 65 6e 74 20      GMT+7. Current 
     c72:	74 69 6d 65 20 3c 73 70 61 6e 3e 25 54 49 3c 2f     time <span>%TI</
     c82:	73 70 61 6e 3e 3c 2f 64 69 76 3e 3c 2f 74 64 3e     span></div></td>
     c92:	3c 2f 74 72 3e 3c 2f 74 62 6f 64 79 3e 3c 2f 74     </tr></tbody></t
     ca2:	61 62 6c 65 3e 3c 2f 62 6f 64 79 3e 3c 2f 68 74     able></body></ht
     cb2:	6d 6c 3e 00                                         ml>.

00000cb6 <Auth_str>:
     cb6:	41 75 74 68 6f 72 69 7a 61 74 69 6f 6e 00           Authorization.

00000cc4 <http_pageheader_ok>:
     cc4:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 44 6f 63     HTTP/1.0 200 Doc
     cd4:	75 6d 65 6e 74 20 66 6f 6c 6c 6f 77 73 0d 0a 53     ument follows..S
     ce4:	65 72 76 65 72 3a 20 41 56 52 5f 53 6d 61 6c 6c     erver: AVR_Small
     cf4:	5f 57 65 62 73 65 72 76 65 72 0d 0a 43 6f 6e 74     _Webserver..Cont
     d04:	65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68     ent-Type: text/h
     d14:	74 6d 6c 0d 0a 0d 0a 00                             tml.....

00000d1c <http_pageheader_unauth>:
     d1c:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
     d2c:	75 74 68 6f 72 69 7a 65 64 0d 0a 53 65 72 76 65     uthorized..Serve
     d3c:	72 3a 20 41 56 52 5f 53 6d 61 6c 6c 5f 57 65 62     r: AVR_Small_Web
     d4c:	73 65 72 76 65 72 0d 0a 57 57 57 2d 41 75 74 68     server..WWW-Auth
     d5c:	65 6e 74 69 63 61 74 65 3a 20 42 61 73 69 63 20     enticate: Basic 
     d6c:	72 65 61 6c 6d 3d 22 4e 65 65 64 50 61 73 73 77     realm="NeedPassw
     d7c:	6f 72 64 22 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79     ord"..Content-Ty
     d8c:	70 65 3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d     pe: text/html...
     d9c:	0a 00                                               ..

00000d9e <http_pageheader_auth_error>:
     d9e:	34 30 31 20 55 6e 61 75 74 68 6f 72 69 7a 65 64     401 Unauthorized
     dae:	25 45 4e 44 00                                      %END.

00000db3 <http_error_notimp>:
     db3:	48 54 54 50 2f 31 2e 31 20 35 30 31 20 4e 6f 74     HTTP/1.1 501 Not
     dc3:	20 49 6d 70 6c 65 6d 65 6e 74 65 64 0d 0a 53 65      Implemented..Se
     dd3:	72 76 65 72 3a 20 41 56 52 5f 53 6d 61 6c 6c 5f     rver: AVR_Small_
     de3:	57 65 62 73 65 72 76 65 72 0d 0a 57 57 57 2d 41     Webserver..WWW-A
     df3:	75 74 68 65 6e 74 69 63 61 74 65 3a 20 42 61 73     uthenticate: Bas
     e03:	69 63 20 72 65 61 6c 6d 3d 22 4d 79 20 41 56 52     ic realm="My AVR
     e13:	20 77 65 62 20 73 65 72 76 65 72 22 0d 0a 43 6f      web server"..Co
     e23:	6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74     ntent-Type: text
     e33:	2f 68 74 6d 6c 0d 0a 0d 0a 00                       /html.....

00000e3d <BASE64CODE>:
     e3d:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     e4d:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     e5d:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     e6d:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
     e7d:	3d 00                                               =.

00000e7f <__c.2012>:
     e7f:	41 75 74 6f 34 3d 72 65 73 65 74 00                 Auto4=reset.

00000e8b <__c.2010>:
     e8b:	41 75 74 6f 33 3d 72 65 73 65 74 00                 Auto3=reset.

00000e97 <__c.2008>:
     e97:	41 75 74 6f 32 3d 72 65 73 65 74 00                 Auto2=reset.

00000ea3 <__c.2006>:
     ea3:	41 75 74 6f 31 3d 72 73 61 6c 6c 00                 Auto1=rsall.

00000eaf <__c.2004>:
     eaf:	41 75 74 6f 31 3d 72 65 73 65 74 00                 Auto1=reset.

00000ebb <__c.2002>:
     ebb:	53 55 42 3d 53 75 62 6d 69 74 00                    SUB=Submit.

00000ec6 <__c.1999>:
     ec6:	52 4c 34 3d 4f 46 46 00                             RL4=OFF.

00000ece <__c.1996>:
     ece:	52 4c 34 3d 4f 4e 00                                RL4=ON.

00000ed5 <__c.1993>:
     ed5:	52 4c 33 3d 4f 46 46 00                             RL3=OFF.

00000edd <__c.1990>:
     edd:	52 4c 33 3d 4f 4e 00                                RL3=ON.

00000ee4 <__c.1987>:
     ee4:	52 4c 32 3d 4f 46 46 00                             RL2=OFF.

00000eec <__c.1984>:
     eec:	52 4c 32 3d 4f 4e 00                                RL2=ON.

00000ef3 <__c.1981>:
     ef3:	52 4c 31 3d 4f 46 46 00                             RL1=OFF.

00000efb <__c.1977>:
     efb:	52 4c 31 3d 4f 4e 00                                RL1=ON.

00000f02 <__ctors_end>:
     f02:	11 24       	eor	r1, r1
     f04:	1f be       	out	0x3f, r1	; 63
     f06:	cf e5       	ldi	r28, 0x5F	; 95
     f08:	d8 e0       	ldi	r29, 0x08	; 8
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	cd bf       	out	0x3d, r28	; 61

00000f0e <__do_copy_data>:
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	a0 e6       	ldi	r26, 0x60	; 96
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea ea       	ldi	r30, 0xAA	; 170
     f16:	f6 e7       	ldi	r31, 0x76	; 118
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <__do_copy_data+0x10>
     f1a:	05 90       	lpm	r0, Z+
     f1c:	0d 92       	st	X+, r0
     f1e:	ae 3a       	cpi	r26, 0xAE	; 174
     f20:	b1 07       	cpc	r27, r17
     f22:	d9 f7       	brne	.-10     	; 0xf1a <__do_copy_data+0xc>

00000f24 <__do_clear_bss>:
     f24:	17 e0       	ldi	r17, 0x07	; 7
     f26:	ae ea       	ldi	r26, 0xAE	; 174
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <.do_clear_bss_start>

00000f2c <.do_clear_bss_loop>:
     f2c:	1d 92       	st	X+, r1

00000f2e <.do_clear_bss_start>:
     f2e:	aa 35       	cpi	r26, 0x5A	; 90
     f30:	b1 07       	cpc	r27, r17
     f32:	e1 f7       	brne	.-8      	; 0xf2c <.do_clear_bss_loop>
     f34:	0e 94 65 2a 	call	0x54ca	; 0x54ca <main>
     f38:	0c 94 53 3b 	jmp	0x76a6	; 0x76a6 <_exit>

00000f3c <__bad_interrupt>:
     f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f40 <arpInit>:
#include "arp.h"
#include "ip.h"
struct ARPentry ARPMyAddr;
struct ARPentry ARPTable[ARP_TABLE_SIZE];
void arpInit(void)
{
     f40:	e3 ec       	ldi	r30, 0xC3	; 195
     f42:	f0 e0       	ldi	r31, 0x00	; 0
#include "ethernet.h"
#include "arp.h"
#include "ip.h"
struct ARPentry ARPMyAddr;
struct ARPentry ARPTable[ARP_TABLE_SIZE];
void arpInit(void)
     f44:	8b e1       	ldi	r24, 0x1B	; 27
     f46:	91 e0       	ldi	r25, 0x01	; 1
{
	unsigned char i;
	for(i=0; i<ARP_TABLE_SIZE; i++)
	{
		ARPTable[i].ipAddr = 0;
     f48:	10 82       	st	Z, r1
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	12 82       	std	Z+2, r1	; 0x02
     f4e:	13 82       	std	Z+3, r1	; 0x03
		ARPTable[i].time = 0;
     f50:	12 86       	std	Z+10, r1	; 0x0a
     f52:	3b 96       	adiw	r30, 0x0b	; 11
struct ARPentry ARPMyAddr;
struct ARPentry ARPTable[ARP_TABLE_SIZE];
void arpInit(void)
{
	unsigned char i;
	for(i=0; i<ARP_TABLE_SIZE; i++)
     f54:	e8 17       	cp	r30, r24
     f56:	f9 07       	cpc	r31, r25
     f58:	b9 f7       	brne	.-18     	; 0xf48 <arpInit+0x8>
	{
		ARPTable[i].ipAddr = 0;
		ARPTable[i].time = 0;
	}
}
     f5a:	08 95       	ret

00000f5c <arpSetAddress>:
void arpSetAddress(struct ntEthAddr* ethAddr, unsigned long ipAddr)
{
	ARPMyAddr.ethAddr = *ethAddr;
     f5c:	ec eb       	ldi	r30, 0xBC	; 188
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	28 2f       	mov	r18, r24
     f62:	39 2f       	mov	r19, r25
     f64:	d9 01       	movw	r26, r18
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	0d 90       	ld	r0, X+
     f6a:	01 92       	st	Z+, r0
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <arpSetAddress+0xc>
	ARPMyAddr.ipAddr = ipAddr;
     f70:	40 93 b8 00 	sts	0x00B8, r20
     f74:	50 93 b9 00 	sts	0x00B9, r21
     f78:	60 93 ba 00 	sts	0x00BA, r22
     f7c:	70 93 bb 00 	sts	0x00BB, r23
}
     f80:	08 95       	ret

00000f82 <arpSearchIP>:
		if((ARPTable[i].ipAddr == ipaddr) && (ARPTable[i].time != 0))
		{
			return i;
		}
	}
	return -1;
     f82:	e3 ec       	ldi	r30, 0xC3	; 195
     f84:	f0 e0       	ldi	r31, 0x00	; 0
	ARPMyAddr.ipAddr = ipAddr;
}
unsigned char arpSearchIP(unsigned long ipaddr)
{
	unsigned char i;
	for(i=0; i<ARP_TABLE_SIZE; i++)
     f86:	a0 e0       	ldi	r26, 0x00	; 0
	{
		if((ARPTable[i].ipAddr == ipaddr) && (ARPTable[i].time != 0))
     f88:	20 81       	ld	r18, Z
     f8a:	31 81       	ldd	r19, Z+1	; 0x01
     f8c:	42 81       	ldd	r20, Z+2	; 0x02
     f8e:	53 81       	ldd	r21, Z+3	; 0x03
     f90:	26 17       	cp	r18, r22
     f92:	37 07       	cpc	r19, r23
     f94:	48 07       	cpc	r20, r24
     f96:	59 07       	cpc	r21, r25
     f98:	19 f4       	brne	.+6      	; 0xfa0 <arpSearchIP+0x1e>
     f9a:	22 85       	ldd	r18, Z+10	; 0x0a
     f9c:	22 23       	and	r18, r18
     f9e:	29 f4       	brne	.+10     	; 0xfaa <arpSearchIP+0x28>
	ARPMyAddr.ipAddr = ipAddr;
}
unsigned char arpSearchIP(unsigned long ipaddr)
{
	unsigned char i;
	for(i=0; i<ARP_TABLE_SIZE; i++)
     fa0:	af 5f       	subi	r26, 0xFF	; 255
     fa2:	3b 96       	adiw	r30, 0x0b	; 11
     fa4:	a8 30       	cpi	r26, 0x08	; 8
     fa6:	81 f7       	brne	.-32     	; 0xf88 <arpSearchIP+0x6>
		if((ARPTable[i].ipAddr == ipaddr) && (ARPTable[i].time != 0))
		{
			return i;
		}
	}
	return -1;
     fa8:	af ef       	ldi	r26, 0xFF	; 255
}
     faa:	8a 2f       	mov	r24, r26
     fac:	08 95       	ret

00000fae <arpUpdateEntry>:
void arpUpdateEntry(struct ntEthAddr ethAddr,unsigned long ipAddr)
{
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <arpUpdateEntry+0xe>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <arpUpdateEntry+0x10>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <arpUpdateEntry+0x12>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	49 83       	std	Y+1, r20	; 0x01
     fc6:	5a 83       	std	Y+2, r21	; 0x02
     fc8:	6b 83       	std	Y+3, r22	; 0x03
     fca:	7c 83       	std	Y+4, r23	; 0x04
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	78 01       	movw	r14, r16
     fd2:	89 01       	movw	r16, r18
	unsigned char index;
	index = arpSearchIP(ipAddr);
     fd4:	c8 01       	movw	r24, r16
     fd6:	b7 01       	movw	r22, r14
     fd8:	0e 94 c1 07 	call	0xf82	; 0xf82 <arpSearchIP>
	if(index < ARP_TABLE_SIZE)
     fdc:	88 30       	cpi	r24, 0x08	; 8
     fde:	28 f0       	brcs	.+10     	; 0xfea <arpUpdateEntry+0x3c>
		ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
		return;
	}
	for(index=0; index<ARP_TABLE_SIZE; index++)
	{
		if(!ARPTable[index].time)
     fe0:	80 91 cd 00 	lds	r24, 0x00CD
     fe4:	88 23       	and	r24, r24
     fe6:	69 f5       	brne	.+90     	; 0x1042 <arpUpdateEntry+0x94>
     fe8:	36 c0       	rjmp	.+108    	; 0x1056 <arpUpdateEntry+0xa8>
{
	unsigned char index;
	index = arpSearchIP(ipAddr);
	if(index < ARP_TABLE_SIZE)
	{
		ARPTable[index].ethAddr = ethAddr;
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	dc 01       	movw	r26, r24
     fee:	aa 0f       	add	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	9c 01       	movw	r18, r24
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	a2 0f       	add	r26, r18
    1002:	b3 1f       	adc	r27, r19
    1004:	a8 0f       	add	r26, r24
    1006:	b9 1f       	adc	r27, r25
    1008:	a9 53       	subi	r26, 0x39	; 57
    100a:	bf 4f       	sbci	r27, 0xFF	; 255
    100c:	fe 01       	movw	r30, r28
    100e:	31 96       	adiw	r30, 0x01	; 1
    1010:	26 e0       	ldi	r18, 0x06	; 6
    1012:	01 90       	ld	r0, Z+
    1014:	0d 92       	st	X+, r0
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	e1 f7       	brne	.-8      	; 0x1012 <arpUpdateEntry+0x64>
		ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
    101a:	fc 01       	movw	r30, r24
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	9c 01       	movw	r18, r24
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	8e 0f       	add	r24, r30
    1034:	9f 1f       	adc	r25, r31
    1036:	fc 01       	movw	r30, r24
    1038:	ed 53       	subi	r30, 0x3D	; 61
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	8a ef       	ldi	r24, 0xFA	; 250
    103e:	82 87       	std	Z+10, r24	; 0x0a
		return;
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <arpUpdateEntry+0x112>
    1042:	e8 ed       	ldi	r30, 0xD8	; 216
    1044:	f0 e0       	ldi	r31, 0x00	; 0
	}
	for(index=0; index<ARP_TABLE_SIZE; index++)
	{
		if(!ARPTable[index].time)
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
			return i;
		}
	}
	return -1;
}
void arpUpdateEntry(struct ntEthAddr ethAddr,unsigned long ipAddr)
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	9c 01       	movw	r18, r24
		ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
		return;
	}
	for(index=0; index<ARP_TABLE_SIZE; index++)
	{
		if(!ARPTable[index].time)
    104e:	40 81       	ld	r20, Z
    1050:	44 23       	and	r20, r20
    1052:	91 f5       	brne	.+100    	; 0x10b8 <arpUpdateEntry+0x10a>
    1054:	02 c0       	rjmp	.+4      	; 0x105a <arpUpdateEntry+0xac>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
		{
			ARPTable[index].ethAddr = ethAddr;
    105a:	d9 01       	movw	r26, r18
    105c:	aa 0f       	add	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	c9 01       	movw	r24, r18
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	a8 0f       	add	r26, r24
    1070:	b9 1f       	adc	r27, r25
    1072:	a2 0f       	add	r26, r18
    1074:	b3 1f       	adc	r27, r19
    1076:	a9 53       	subi	r26, 0x39	; 57
    1078:	bf 4f       	sbci	r27, 0xFF	; 255
    107a:	fe 01       	movw	r30, r28
    107c:	31 96       	adiw	r30, 0x01	; 1
    107e:	86 e0       	ldi	r24, 0x06	; 6
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	81 50       	subi	r24, 0x01	; 1
    1086:	e1 f7       	brne	.-8      	; 0x1080 <arpUpdateEntry+0xd2>
			ARPTable[index].ipAddr = ipAddr;
    1088:	f9 01       	movw	r30, r18
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	e8 0f       	add	r30, r24
    109e:	f9 1f       	adc	r31, r25
    10a0:	2e 0f       	add	r18, r30
    10a2:	3f 1f       	adc	r19, r31
    10a4:	f9 01       	movw	r30, r18
    10a6:	ed 53       	subi	r30, 0x3D	; 61
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	e0 82       	st	Z, r14
    10ac:	f1 82       	std	Z+1, r15	; 0x01
    10ae:	02 83       	std	Z+2, r16	; 0x02
    10b0:	13 83       	std	Z+3, r17	; 0x03
			ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
    10b2:	8a ef       	ldi	r24, 0xFA	; 250
    10b4:	82 87       	std	Z+10, r24	; 0x0a
			return;
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <arpUpdateEntry+0x112>
    10b8:	3b 96       	adiw	r30, 0x0b	; 11
	{
		ARPTable[index].ethAddr = ethAddr;
		ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
		return;
	}
	for(index=0; index<ARP_TABLE_SIZE; index++)
    10ba:	87 30       	cpi	r24, 0x07	; 7
    10bc:	91 05       	cpc	r25, r1
    10be:	29 f6       	brne	.-118    	; 0x104a <arpUpdateEntry+0x9c>
			ARPTable[index].ipAddr = ipAddr;
			ARPTable[index].time = ARP_CACHE_TIME_TO_LIVE;
			return;
		}
	}
}
    10c0:	26 96       	adiw	r28, 0x06	; 6
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <arpArpProcess>:
void arpArpProcess(unsigned int len, unsigned char* ethFrame)
{
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	7c 01       	movw	r14, r24
    10f4:	eb 01       	movw	r28, r22
	struct ntEthHeader* ethHeader;
	struct ntARPHeader* arpHeader;
	ethHeader = (struct ntEthHeader*)ethFrame;
	arpHeader = (struct ntARPHeader*)(ethFrame + ETH_HEADER_LEN);
    10f6:	0f 2e       	mov	r0, r31
    10f8:	fe e0       	ldi	r31, 0x0E	; 14
    10fa:	cf 2e       	mov	r12, r31
    10fc:	dd 24       	eor	r13, r13
    10fe:	f0 2d       	mov	r31, r0
    1100:	c6 0e       	add	r12, r22
    1102:	d7 1e       	adc	r13, r23
	if(	(arpHeader->hwType == 0x0100) &&
    1104:	8e 85       	ldd	r24, Y+14	; 0x0e
    1106:	9f 85       	ldd	r25, Y+15	; 0x0f
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	80 30       	cpi	r24, 0x00	; 0
    110c:	92 07       	cpc	r25, r18
    110e:	09 f0       	breq	.+2      	; 0x1112 <arpArpProcess+0x38>
    1110:	1c c1       	rjmp	.+568    	; 0x134a <arpArpProcess+0x270>
    1112:	f6 01       	movw	r30, r12
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	91 05       	cpc	r25, r1
    111c:	09 f0       	breq	.+2      	; 0x1120 <arpArpProcess+0x46>
    111e:	15 c1       	rjmp	.+554    	; 0x134a <arpArpProcess+0x270>
		(arpHeader->protocol == 0x0008)  &&
    1120:	84 81       	ldd	r24, Z+4	; 0x04
    1122:	86 30       	cpi	r24, 0x06	; 6
    1124:	09 f0       	breq	.+2      	; 0x1128 <arpArpProcess+0x4e>
    1126:	11 c1       	rjmp	.+546    	; 0x134a <arpArpProcess+0x270>
		(arpHeader->hwLen == 0x06) && 
    1128:	85 81       	ldd	r24, Z+5	; 0x05
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	09 f0       	breq	.+2      	; 0x1130 <arpArpProcess+0x56>
    112e:	0d c1       	rjmp	.+538    	; 0x134a <arpArpProcess+0x270>
		(arpHeader->protoLen == 0x04) &&
		(arpHeader->dipaddr == HTONL(ARPMyAddr.ipAddr))){
    1130:	20 91 b8 00 	lds	r18, 0x00B8
    1134:	30 91 b9 00 	lds	r19, 0x00B9
    1138:	40 91 ba 00 	lds	r20, 0x00BA
    113c:	50 91 bb 00 	lds	r21, 0x00BB
    1140:	85 2e       	mov	r8, r21
    1142:	99 24       	eor	r9, r9
    1144:	aa 24       	eor	r10, r10
    1146:	bb 24       	eor	r11, r11
    1148:	b2 2f       	mov	r27, r18
    114a:	aa 27       	eor	r26, r26
    114c:	99 27       	eor	r25, r25
    114e:	88 27       	eor	r24, r24
    1150:	88 2a       	or	r8, r24
    1152:	99 2a       	or	r9, r25
    1154:	aa 2a       	or	r10, r26
    1156:	bb 2a       	or	r11, r27
    1158:	da 01       	movw	r26, r20
    115a:	c9 01       	movw	r24, r18
    115c:	80 70       	andi	r24, 0x00	; 0
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	b0 70       	andi	r27, 0x00	; 0
    1162:	89 2f       	mov	r24, r25
    1164:	9a 2f       	mov	r25, r26
    1166:	ab 2f       	mov	r26, r27
    1168:	bb 27       	eor	r27, r27
    116a:	88 29       	or	r24, r8
    116c:	99 29       	or	r25, r9
    116e:	aa 29       	or	r26, r10
    1170:	bb 29       	or	r27, r11
    1172:	20 70       	andi	r18, 0x00	; 0
    1174:	40 70       	andi	r20, 0x00	; 0
    1176:	50 70       	andi	r21, 0x00	; 0
    1178:	54 2f       	mov	r21, r20
    117a:	43 2f       	mov	r20, r19
    117c:	32 2f       	mov	r19, r18
    117e:	22 27       	eor	r18, r18
    1180:	28 2b       	or	r18, r24
    1182:	39 2b       	or	r19, r25
    1184:	4a 2b       	or	r20, r26
    1186:	5b 2b       	or	r21, r27
	ethHeader = (struct ntEthHeader*)ethFrame;
	arpHeader = (struct ntARPHeader*)(ethFrame + ETH_HEADER_LEN);
	if(	(arpHeader->hwType == 0x0100) &&
		(arpHeader->protocol == 0x0008)  &&
		(arpHeader->hwLen == 0x06) && 
		(arpHeader->protoLen == 0x04) &&
    1188:	80 8d       	ldd	r24, Z+24	; 0x18
    118a:	91 8d       	ldd	r25, Z+25	; 0x19
    118c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    118e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1190:	82 17       	cp	r24, r18
    1192:	93 07       	cpc	r25, r19
    1194:	a4 07       	cpc	r26, r20
    1196:	b5 07       	cpc	r27, r21
    1198:	09 f0       	breq	.+2      	; 0x119c <arpArpProcess+0xc2>
    119a:	d7 c0       	rjmp	.+430    	; 0x134a <arpArpProcess+0x270>
		(arpHeader->dipaddr == HTONL(ARPMyAddr.ipAddr))){
		if(arpHeader->opcode == HTONS(ARP_OPCODE_REQUEST)){
    119c:	86 81       	ldd	r24, Z+6	; 0x06
    119e:	97 81       	ldd	r25, Z+7	; 0x07
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	80 30       	cpi	r24, 0x00	; 0
    11a4:	9f 07       	cpc	r25, r31
    11a6:	09 f0       	breq	.+2      	; 0x11aa <arpArpProcess+0xd0>
    11a8:	99 c0       	rjmp	.+306    	; 0x12dc <arpArpProcess+0x202>
			arpUpdateEntry(arpHeader->shwaddr,HTONL(arpHeader->sipaddr));
    11aa:	f6 01       	movw	r30, r12
    11ac:	26 85       	ldd	r18, Z+14	; 0x0e
    11ae:	37 85       	ldd	r19, Z+15	; 0x0f
    11b0:	40 89       	ldd	r20, Z+16	; 0x10
    11b2:	51 89       	ldd	r21, Z+17	; 0x11
    11b4:	85 2e       	mov	r8, r21
    11b6:	99 24       	eor	r9, r9
    11b8:	aa 24       	eor	r10, r10
    11ba:	bb 24       	eor	r11, r11
    11bc:	b2 2f       	mov	r27, r18
    11be:	aa 27       	eor	r26, r26
    11c0:	99 27       	eor	r25, r25
    11c2:	88 27       	eor	r24, r24
    11c4:	88 2a       	or	r8, r24
    11c6:	99 2a       	or	r9, r25
    11c8:	aa 2a       	or	r10, r26
    11ca:	bb 2a       	or	r11, r27
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18
    11d0:	80 70       	andi	r24, 0x00	; 0
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	b0 70       	andi	r27, 0x00	; 0
    11d6:	89 2f       	mov	r24, r25
    11d8:	9a 2f       	mov	r25, r26
    11da:	ab 2f       	mov	r26, r27
    11dc:	bb 27       	eor	r27, r27
    11de:	88 29       	or	r24, r8
    11e0:	99 29       	or	r25, r9
    11e2:	aa 29       	or	r26, r10
    11e4:	bb 29       	or	r27, r11
    11e6:	20 70       	andi	r18, 0x00	; 0
    11e8:	40 70       	andi	r20, 0x00	; 0
    11ea:	50 70       	andi	r21, 0x00	; 0
    11ec:	00 27       	eor	r16, r16
    11ee:	12 2f       	mov	r17, r18
    11f0:	23 2f       	mov	r18, r19
    11f2:	34 2f       	mov	r19, r20
    11f4:	08 2b       	or	r16, r24
    11f6:	19 2b       	or	r17, r25
    11f8:	2a 2b       	or	r18, r26
    11fa:	3b 2b       	or	r19, r27
    11fc:	40 85       	ldd	r20, Z+8	; 0x08
    11fe:	51 85       	ldd	r21, Z+9	; 0x09
    1200:	62 85       	ldd	r22, Z+10	; 0x0a
    1202:	73 85       	ldd	r23, Z+11	; 0x0b
    1204:	84 85       	ldd	r24, Z+12	; 0x0c
    1206:	95 85       	ldd	r25, Z+13	; 0x0d
    1208:	0e 94 d7 07 	call	0xfae	; 0xfae <arpUpdateEntry>
			arpHeader->dhwaddr = arpHeader->shwaddr;
    120c:	d6 01       	movw	r26, r12
    120e:	52 96       	adiw	r26, 0x12	; 18
    1210:	f6 01       	movw	r30, r12
    1212:	38 96       	adiw	r30, 0x08	; 8
    1214:	86 e0       	ldi	r24, 0x06	; 6
    1216:	01 90       	ld	r0, Z+
    1218:	0d 92       	st	X+, r0
    121a:	81 50       	subi	r24, 0x01	; 1
    121c:	e1 f7       	brne	.-8      	; 0x1216 <arpArpProcess+0x13c>
			arpHeader->dipaddr = arpHeader->sipaddr;
    121e:	f6 01       	movw	r30, r12
    1220:	86 85       	ldd	r24, Z+14	; 0x0e
    1222:	97 85       	ldd	r25, Z+15	; 0x0f
    1224:	a0 89       	ldd	r26, Z+16	; 0x10
    1226:	b1 89       	ldd	r27, Z+17	; 0x11
    1228:	80 8f       	std	Z+24, r24	; 0x18
    122a:	91 8f       	std	Z+25, r25	; 0x19
    122c:	a2 8f       	std	Z+26, r26	; 0x1a
    122e:	b3 8f       	std	Z+27, r27	; 0x1b
			arpHeader->shwaddr = ARPMyAddr.ethAddr;
    1230:	d6 01       	movw	r26, r12
    1232:	18 96       	adiw	r26, 0x08	; 8
    1234:	ec eb       	ldi	r30, 0xBC	; 188
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	01 90       	ld	r0, Z+
    123c:	0d 92       	st	X+, r0
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	e1 f7       	brne	.-8      	; 0x123a <arpArpProcess+0x160>
			arpHeader->sipaddr = HTONL(ARPMyAddr.ipAddr);
    1242:	20 91 b8 00 	lds	r18, 0x00B8
    1246:	30 91 b9 00 	lds	r19, 0x00B9
    124a:	40 91 ba 00 	lds	r20, 0x00BA
    124e:	50 91 bb 00 	lds	r21, 0x00BB
    1252:	85 2e       	mov	r8, r21
    1254:	99 24       	eor	r9, r9
    1256:	aa 24       	eor	r10, r10
    1258:	bb 24       	eor	r11, r11
    125a:	b2 2f       	mov	r27, r18
    125c:	aa 27       	eor	r26, r26
    125e:	99 27       	eor	r25, r25
    1260:	88 27       	eor	r24, r24
    1262:	88 2a       	or	r8, r24
    1264:	99 2a       	or	r9, r25
    1266:	aa 2a       	or	r10, r26
    1268:	bb 2a       	or	r11, r27
    126a:	da 01       	movw	r26, r20
    126c:	c9 01       	movw	r24, r18
    126e:	80 70       	andi	r24, 0x00	; 0
    1270:	90 70       	andi	r25, 0x00	; 0
    1272:	b0 70       	andi	r27, 0x00	; 0
    1274:	89 2f       	mov	r24, r25
    1276:	9a 2f       	mov	r25, r26
    1278:	ab 2f       	mov	r26, r27
    127a:	bb 27       	eor	r27, r27
    127c:	88 2a       	or	r8, r24
    127e:	99 2a       	or	r9, r25
    1280:	aa 2a       	or	r10, r26
    1282:	bb 2a       	or	r11, r27
    1284:	da 01       	movw	r26, r20
    1286:	c9 01       	movw	r24, r18
    1288:	80 70       	andi	r24, 0x00	; 0
    128a:	a0 70       	andi	r26, 0x00	; 0
    128c:	b0 70       	andi	r27, 0x00	; 0
    128e:	ba 2f       	mov	r27, r26
    1290:	a9 2f       	mov	r26, r25
    1292:	98 2f       	mov	r25, r24
    1294:	88 27       	eor	r24, r24
    1296:	88 29       	or	r24, r8
    1298:	99 29       	or	r25, r9
    129a:	aa 29       	or	r26, r10
    129c:	bb 29       	or	r27, r11
    129e:	f6 01       	movw	r30, r12
    12a0:	86 87       	std	Z+14, r24	; 0x0e
    12a2:	97 87       	std	Z+15, r25	; 0x0f
    12a4:	a0 8b       	std	Z+16, r26	; 0x10
    12a6:	b1 8b       	std	Z+17, r27	; 0x11
			arpHeader->opcode = HTONS(ARP_OPCODE_REPLY);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	97 83       	std	Z+7, r25	; 0x07
    12ae:	86 83       	std	Z+6, r24	; 0x06
			ethHeader->desAddr = ethHeader->srcAddr;
    12b0:	de 01       	movw	r26, r28
    12b2:	fe 01       	movw	r30, r28
    12b4:	36 96       	adiw	r30, 0x06	; 6
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	01 90       	ld	r0, Z+
    12ba:	0d 92       	st	X+, r0
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <arpArpProcess+0x1de>
			ethHeader->srcAddr  = ARPMyAddr.ethAddr;
    12c0:	de 01       	movw	r26, r28
    12c2:	16 96       	adiw	r26, 0x06	; 6
    12c4:	ec eb       	ldi	r30, 0xBC	; 188
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	86 e0       	ldi	r24, 0x06	; 6
    12ca:	01 90       	ld	r0, Z+
    12cc:	0d 92       	st	X+, r0
    12ce:	81 50       	subi	r24, 0x01	; 1
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <arpArpProcess+0x1f0>
			ethSendFrame(len, (unsigned char*)ethHeader);
    12d2:	c7 01       	movw	r24, r14
    12d4:	be 01       	movw	r22, r28
    12d6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ethSendFrame>
			return;
    12da:	37 c0       	rjmp	.+110    	; 0x134a <arpArpProcess+0x270>
		}
		if(arpHeader->opcode == HTONS(ARP_OPCODE_REPLY)){
    12dc:	f2 e0       	ldi	r31, 0x02	; 2
    12de:	80 30       	cpi	r24, 0x00	; 0
    12e0:	9f 07       	cpc	r25, r31
    12e2:	99 f5       	brne	.+102    	; 0x134a <arpArpProcess+0x270>
			arpUpdateEntry(arpHeader->shwaddr,HTONL(arpHeader->sipaddr));
    12e4:	f6 01       	movw	r30, r12
    12e6:	86 85       	ldd	r24, Z+14	; 0x0e
    12e8:	97 85       	ldd	r25, Z+15	; 0x0f
    12ea:	a0 89       	ldd	r26, Z+16	; 0x10
    12ec:	b1 89       	ldd	r27, Z+17	; 0x11
    12ee:	eb 2e       	mov	r14, r27
    12f0:	ff 24       	eor	r15, r15
    12f2:	00 27       	eor	r16, r16
    12f4:	11 27       	eor	r17, r17
    12f6:	58 2f       	mov	r21, r24
    12f8:	44 27       	eor	r20, r20
    12fa:	33 27       	eor	r19, r19
    12fc:	22 27       	eor	r18, r18
    12fe:	e2 2a       	or	r14, r18
    1300:	f3 2a       	or	r15, r19
    1302:	04 2b       	or	r16, r20
    1304:	15 2b       	or	r17, r21
    1306:	9c 01       	movw	r18, r24
    1308:	ad 01       	movw	r20, r26
    130a:	20 70       	andi	r18, 0x00	; 0
    130c:	30 70       	andi	r19, 0x00	; 0
    130e:	50 70       	andi	r21, 0x00	; 0
    1310:	23 2f       	mov	r18, r19
    1312:	34 2f       	mov	r19, r20
    1314:	45 2f       	mov	r20, r21
    1316:	55 27       	eor	r21, r21
    1318:	2e 29       	or	r18, r14
    131a:	3f 29       	or	r19, r15
    131c:	40 2b       	or	r20, r16
    131e:	51 2b       	or	r21, r17
    1320:	80 70       	andi	r24, 0x00	; 0
    1322:	a0 70       	andi	r26, 0x00	; 0
    1324:	b0 70       	andi	r27, 0x00	; 0
    1326:	ba 2f       	mov	r27, r26
    1328:	a9 2f       	mov	r26, r25
    132a:	98 2f       	mov	r25, r24
    132c:	88 27       	eor	r24, r24
    132e:	89 01       	movw	r16, r18
    1330:	9a 01       	movw	r18, r20
    1332:	08 2b       	or	r16, r24
    1334:	19 2b       	or	r17, r25
    1336:	2a 2b       	or	r18, r26
    1338:	3b 2b       	or	r19, r27
    133a:	40 85       	ldd	r20, Z+8	; 0x08
    133c:	51 85       	ldd	r21, Z+9	; 0x09
    133e:	62 85       	ldd	r22, Z+10	; 0x0a
    1340:	73 85       	ldd	r23, Z+11	; 0x0b
    1342:	84 85       	ldd	r24, Z+12	; 0x0c
    1344:	95 85       	ldd	r25, Z+13	; 0x0d
    1346:	0e 94 d7 07 	call	0xfae	; 0xfae <arpUpdateEntry>
			return;
		}
	}
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	8f 90       	pop	r8
    1362:	08 95       	ret

00001364 <arpIPPacketIn>:
void arpIPPacketIn(unsigned char* ethFrame)
{
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	fc 01       	movw	r30, r24
	struct ntEthHeader* ethHeader;
	struct ntIPHeader* ipHeader;
	ethHeader = (struct ntEthHeader*)ethFrame;
	ipHeader = (struct ntIPHeader*)(ethFrame + ETH_HEADER_LEN);
	arpUpdateEntry(ethHeader->srcAddr,HTONL(ipHeader->srcIPAddr));
    136a:	82 8d       	ldd	r24, Z+26	; 0x1a
    136c:	93 8d       	ldd	r25, Z+27	; 0x1b
    136e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1370:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1372:	4b 2f       	mov	r20, r27
    1374:	55 27       	eor	r21, r21
    1376:	66 27       	eor	r22, r22
    1378:	77 27       	eor	r23, r23
    137a:	38 2f       	mov	r19, r24
    137c:	22 27       	eor	r18, r18
    137e:	11 27       	eor	r17, r17
    1380:	00 27       	eor	r16, r16
    1382:	40 2b       	or	r20, r16
    1384:	51 2b       	or	r21, r17
    1386:	62 2b       	or	r22, r18
    1388:	73 2b       	or	r23, r19
    138a:	8c 01       	movw	r16, r24
    138c:	9d 01       	movw	r18, r26
    138e:	00 70       	andi	r16, 0x00	; 0
    1390:	10 70       	andi	r17, 0x00	; 0
    1392:	30 70       	andi	r19, 0x00	; 0
    1394:	01 2f       	mov	r16, r17
    1396:	12 2f       	mov	r17, r18
    1398:	23 2f       	mov	r18, r19
    139a:	33 27       	eor	r19, r19
    139c:	04 2b       	or	r16, r20
    139e:	15 2b       	or	r17, r21
    13a0:	26 2b       	or	r18, r22
    13a2:	37 2b       	or	r19, r23
    13a4:	80 70       	andi	r24, 0x00	; 0
    13a6:	a0 70       	andi	r26, 0x00	; 0
    13a8:	b0 70       	andi	r27, 0x00	; 0
    13aa:	ba 2f       	mov	r27, r26
    13ac:	a9 2f       	mov	r26, r25
    13ae:	98 2f       	mov	r25, r24
    13b0:	88 27       	eor	r24, r24
    13b2:	08 2b       	or	r16, r24
    13b4:	19 2b       	or	r17, r25
    13b6:	2a 2b       	or	r18, r26
    13b8:	3b 2b       	or	r19, r27
    13ba:	46 81       	ldd	r20, Z+6	; 0x06
    13bc:	57 81       	ldd	r21, Z+7	; 0x07
    13be:	60 85       	ldd	r22, Z+8	; 0x08
    13c0:	71 85       	ldd	r23, Z+9	; 0x09
    13c2:	82 85       	ldd	r24, Z+10	; 0x0a
    13c4:	93 85       	ldd	r25, Z+11	; 0x0b
    13c6:	0e 94 d7 07 	call	0xfae	; 0xfae <arpUpdateEntry>
}
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <arpIpOut>:
void arpIpOut(unsigned char* ethFrame, unsigned long phyDstIp)
{
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
	struct ntEthHeader* ethHeader;
	struct ntIPHeader* ipHeader;
	ethHeader = (struct ntEthHeader*)ethFrame;
	ipHeader = (struct ntIPHeader*)(ethFrame + ETH_HEADER_LEN);

	if(phyDstIp)
    13de:	41 15       	cp	r20, r1
    13e0:	51 05       	cpc	r21, r1
    13e2:	61 05       	cpc	r22, r1
    13e4:	71 05       	cpc	r23, r1
    13e6:	29 f0       	breq	.+10     	; 0x13f2 <arpIpOut+0x22>
		index = arpSearchIP(phyDstIp);
    13e8:	cb 01       	movw	r24, r22
    13ea:	ba 01       	movw	r22, r20
    13ec:	0e 94 c1 07 	call	0xf82	; 0xf82 <arpSearchIP>
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <arpIpOut+0x76>
	else
		index = arpSearchIP(HTONL(ipHeader->desIPAddr));
    13f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13f6:	a8 a1       	ldd	r26, Y+32	; 0x20
    13f8:	b9 a1       	ldd	r27, Y+33	; 0x21
    13fa:	eb 2e       	mov	r14, r27
    13fc:	ff 24       	eor	r15, r15
    13fe:	00 27       	eor	r16, r16
    1400:	11 27       	eor	r17, r17
    1402:	58 2f       	mov	r21, r24
    1404:	44 27       	eor	r20, r20
    1406:	33 27       	eor	r19, r19
    1408:	22 27       	eor	r18, r18
    140a:	e2 2a       	or	r14, r18
    140c:	f3 2a       	or	r15, r19
    140e:	04 2b       	or	r16, r20
    1410:	15 2b       	or	r17, r21
    1412:	9c 01       	movw	r18, r24
    1414:	ad 01       	movw	r20, r26
    1416:	20 70       	andi	r18, 0x00	; 0
    1418:	30 70       	andi	r19, 0x00	; 0
    141a:	50 70       	andi	r21, 0x00	; 0
    141c:	23 2f       	mov	r18, r19
    141e:	34 2f       	mov	r19, r20
    1420:	45 2f       	mov	r20, r21
    1422:	55 27       	eor	r21, r21
    1424:	2e 29       	or	r18, r14
    1426:	3f 29       	or	r19, r15
    1428:	40 2b       	or	r20, r16
    142a:	51 2b       	or	r21, r17
    142c:	80 70       	andi	r24, 0x00	; 0
    142e:	a0 70       	andi	r26, 0x00	; 0
    1430:	b0 70       	andi	r27, 0x00	; 0
    1432:	66 27       	eor	r22, r22
    1434:	78 2f       	mov	r23, r24
    1436:	89 2f       	mov	r24, r25
    1438:	9a 2f       	mov	r25, r26
    143a:	62 2b       	or	r22, r18
    143c:	73 2b       	or	r23, r19
    143e:	84 2b       	or	r24, r20
    1440:	95 2b       	or	r25, r21
    1442:	0e 94 c1 07 	call	0xf82	; 0xf82 <arpSearchIP>
	if(index < ARP_TABLE_SIZE)
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	30 f5       	brcc	.+76     	; 0x1496 <arpIpOut+0xc6>
	{
		ethHeader->srcAddr  = ARPMyAddr.ethAddr;
    144a:	de 01       	movw	r26, r28
    144c:	16 96       	adiw	r26, 0x06	; 6
    144e:	ec eb       	ldi	r30, 0xBC	; 188
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	96 e0       	ldi	r25, 0x06	; 6
    1454:	01 90       	ld	r0, Z+
    1456:	0d 92       	st	X+, r0
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	e1 f7       	brne	.-8      	; 0x1454 <arpIpOut+0x84>
		ethHeader->desAddr = ARPTable[index].ethAddr;
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	fc 01       	movw	r30, r24
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	9c 01       	movw	r18, r24
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	e2 0f       	add	r30, r18
    1474:	f3 1f       	adc	r31, r19
    1476:	8e 0f       	add	r24, r30
    1478:	9f 1f       	adc	r25, r31
    147a:	de 01       	movw	r26, r28
    147c:	fc 01       	movw	r30, r24
    147e:	e9 53       	subi	r30, 0x39	; 57
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	01 90       	ld	r0, Z+
    1486:	0d 92       	st	X+, r0
    1488:	81 50       	subi	r24, 0x01	; 1
    148a:	e1 f7       	brne	.-8      	; 0x1484 <arpIpOut+0xb4>
		ethHeader->type = HTONS(ETH_TYPE_IP);
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9d 87       	std	Y+13, r25	; 0x0d
    1492:	8c 87       	std	Y+12, r24	; 0x0c
    1494:	14 c0       	rjmp	.+40     	; 0x14be <arpIpOut+0xee>
	}
	else
	{
		ethHeader->srcAddr = ARPMyAddr.ethAddr;
    1496:	de 01       	movw	r26, r28
    1498:	16 96       	adiw	r26, 0x06	; 6
    149a:	ec eb       	ldi	r30, 0xBC	; 188
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	01 90       	ld	r0, Z+
    14a2:	0d 92       	st	X+, r0
    14a4:	81 50       	subi	r24, 0x01	; 1
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <arpIpOut+0xd0>
		ethHeader->desAddr.addr[0] = 0xFF;
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	88 83       	st	Y, r24
		ethHeader->desAddr.addr[1] = 0xFF;
    14ac:	89 83       	std	Y+1, r24	; 0x01
		ethHeader->desAddr.addr[2] = 0xFF;
    14ae:	8a 83       	std	Y+2, r24	; 0x02
		ethHeader->desAddr.addr[3] = 0xFF;
    14b0:	8b 83       	std	Y+3, r24	; 0x03
		ethHeader->desAddr.addr[4] = 0xFF;
    14b2:	8c 83       	std	Y+4, r24	; 0x04
		ethHeader->desAddr.addr[5] = 0xFF;
    14b4:	8d 83       	std	Y+5, r24	; 0x05
		ethHeader->type = HTONS(ETH_TYPE_IP);
    14b6:	88 e0       	ldi	r24, 0x08	; 8
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9d 87       	std	Y+13, r25	; 0x0d
    14bc:	8c 87       	std	Y+12, r24	; 0x0c
	}
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <arpTimer>:
void arpTimer(void)
//Goi moi 10s
{
    14cc:	ed ec       	ldi	r30, 0xCD	; 205
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
		ethHeader->desAddr.addr[4] = 0xFF;
		ethHeader->desAddr.addr[5] = 0xFF;
		ethHeader->type = HTONS(ETH_TYPE_IP);
	}
}
void arpTimer(void)
    14d0:	85 e2       	ldi	r24, 0x25	; 37
    14d2:	91 e0       	ldi	r25, 0x01	; 1
//Goi moi 10s
{
	int index;
	for(index=0; index<ARP_TABLE_SIZE; index++)
	{
		if(ARPTable[index].time)
    14d4:	20 81       	ld	r18, Z
    14d6:	22 23       	and	r18, r18
    14d8:	11 f0       	breq	.+4      	; 0x14de <arpTimer+0x12>
			ARPTable[index].time--;
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	20 83       	st	Z, r18
    14de:	3b 96       	adiw	r30, 0x0b	; 11
}
void arpTimer(void)
//Goi moi 10s
{
	int index;
	for(index=0; index<ARP_TABLE_SIZE; index++)
    14e0:	e8 17       	cp	r30, r24
    14e2:	f9 07       	cpc	r31, r25
    14e4:	b9 f7       	brne	.-18     	; 0x14d4 <arpTimer+0x8>
	{
		if(ARPTable[index].time)
			ARPTable[index].time--;
	}
    14e6:	08 95       	ret

000014e8 <dhcpInit>:
unsigned char DhcpRetries;

//Ham khoi tao cac thong so ban dau cho DHCP
void dhcpInit(void)
{
	ethGetMacAddress(macaddr);
    14e8:	88 e2       	ldi	r24, 0x28	; 40
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ethGetMacAddress>
	DhcpTransactID = *((unsigned long*)&macaddr[0]);
    14f0:	80 91 28 01 	lds	r24, 0x0128
    14f4:	90 91 29 01 	lds	r25, 0x0129
    14f8:	a0 91 2a 01 	lds	r26, 0x012A
    14fc:	b0 91 2b 01 	lds	r27, 0x012B
    1500:	80 93 1b 01 	sts	0x011B, r24
    1504:	90 93 1c 01 	sts	0x011C, r25
    1508:	a0 93 1d 01 	sts	0x011D, r26
    150c:	b0 93 1e 01 	sts	0x011E, r27
	DhcpLeaseTime = 0;
    1510:	10 92 20 01 	sts	0x0120, r1
    1514:	10 92 21 01 	sts	0x0121, r1
    1518:	10 92 22 01 	sts	0x0122, r1
    151c:	10 92 23 01 	sts	0x0123, r1
	DhcpTimeout = 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 2e 01 	sts	0x012E, r24
	DhcpRetries = DHCP_RETRIES;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	80 93 1f 01 	sts	0x011F, r24
}
    152c:	08 95       	ret

0000152e <dhcpSetOption>:

//Ham set cac option cua DHCP
unsigned char* dhcpSetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
{
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	fc 01       	movw	r30, r24
	*options++ = optcode;
    1538:	dc 01       	movw	r26, r24
    153a:	6d 93       	st	X+, r22
	*options++ = optlen;
    153c:	41 83       	std	Z+1, r20	; 0x01
    153e:	8d 01       	movw	r16, r26
    1540:	0f 5f       	subi	r16, 0xFF	; 255
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
	while(optlen--)
    1544:	44 23       	and	r20, r20
    1546:	99 f0       	breq	.+38     	; 0x156e <dhcpSetOption+0x40>
    1548:	82 2f       	mov	r24, r18
    154a:	93 2f       	mov	r25, r19
    154c:	41 50       	subi	r20, 0x01	; 1
	DhcpTimeout = 1;
	DhcpRetries = DHCP_RETRIES;
}

//Ham set cac option cua DHCP
unsigned char* dhcpSetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	33 96       	adiw	r30, 0x03	; 3
    1552:	e4 0f       	add	r30, r20
    1554:	f5 1f       	adc	r31, r21
{
	*options++ = optcode;
	*options++ = optlen;
    1556:	e8 01       	movw	r28, r16
	while(optlen--)
	{
		*options++ = *(unsigned char*)optvalptr++;
    1558:	dc 01       	movw	r26, r24
    155a:	2d 91       	ld	r18, X+
    155c:	cd 01       	movw	r24, r26
    155e:	29 93       	st	Y+, r18
//Ham set cac option cua DHCP
unsigned char* dhcpSetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
{
	*options++ = optcode;
	*options++ = optlen;
	while(optlen--)
    1560:	ce 17       	cp	r28, r30
    1562:	df 07       	cpc	r29, r31
    1564:	c9 f7       	brne	.-14     	; 0x1558 <dhcpSetOption+0x2a>
	DhcpTimeout = 1;
	DhcpRetries = DHCP_RETRIES;
}

//Ham set cac option cua DHCP
unsigned char* dhcpSetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
    1566:	4f 5f       	subi	r20, 0xFF	; 255
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
{
	*options++ = optcode;
	*options++ = optlen;
	while(optlen--)
    156a:	04 0f       	add	r16, r20
    156c:	15 1f       	adc	r17, r21
	{
		*options++ = *(unsigned char*)optvalptr++;
	}
	*options = DHCP_OPT_END;
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	f8 01       	movw	r30, r16
    1572:	80 83       	st	Z, r24
	return options;
}
    1574:	80 2f       	mov	r24, r16
    1576:	91 2f       	mov	r25, r17
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <dhcpGetOption>:

//Ham lay cac option cua DHCP
unsigned char dhcpGetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	fc 01       	movw	r30, r24
	unsigned char i;
	for (;;)
	{
		if(*options == DHCP_OPT_PAD)
    1588:	80 81       	ld	r24, Z
    158a:	88 23       	and	r24, r24
    158c:	11 f4       	brne	.+4      	; 0x1592 <dhcpGetOption+0x10>
			options++;
    158e:	31 96       	adiw	r30, 0x01	; 1
    1590:	fb cf       	rjmp	.-10     	; 0x1588 <dhcpGetOption+0x6>
		else if(*options == DHCP_OPT_END)
    1592:	8f 3f       	cpi	r24, 0xFF	; 255
    1594:	09 f1       	breq	.+66     	; 0x15d8 <dhcpGetOption+0x56>
			break;
		else if(*options == optcode)
    1596:	86 17       	cp	r24, r22
    1598:	b9 f4       	brne	.+46     	; 0x15c8 <dhcpGetOption+0x46>
		{
			optlen = ((optlen<*(options+1))?(optlen):(*(options+1)));
    159a:	ef 01       	movw	r28, r30
    159c:	21 96       	adiw	r28, 0x01	; 1
    159e:	51 81       	ldd	r21, Z+1	; 0x01
    15a0:	45 17       	cp	r20, r21
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <dhcpGetOption+0x24>
    15a4:	54 2f       	mov	r21, r20
			for(i=0; i<optlen; i++)
    15a6:	55 23       	and	r21, r21
    15a8:	69 f0       	breq	.+26     	; 0x15c4 <dhcpGetOption+0x42>
	*options = DHCP_OPT_END;
	return options;
}

//Ham lay cac option cua DHCP
unsigned char dhcpGetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
    15aa:	32 96       	adiw	r30, 0x02	; 2
		else if(*options == DHCP_OPT_END)
			break;
		else if(*options == optcode)
		{
			optlen = ((optlen<*(options+1))?(optlen):(*(options+1)));
			for(i=0; i<optlen; i++)
    15ac:	82 2f       	mov	r24, r18
    15ae:	93 2f       	mov	r25, r19
    15b0:	dc 01       	movw	r26, r24
	*options = DHCP_OPT_END;
	return options;
}

//Ham lay cac option cua DHCP
unsigned char dhcpGetOption(unsigned char* options, unsigned char optcode, unsigned char optlen, void* optvalptr)
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	51 50       	subi	r21, 0x01	; 1
    15b6:	85 0f       	add	r24, r21
    15b8:	91 1d       	adc	r25, r1
			break;
		else if(*options == optcode)
		{
			optlen = ((optlen<*(options+1))?(optlen):(*(options+1)));
			for(i=0; i<optlen; i++)
				*(((uint8_t*)optvalptr)+i) = *(options+i+2);
    15ba:	21 91       	ld	r18, Z+
    15bc:	2d 93       	st	X+, r18
		else if(*options == DHCP_OPT_END)
			break;
		else if(*options == optcode)
		{
			optlen = ((optlen<*(options+1))?(optlen):(*(options+1)));
			for(i=0; i<optlen; i++)
    15be:	a8 17       	cp	r26, r24
    15c0:	b9 07       	cpc	r27, r25
    15c2:	d9 f7       	brne	.-10     	; 0x15ba <dhcpGetOption+0x38>
				*(((uint8_t*)optvalptr)+i) = *(options+i+2);
			return *(options+1);
    15c4:	88 81       	ld	r24, Y
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <dhcpGetOption+0x58>
		}
		else
		{
			options++;
    15c8:	cf 01       	movw	r24, r30
    15ca:	01 96       	adiw	r24, 0x01	; 1
			options+=*options;
    15cc:	51 81       	ldd	r21, Z+1	; 0x01
    15ce:	fc 01       	movw	r30, r24
    15d0:	e5 0f       	add	r30, r21
    15d2:	f1 1d       	adc	r31, r1
			options++;
    15d4:	31 96       	adiw	r30, 0x01	; 1
    15d6:	d8 cf       	rjmp	.-80     	; 0x1588 <dhcpGetOption+0x6>
		}
	}
	return 0;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <dhcpDiscover>:

//Ham gui di mot ban tin DHCP discover de tim kiem DHCP server
void dhcpDiscover(void)
{
    15e0:	2f 92       	push	r2
    15e2:	3f 92       	push	r3
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <dhcpDiscover+0x26>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <dhcpDiscover+0x28>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	struct netDhcpHeader* packet;
	unsigned long val;
	unsigned char* optptr;
	
	packet = (struct netDhcpHeader*)(ethGetBuffer() + ETH_HEADER_LEN + IP_HEADER_LEN + UDP_HEADER_LEN);
    160c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <ethGetBuffer>
    1610:	8c 01       	movw	r16, r24
    1612:	0f 2e       	mov	r0, r31
    1614:	fa e2       	ldi	r31, 0x2A	; 42
    1616:	ef 2e       	mov	r14, r31
    1618:	ff 24       	eor	r15, r15
    161a:	f0 2d       	mov	r31, r0
    161c:	e8 0e       	add	r14, r24
    161e:	f9 1e       	adc	r15, r25
	//
	packet->bootp.opcode = BOOTP_OP_BOOTREQUEST;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	f8 01       	movw	r30, r16
    1624:	82 a7       	std	Z+42, r24	; 0x2a
	packet->bootp.hwaddrtype = BOOTP_HTYPE_ETHERNET;
    1626:	f7 01       	movw	r30, r14
    1628:	81 83       	std	Z+1, r24	; 0x01
	packet->bootp.hwaddrlen = BOOTP_HLEN_ETHERNET;
    162a:	86 e0       	ldi	r24, 0x06	; 6
    162c:	82 83       	std	Z+2, r24	; 0x02
	packet->bootp.clipaddr = HTONL(ipGetConfig()->ip);
    162e:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1632:	fc 01       	movw	r30, r24
    1634:	a0 80       	ld	r10, Z
    1636:	b1 80       	ldd	r11, Z+1	; 0x01
    1638:	c2 80       	ldd	r12, Z+2	; 0x02
    163a:	d3 80       	ldd	r13, Z+3	; 0x03
    163c:	da 2c       	mov	r13, r10
    163e:	cc 24       	eor	r12, r12
    1640:	bb 24       	eor	r11, r11
    1642:	aa 24       	eor	r10, r10
    1644:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	a2 81       	ldd	r26, Z+2	; 0x02
    1650:	b3 81       	ldd	r27, Z+3	; 0x03
    1652:	80 70       	andi	r24, 0x00	; 0
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	b0 70       	andi	r27, 0x00	; 0
    1658:	29 2e       	mov	r2, r25
    165a:	3a 2e       	mov	r3, r26
    165c:	4b 2e       	mov	r4, r27
    165e:	55 24       	eor	r5, r5
    1660:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	a2 81       	ldd	r26, Z+2	; 0x02
    166c:	b3 81       	ldd	r27, Z+3	; 0x03
    166e:	80 70       	andi	r24, 0x00	; 0
    1670:	a0 70       	andi	r26, 0x00	; 0
    1672:	b0 70       	andi	r27, 0x00	; 0
    1674:	66 24       	eor	r6, r6
    1676:	78 2e       	mov	r7, r24
    1678:	89 2e       	mov	r8, r25
    167a:	9a 2e       	mov	r9, r26
    167c:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1680:	fc 01       	movw	r30, r24
    1682:	83 81       	ldd	r24, Z+3	; 0x03
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e0       	ldi	r26, 0x00	; 0
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	a8 2a       	or	r10, r24
    168c:	b9 2a       	or	r11, r25
    168e:	ca 2a       	or	r12, r26
    1690:	db 2a       	or	r13, r27
    1692:	a2 28       	or	r10, r2
    1694:	b3 28       	or	r11, r3
    1696:	c4 28       	or	r12, r4
    1698:	d5 28       	or	r13, r5
    169a:	6a 28       	or	r6, r10
    169c:	7b 28       	or	r7, r11
    169e:	8c 28       	or	r8, r12
    16a0:	9d 28       	or	r9, r13
    16a2:	f7 01       	movw	r30, r14
    16a4:	64 86       	std	Z+12, r6	; 0x0c
    16a6:	75 86       	std	Z+13, r7	; 0x0d
    16a8:	86 86       	std	Z+14, r8	; 0x0e
    16aa:	97 86       	std	Z+15, r9	; 0x0f
	packet->bootp.yoipaddr = HTONL(0l);
    16ac:	10 8a       	std	Z+16, r1	; 0x10
    16ae:	11 8a       	std	Z+17, r1	; 0x11
    16b0:	12 8a       	std	Z+18, r1	; 0x12
    16b2:	13 8a       	std	Z+19, r1	; 0x13
	packet->bootp.seipaddr = HTONL(0l);
    16b4:	14 8a       	std	Z+20, r1	; 0x14
    16b6:	15 8a       	std	Z+21, r1	; 0x15
    16b8:	16 8a       	std	Z+22, r1	; 0x16
    16ba:	17 8a       	std	Z+23, r1	; 0x17
	packet->bootp.gwipaddr = HTONL(0l);
    16bc:	10 8e       	std	Z+24, r1	; 0x18
    16be:	11 8e       	std	Z+25, r1	; 0x19
    16c0:	12 8e       	std	Z+26, r1	; 0x1a
    16c2:	13 8e       	std	Z+27, r1	; 0x1b
	ethGetMacAddress(&packet->bootp.clhwaddr[0]);
    16c4:	c7 01       	movw	r24, r14
    16c6:	4c 96       	adiw	r24, 0x1c	; 28
    16c8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ethGetMacAddress>
	packet->bootp.transid = DhcpTransactID;
    16cc:	80 91 1b 01 	lds	r24, 0x011B
    16d0:	90 91 1c 01 	lds	r25, 0x011C
    16d4:	a0 91 1d 01 	lds	r26, 0x011D
    16d8:	b0 91 1e 01 	lds	r27, 0x011E
    16dc:	f7 01       	movw	r30, r14
    16de:	84 83       	std	Z+4, r24	; 0x04
    16e0:	95 83       	std	Z+5, r25	; 0x05
    16e2:	a6 83       	std	Z+6, r26	; 0x06
    16e4:	b7 83       	std	Z+7, r27	; 0x07
	packet->bootp.flags = HTONS(1);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	93 87       	std	Z+11, r25	; 0x0b
    16ec:	82 87       	std	Z+10, r24	; 0x0a
	packet->cookie = 0x63538263;
    16ee:	f8 01       	movw	r30, r16
    16f0:	ea 5e       	subi	r30, 0xEA	; 234
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	83 e6       	ldi	r24, 0x63	; 99
    16f6:	92 e8       	ldi	r25, 0x82	; 130
    16f8:	a3 e5       	ldi	r26, 0x53	; 83
    16fa:	b3 e6       	ldi	r27, 0x63	; 99
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	a2 83       	std	Z+2, r26	; 0x02
    1702:	b3 83       	std	Z+3, r27	; 0x03
	val = DHCP_MSG_DHCPDISCOVER;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	ab 83       	std	Y+3, r26	; 0x03
    1712:	bc 83       	std	Y+4, r27	; 0x04
	optptr = dhcpSetOption(packet->options, DHCP_OPT_DHCPMSGTYPE, 1, &val);
    1714:	c8 01       	movw	r24, r16
    1716:	86 5e       	subi	r24, 0xE6	; 230
    1718:	9e 4f       	sbci	r25, 0xFE	; 254
    171a:	65 e3       	ldi	r22, 0x35	; 53
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	9e 01       	movw	r18, r28
    1720:	2f 5f       	subi	r18, 0xFF	; 255
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	dhcpSetOption(optptr, DHCP_OPT_CLIENTID, 6, macaddr);
    1728:	6d e3       	ldi	r22, 0x3D	; 61
    172a:	46 e0       	ldi	r20, 0x06	; 6
    172c:	28 e2       	ldi	r18, 0x28	; 40
    172e:	31 e0       	ldi	r19, 0x01	; 1
    1730:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	udpSend(0xFFFFFFFF, DHCP_UDP_SERVER_PORT, DHCP_UDP_CLIENT_PORT, DHCP_HEADER_LEN+3+1+8, (unsigned char*)packet);
    1734:	6f ef       	ldi	r22, 0xFF	; 255
    1736:	7f ef       	ldi	r23, 0xFF	; 255
    1738:	cb 01       	movw	r24, r22
    173a:	43 e4       	ldi	r20, 0x43	; 67
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	24 e4       	ldi	r18, 0x44	; 68
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	0c ef       	ldi	r16, 0xFC	; 252
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <udpSend>
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	6f 90       	pop	r6
    176e:	5f 90       	pop	r5
    1770:	4f 90       	pop	r4
    1772:	3f 90       	pop	r3
    1774:	2f 90       	pop	r2
    1776:	08 95       	ret

00001778 <dhcpRequest>:

//Ham gui di mot ban tin DHCP request de yeu cau nhan dia chi IP
void dhcpRequest(struct netDhcpHeader* packet, unsigned long serverid)
{
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	28 97       	sbiw	r28, 0x08	; 8
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	7c 01       	movw	r14, r24
    1798:	4d 83       	std	Y+5, r20	; 0x05
    179a:	5e 83       	std	Y+6, r21	; 0x06
    179c:	6f 83       	std	Y+7, r22	; 0x07
    179e:	78 87       	std	Y+8, r23	; 0x08
	unsigned char* optptr;
	unsigned long val;

	packet->bootp.opcode = BOOTP_OP_BOOTREQUEST;		// request type
    17a0:	dd 24       	eor	r13, r13
    17a2:	d3 94       	inc	r13
    17a4:	fc 01       	movw	r30, r24
    17a6:	d0 82       	st	Z, r13
	val = DHCP_MSG_DHCPREQUEST;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	ab 83       	std	Y+3, r26	; 0x03
    17b6:	bc 83       	std	Y+4, r27	; 0x04
	optptr = dhcpSetOption(packet->options, DHCP_OPT_DHCPMSGTYPE, 1, &val);
    17b8:	c7 01       	movw	r24, r14
    17ba:	80 51       	subi	r24, 0x10	; 16
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	65 e3       	ldi	r22, 0x35	; 53
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	8e 01       	movw	r16, r28
    17c4:	0f 5f       	subi	r16, 0xFF	; 255
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	98 01       	movw	r18, r16
    17ca:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	optptr = dhcpSetOption(optptr, DHCP_OPT_CLIENTID, 6, macaddr);
    17ce:	6d e3       	ldi	r22, 0x3D	; 61
    17d0:	46 e0       	ldi	r20, 0x06	; 6
    17d2:	28 e2       	ldi	r18, 0x28	; 40
    17d4:	31 e0       	ldi	r19, 0x01	; 1
    17d6:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	optptr = dhcpSetOption(optptr, DHCP_OPT_SERVERID, 4, &serverid);
    17da:	66 e3       	ldi	r22, 0x36	; 54
    17dc:	44 e0       	ldi	r20, 0x04	; 4
    17de:	9e 01       	movw	r18, r28
    17e0:	2b 5f       	subi	r18, 0xFB	; 251
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	optptr = dhcpSetOption(optptr, DHCP_OPT_REQUESTEDIP, 4, &packet->bootp.yoipaddr);
    17e8:	97 01       	movw	r18, r14
    17ea:	20 5f       	subi	r18, 0xF0	; 240
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	62 e3       	ldi	r22, 0x32	; 50
    17f0:	44 e0       	ldi	r20, 0x04	; 4
    17f2:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	((unsigned char*)&val)[0] = DHCP_OPT_NETMASK;
    17f6:	d9 82       	std	Y+1, r13	; 0x01
	((unsigned char*)&val)[1] = DHCP_OPT_ROUTERS;
    17f8:	23 e0       	ldi	r18, 0x03	; 3
    17fa:	f8 01       	movw	r30, r16
    17fc:	21 83       	std	Z+1, r18	; 0x01
	((unsigned char*)&val)[2] = DHCP_OPT_DNSSERVERS;
    17fe:	26 e0       	ldi	r18, 0x06	; 6
    1800:	22 83       	std	Z+2, r18	; 0x02
	((unsigned char*)&val)[3] = DHCP_OPT_DOMAINNAME;
    1802:	2f e0       	ldi	r18, 0x0F	; 15
    1804:	23 83       	std	Z+3, r18	; 0x03
	optptr = dhcpSetOption(optptr, DHCP_OPT_PARAMREQLIST, 4, &val);
    1806:	67 e3       	ldi	r22, 0x37	; 55
    1808:	44 e0       	ldi	r20, 0x04	; 4
    180a:	98 01       	movw	r18, r16
    180c:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	packet->bootp.yoipaddr = HTONL(0l);
    1810:	f7 01       	movw	r30, r14
    1812:	10 8a       	std	Z+16, r1	; 0x10
    1814:	11 8a       	std	Z+17, r1	; 0x11
    1816:	12 8a       	std	Z+18, r1	; 0x12
    1818:	13 8a       	std	Z+19, r1	; 0x13
	udpSend(0xFFFFFFFF, DHCP_UDP_SERVER_PORT, DHCP_UDP_CLIENT_PORT, DHCP_HEADER_LEN+3+6+6+6+8+1, (unsigned char*)packet);
    181a:	6f ef       	ldi	r22, 0xFF	; 255
    181c:	7f ef       	ldi	r23, 0xFF	; 255
    181e:	cb 01       	movw	r24, r22
    1820:	43 e4       	ldi	r20, 0x43	; 67
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	24 e4       	ldi	r18, 0x44	; 68
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	0e e0       	ldi	r16, 0x0E	; 14
    182a:	11 e0       	ldi	r17, 0x01	; 1
    182c:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <udpSend>
}
    1830:	28 96       	adiw	r28, 0x08	; 8
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	08 95       	ret

0000184c <dhcpIn>:

//Ham xu ly mot goi DHCP nhan duoc
void dhcpIn(unsigned int len, struct netDhcpHeader* packet)
{
    184c:	4f 92       	push	r4
    184e:	5f 92       	push	r5
    1850:	6f 92       	push	r6
    1852:	7f 92       	push	r7
    1854:	8f 92       	push	r8
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	2d 97       	sbiw	r28, 0x0d	; 13
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	8b 01       	movw	r16, r22
	unsigned char msgtype;
	unsigned long sid;
	unsigned long netmask;
	unsigned long gateway;
	unsigned long val;
	if((packet->bootp.opcode != BOOTP_OP_BOOTREPLY) || (packet->bootp.transid != DhcpTransactID))
    187e:	db 01       	movw	r26, r22
    1880:	8c 91       	ld	r24, X
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	09 f0       	breq	.+2      	; 0x1888 <dhcpIn+0x3c>
    1886:	0d c1       	rjmp	.+538    	; 0x1aa2 <dhcpIn+0x256>
    1888:	14 96       	adiw	r26, 0x04	; 4
    188a:	2d 91       	ld	r18, X+
    188c:	3d 91       	ld	r19, X+
    188e:	4d 91       	ld	r20, X+
    1890:	5c 91       	ld	r21, X
    1892:	17 97       	sbiw	r26, 0x07	; 7
    1894:	80 91 1b 01 	lds	r24, 0x011B
    1898:	90 91 1c 01 	lds	r25, 0x011C
    189c:	a0 91 1d 01 	lds	r26, 0x011D
    18a0:	b0 91 1e 01 	lds	r27, 0x011E
    18a4:	28 17       	cp	r18, r24
    18a6:	39 07       	cpc	r19, r25
    18a8:	4a 07       	cpc	r20, r26
    18aa:	5b 07       	cpc	r21, r27
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <dhcpIn+0x64>
    18ae:	f9 c0       	rjmp	.+498    	; 0x1aa2 <dhcpIn+0x256>
		{
		//ethInit();
		return;	
		}
	dhcpGetOption(packet->options, DHCP_OPT_DHCPMSGTYPE, 1, &msgtype);
    18b0:	0f 2e       	mov	r0, r31
    18b2:	f0 ef       	ldi	r31, 0xF0	; 240
    18b4:	ef 2e       	mov	r14, r31
    18b6:	ff 24       	eor	r15, r15
    18b8:	f0 2d       	mov	r31, r0
    18ba:	e6 0e       	add	r14, r22
    18bc:	f7 1e       	adc	r15, r23
    18be:	c7 01       	movw	r24, r14
    18c0:	65 e3       	ldi	r22, 0x35	; 53
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	9e 01       	movw	r18, r28
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	0e 94 c1 0a 	call	0x1582	; 0x1582 <dhcpGetOption>
	if(msgtype == DHCP_MSG_DHCPOFFER)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	81 f4       	brne	.+32     	; 0x18f4 <dhcpIn+0xa8>
	{
		dhcpGetOption(packet->options, DHCP_OPT_SERVERID, 4, &sid);
    18d4:	c7 01       	movw	r24, r14
    18d6:	66 e3       	ldi	r22, 0x36	; 54
    18d8:	44 e0       	ldi	r20, 0x04	; 4
    18da:	9e 01       	movw	r18, r28
    18dc:	2e 5f       	subi	r18, 0xFE	; 254
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <dhcpGetOption>
		dhcpRequest(packet, sid);
    18e4:	4a 81       	ldd	r20, Y+2	; 0x02
    18e6:	5b 81       	ldd	r21, Y+3	; 0x03
    18e8:	6c 81       	ldd	r22, Y+4	; 0x04
    18ea:	7d 81       	ldd	r23, Y+5	; 0x05
    18ec:	c8 01       	movw	r24, r16
    18ee:	0e 94 bc 0b 	call	0x1778	; 0x1778 <dhcpRequest>
    18f2:	d7 c0       	rjmp	.+430    	; 0x1aa2 <dhcpIn+0x256>
	}
	//
	else if(msgtype == DHCP_MSG_DHCPACK)
    18f4:	85 30       	cpi	r24, 0x05	; 5
    18f6:	09 f0       	breq	.+2      	; 0x18fa <dhcpIn+0xae>
    18f8:	d4 c0       	rjmp	.+424    	; 0x1aa2 <dhcpIn+0x256>
	{
		dhcpGetOption(packet->options, DHCP_OPT_NETMASK, 4, &val);
    18fa:	0f 2e       	mov	r0, r31
    18fc:	f6 e0       	ldi	r31, 0x06	; 6
    18fe:	cf 2e       	mov	r12, r31
    1900:	dd 24       	eor	r13, r13
    1902:	f0 2d       	mov	r31, r0
    1904:	cc 0e       	add	r12, r28
    1906:	dd 1e       	adc	r13, r29
    1908:	c7 01       	movw	r24, r14
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	44 e0       	ldi	r20, 0x04	; 4
    190e:	96 01       	movw	r18, r12
    1910:	0e 94 c1 0a 	call	0x1582	; 0x1582 <dhcpGetOption>
		netmask = HTONL(val);
    1914:	8e 80       	ldd	r8, Y+6	; 0x06
    1916:	9f 80       	ldd	r9, Y+7	; 0x07
    1918:	a8 84       	ldd	r10, Y+8	; 0x08
    191a:	b9 84       	ldd	r11, Y+9	; 0x09
		dhcpGetOption(packet->options, DHCP_OPT_ROUTERS, 4, &val);
    191c:	c7 01       	movw	r24, r14
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	44 e0       	ldi	r20, 0x04	; 4
    1922:	96 01       	movw	r18, r12
    1924:	0e 94 c1 0a 	call	0x1582	; 0x1582 <dhcpGetOption>
		gateway = HTONL(val);
    1928:	4e 80       	ldd	r4, Y+6	; 0x06
    192a:	5f 80       	ldd	r5, Y+7	; 0x07
    192c:	68 84       	ldd	r6, Y+8	; 0x08
    192e:	79 84       	ldd	r7, Y+9	; 0x09
		dhcpGetOption(packet->options, DHCP_OPT_LEASETIME, 4, &val);
    1930:	c7 01       	movw	r24, r14
    1932:	63 e3       	ldi	r22, 0x33	; 51
    1934:	44 e0       	ldi	r20, 0x04	; 4
    1936:	96 01       	movw	r18, r12
    1938:	0e 94 c1 0a 	call	0x1582	; 0x1582 <dhcpGetOption>
		DhcpLeaseTime = HTONL(val);
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9f 81       	ldd	r25, Y+7	; 0x07
    1940:	a8 85       	ldd	r26, Y+8	; 0x08
    1942:	b9 85       	ldd	r27, Y+9	; 0x09
    1944:	cb 2e       	mov	r12, r27
    1946:	dd 24       	eor	r13, r13
    1948:	ee 24       	eor	r14, r14
    194a:	ff 24       	eor	r15, r15
    194c:	58 2f       	mov	r21, r24
    194e:	44 27       	eor	r20, r20
    1950:	33 27       	eor	r19, r19
    1952:	22 27       	eor	r18, r18
    1954:	c2 2a       	or	r12, r18
    1956:	d3 2a       	or	r13, r19
    1958:	e4 2a       	or	r14, r20
    195a:	f5 2a       	or	r15, r21
    195c:	9c 01       	movw	r18, r24
    195e:	ad 01       	movw	r20, r26
    1960:	20 70       	andi	r18, 0x00	; 0
    1962:	30 70       	andi	r19, 0x00	; 0
    1964:	50 70       	andi	r21, 0x00	; 0
    1966:	23 2f       	mov	r18, r19
    1968:	34 2f       	mov	r19, r20
    196a:	45 2f       	mov	r20, r21
    196c:	55 27       	eor	r21, r21
    196e:	2c 29       	or	r18, r12
    1970:	3d 29       	or	r19, r13
    1972:	4e 29       	or	r20, r14
    1974:	5f 29       	or	r21, r15
    1976:	80 70       	andi	r24, 0x00	; 0
    1978:	a0 70       	andi	r26, 0x00	; 0
    197a:	b0 70       	andi	r27, 0x00	; 0
    197c:	cc 24       	eor	r12, r12
    197e:	d8 2e       	mov	r13, r24
    1980:	e9 2e       	mov	r14, r25
    1982:	fa 2e       	mov	r15, r26
    1984:	2c 29       	or	r18, r12
    1986:	3d 29       	or	r19, r13
    1988:	4e 29       	or	r20, r14
    198a:	5f 29       	or	r21, r15
    198c:	20 93 20 01 	sts	0x0120, r18
    1990:	30 93 21 01 	sts	0x0121, r19
    1994:	40 93 22 01 	sts	0x0122, r20
    1998:	50 93 23 01 	sts	0x0123, r21
		ipSetConfig(HTONL(packet->bootp.yoipaddr), netmask, gateway);
    199c:	f8 01       	movw	r30, r16
    199e:	80 89       	ldd	r24, Z+16	; 0x10
    19a0:	91 89       	ldd	r25, Z+17	; 0x11
    19a2:	a2 89       	ldd	r26, Z+18	; 0x12
    19a4:	b3 89       	ldd	r27, Z+19	; 0x13
    19a6:	eb 2e       	mov	r14, r27
    19a8:	ff 24       	eor	r15, r15
    19aa:	00 27       	eor	r16, r16
    19ac:	11 27       	eor	r17, r17
    19ae:	58 2f       	mov	r21, r24
    19b0:	44 27       	eor	r20, r20
    19b2:	33 27       	eor	r19, r19
    19b4:	22 27       	eor	r18, r18
    19b6:	e2 2a       	or	r14, r18
    19b8:	f3 2a       	or	r15, r19
    19ba:	04 2b       	or	r16, r20
    19bc:	15 2b       	or	r17, r21
    19be:	9c 01       	movw	r18, r24
    19c0:	ad 01       	movw	r20, r26
    19c2:	20 70       	andi	r18, 0x00	; 0
    19c4:	30 70       	andi	r19, 0x00	; 0
    19c6:	50 70       	andi	r21, 0x00	; 0
    19c8:	23 2f       	mov	r18, r19
    19ca:	34 2f       	mov	r19, r20
    19cc:	45 2f       	mov	r20, r21
    19ce:	55 27       	eor	r21, r21
    19d0:	2e 29       	or	r18, r14
    19d2:	3f 29       	or	r19, r15
    19d4:	40 2b       	or	r20, r16
    19d6:	51 2b       	or	r21, r17
    19d8:	80 70       	andi	r24, 0x00	; 0
    19da:	a0 70       	andi	r26, 0x00	; 0
    19dc:	b0 70       	andi	r27, 0x00	; 0
    19de:	ee 24       	eor	r14, r14
    19e0:	f8 2e       	mov	r15, r24
    19e2:	09 2f       	mov	r16, r25
    19e4:	1a 2f       	mov	r17, r26
    19e6:	da 01       	movw	r26, r20
    19e8:	c9 01       	movw	r24, r18
    19ea:	8e 29       	or	r24, r14
    19ec:	9f 29       	or	r25, r15
    19ee:	a0 2b       	or	r26, r16
    19f0:	b1 2b       	or	r27, r17
    19f2:	8a 87       	std	Y+10, r24	; 0x0a
    19f4:	9b 87       	std	Y+11, r25	; 0x0b
    19f6:	ac 87       	std	Y+12, r26	; 0x0c
    19f8:	bd 87       	std	Y+13, r27	; 0x0d
	}
	//
	else if(msgtype == DHCP_MSG_DHCPACK)
	{
		dhcpGetOption(packet->options, DHCP_OPT_NETMASK, 4, &val);
		netmask = HTONL(val);
    19fa:	2b 2d       	mov	r18, r11
    19fc:	33 27       	eor	r19, r19
    19fe:	44 27       	eor	r20, r20
    1a00:	55 27       	eor	r21, r21
    1a02:	b8 2d       	mov	r27, r8
    1a04:	aa 27       	eor	r26, r26
    1a06:	99 27       	eor	r25, r25
    1a08:	88 27       	eor	r24, r24
    1a0a:	28 2b       	or	r18, r24
    1a0c:	39 2b       	or	r19, r25
    1a0e:	4a 2b       	or	r20, r26
    1a10:	5b 2b       	or	r21, r27
    1a12:	d5 01       	movw	r26, r10
    1a14:	c4 01       	movw	r24, r8
    1a16:	80 70       	andi	r24, 0x00	; 0
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	b0 70       	andi	r27, 0x00	; 0
    1a1c:	89 2f       	mov	r24, r25
    1a1e:	9a 2f       	mov	r25, r26
    1a20:	ab 2f       	mov	r26, r27
    1a22:	bb 27       	eor	r27, r27
    1a24:	28 2b       	or	r18, r24
    1a26:	39 2b       	or	r19, r25
    1a28:	4a 2b       	or	r20, r26
    1a2a:	5b 2b       	or	r21, r27
    1a2c:	d5 01       	movw	r26, r10
    1a2e:	c4 01       	movw	r24, r8
    1a30:	80 70       	andi	r24, 0x00	; 0
    1a32:	a0 70       	andi	r26, 0x00	; 0
    1a34:	b0 70       	andi	r27, 0x00	; 0
    1a36:	ba 2f       	mov	r27, r26
    1a38:	a9 2f       	mov	r26, r25
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	88 27       	eor	r24, r24
    1a3e:	28 2b       	or	r18, r24
    1a40:	39 2b       	or	r19, r25
    1a42:	4a 2b       	or	r20, r26
    1a44:	5b 2b       	or	r21, r27
		dhcpGetOption(packet->options, DHCP_OPT_ROUTERS, 4, &val);
		gateway = HTONL(val);
    1a46:	e7 2c       	mov	r14, r7
    1a48:	ff 24       	eor	r15, r15
    1a4a:	00 27       	eor	r16, r16
    1a4c:	11 27       	eor	r17, r17
    1a4e:	b4 2d       	mov	r27, r4
    1a50:	aa 27       	eor	r26, r26
    1a52:	99 27       	eor	r25, r25
    1a54:	88 27       	eor	r24, r24
    1a56:	e8 2a       	or	r14, r24
    1a58:	f9 2a       	or	r15, r25
    1a5a:	0a 2b       	or	r16, r26
    1a5c:	1b 2b       	or	r17, r27
    1a5e:	d3 01       	movw	r26, r6
    1a60:	c2 01       	movw	r24, r4
    1a62:	80 70       	andi	r24, 0x00	; 0
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	b0 70       	andi	r27, 0x00	; 0
    1a68:	89 2f       	mov	r24, r25
    1a6a:	9a 2f       	mov	r25, r26
    1a6c:	ab 2f       	mov	r26, r27
    1a6e:	bb 27       	eor	r27, r27
    1a70:	e8 2a       	or	r14, r24
    1a72:	f9 2a       	or	r15, r25
    1a74:	0a 2b       	or	r16, r26
    1a76:	1b 2b       	or	r17, r27
    1a78:	d3 01       	movw	r26, r6
    1a7a:	c2 01       	movw	r24, r4
    1a7c:	80 70       	andi	r24, 0x00	; 0
    1a7e:	a0 70       	andi	r26, 0x00	; 0
    1a80:	b0 70       	andi	r27, 0x00	; 0
    1a82:	ba 2f       	mov	r27, r26
    1a84:	a9 2f       	mov	r26, r25
    1a86:	98 2f       	mov	r25, r24
    1a88:	88 27       	eor	r24, r24
    1a8a:	e8 2a       	or	r14, r24
    1a8c:	f9 2a       	or	r15, r25
    1a8e:	0a 2b       	or	r16, r26
    1a90:	1b 2b       	or	r17, r27
		dhcpGetOption(packet->options, DHCP_OPT_LEASETIME, 4, &val);
		DhcpLeaseTime = HTONL(val);
		ipSetConfig(HTONL(packet->bootp.yoipaddr), netmask, gateway);
    1a92:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a94:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a9a:	0e 94 08 1c 	call	0x3810	; 0x3810 <ipSetConfig>
		DhcpRetries = 0;
    1a9e:	10 92 1f 01 	sts	0x011F, r1
	}
}
    1aa2:	2d 96       	adiw	r28, 0x0d	; 13
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	5f 90       	pop	r5
    1acc:	4f 90       	pop	r4
    1ace:	08 95       	ret

00001ad0 <dhcpRelease>:
//Ham release dia chi IP hien tai va xoa cac thong so cau hinh IP dang co
void dhcpRelease(void)
{
    1ad0:	2f 92       	push	r2
    1ad2:	3f 92       	push	r3
    1ad4:	4f 92       	push	r4
    1ad6:	5f 92       	push	r5
    1ad8:	6f 92       	push	r6
    1ada:	7f 92       	push	r7
    1adc:	8f 92       	push	r8
    1ade:	9f 92       	push	r9
    1ae0:	af 92       	push	r10
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <dhcpRelease+0x26>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <dhcpRelease+0x28>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
	struct netDhcpHeader* packet;
	unsigned long val;
	unsigned char* optptr;
	
	packet = (struct netDhcpHeader*)&ethGetBuffer()[ETH_HEADER_LEN+IP_HEADER_LEN+UDP_HEADER_LEN];
    1afc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <ethGetBuffer>
    1b00:	8c 01       	movw	r16, r24
    1b02:	0f 2e       	mov	r0, r31
    1b04:	fa e2       	ldi	r31, 0x2A	; 42
    1b06:	ef 2e       	mov	r14, r31
    1b08:	ff 24       	eor	r15, r15
    1b0a:	f0 2d       	mov	r31, r0
    1b0c:	e8 0e       	add	r14, r24
    1b0e:	f9 1e       	adc	r15, r25

	// build BOOTP/DHCP header
	packet->bootp.opcode = BOOTP_OP_BOOTREQUEST;		// request type
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	f8 01       	movw	r30, r16
    1b14:	82 a7       	std	Z+42, r24	; 0x2a
	packet->bootp.hwaddrtype = BOOTP_HTYPE_ETHERNET;
    1b16:	f7 01       	movw	r30, r14
    1b18:	81 83       	std	Z+1, r24	; 0x01
	packet->bootp.hwaddrlen = BOOTP_HLEN_ETHERNET;
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	82 83       	std	Z+2, r24	; 0x02
	packet->bootp.clipaddr = HTONL(ipGetConfig()->ip);
    1b1e:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1b22:	fc 01       	movw	r30, r24
    1b24:	a0 80       	ld	r10, Z
    1b26:	b1 80       	ldd	r11, Z+1	; 0x01
    1b28:	c2 80       	ldd	r12, Z+2	; 0x02
    1b2a:	d3 80       	ldd	r13, Z+3	; 0x03
    1b2c:	da 2c       	mov	r13, r10
    1b2e:	cc 24       	eor	r12, r12
    1b30:	bb 24       	eor	r11, r11
    1b32:	aa 24       	eor	r10, r10
    1b34:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    1b40:	b3 81       	ldd	r27, Z+3	; 0x03
    1b42:	80 70       	andi	r24, 0x00	; 0
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	b0 70       	andi	r27, 0x00	; 0
    1b48:	29 2e       	mov	r2, r25
    1b4a:	3a 2e       	mov	r3, r26
    1b4c:	4b 2e       	mov	r4, r27
    1b4e:	55 24       	eor	r5, r5
    1b50:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1b54:	fc 01       	movw	r30, r24
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b5e:	80 70       	andi	r24, 0x00	; 0
    1b60:	a0 70       	andi	r26, 0x00	; 0
    1b62:	b0 70       	andi	r27, 0x00	; 0
    1b64:	66 24       	eor	r6, r6
    1b66:	78 2e       	mov	r7, r24
    1b68:	89 2e       	mov	r8, r25
    1b6a:	9a 2e       	mov	r9, r26
    1b6c:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    1b70:	fc 01       	movw	r30, r24
    1b72:	83 81       	ldd	r24, Z+3	; 0x03
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 e0       	ldi	r26, 0x00	; 0
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	a8 2a       	or	r10, r24
    1b7c:	b9 2a       	or	r11, r25
    1b7e:	ca 2a       	or	r12, r26
    1b80:	db 2a       	or	r13, r27
    1b82:	a2 28       	or	r10, r2
    1b84:	b3 28       	or	r11, r3
    1b86:	c4 28       	or	r12, r4
    1b88:	d5 28       	or	r13, r5
    1b8a:	6a 28       	or	r6, r10
    1b8c:	7b 28       	or	r7, r11
    1b8e:	8c 28       	or	r8, r12
    1b90:	9d 28       	or	r9, r13
    1b92:	f7 01       	movw	r30, r14
    1b94:	64 86       	std	Z+12, r6	; 0x0c
    1b96:	75 86       	std	Z+13, r7	; 0x0d
    1b98:	86 86       	std	Z+14, r8	; 0x0e
    1b9a:	97 86       	std	Z+15, r9	; 0x0f
	packet->bootp.yoipaddr = HTONL(0l);
    1b9c:	10 8a       	std	Z+16, r1	; 0x10
    1b9e:	11 8a       	std	Z+17, r1	; 0x11
    1ba0:	12 8a       	std	Z+18, r1	; 0x12
    1ba2:	13 8a       	std	Z+19, r1	; 0x13
	packet->bootp.seipaddr = HTONL(0l);
    1ba4:	14 8a       	std	Z+20, r1	; 0x14
    1ba6:	15 8a       	std	Z+21, r1	; 0x15
    1ba8:	16 8a       	std	Z+22, r1	; 0x16
    1baa:	17 8a       	std	Z+23, r1	; 0x17
	packet->bootp.gwipaddr = HTONL(0l);
    1bac:	10 8e       	std	Z+24, r1	; 0x18
    1bae:	11 8e       	std	Z+25, r1	; 0x19
    1bb0:	12 8e       	std	Z+26, r1	; 0x1a
    1bb2:	13 8e       	std	Z+27, r1	; 0x1b
	ethGetMacAddress(&packet->bootp.clhwaddr[0]);	// fill client hardware address
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	4c 96       	adiw	r24, 0x1c	; 28
    1bb8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ethGetMacAddress>
	packet->bootp.transid = DhcpTransactID;			// set trans ID (use part of MAC address)
    1bbc:	80 91 1b 01 	lds	r24, 0x011B
    1bc0:	90 91 1c 01 	lds	r25, 0x011C
    1bc4:	a0 91 1d 01 	lds	r26, 0x011D
    1bc8:	b0 91 1e 01 	lds	r27, 0x011E
    1bcc:	f7 01       	movw	r30, r14
    1bce:	84 83       	std	Z+4, r24	; 0x04
    1bd0:	95 83       	std	Z+5, r25	; 0x05
    1bd2:	a6 83       	std	Z+6, r26	; 0x06
    1bd4:	b7 83       	std	Z+7, r27	; 0x07
	packet->bootp.flags = HTONS(1);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	93 87       	std	Z+11, r25	; 0x0b
    1bdc:	82 87       	std	Z+10, r24	; 0x0a
	
	// build DHCP request
	// begin with magic cookie
	packet->cookie = 0x63538263;
    1bde:	f8 01       	movw	r30, r16
    1be0:	ea 5e       	subi	r30, 0xEA	; 234
    1be2:	fe 4f       	sbci	r31, 0xFE	; 254
    1be4:	83 e6       	ldi	r24, 0x63	; 99
    1be6:	92 e8       	ldi	r25, 0x82	; 130
    1be8:	a3 e5       	ldi	r26, 0x53	; 83
    1bea:	b3 e6       	ldi	r27, 0x63	; 99
    1bec:	80 83       	st	Z, r24
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	a2 83       	std	Z+2, r26	; 0x02
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
	//
	// set operation
	val = DHCP_MSG_DHCPRELEASE;
    1bf4:	87 e0       	ldi	r24, 0x07	; 7
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a0 e0       	ldi	r26, 0x00	; 0
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	9a 83       	std	Y+2, r25	; 0x02
    1c00:	ab 83       	std	Y+3, r26	; 0x03
    1c02:	bc 83       	std	Y+4, r27	; 0x04
	optptr = dhcpSetOption(packet->options, DHCP_OPT_DHCPMSGTYPE, 1, &val);
    1c04:	c8 01       	movw	r24, r16
    1c06:	86 5e       	subi	r24, 0xE6	; 230
    1c08:	9e 4f       	sbci	r25, 0xFE	; 254
    1c0a:	65 e3       	ldi	r22, 0x35	; 53
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	2e 01       	movw	r4, r28
    1c10:	08 94       	sec
    1c12:	41 1c       	adc	r4, r1
    1c14:	51 1c       	adc	r5, r1
    1c16:	92 01       	movw	r18, r4
    1c18:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	// set the server ID
	val = HTONL(DhcpServerIP);
    1c1c:	20 91 24 01 	lds	r18, 0x0124
    1c20:	30 91 25 01 	lds	r19, 0x0125
    1c24:	40 91 26 01 	lds	r20, 0x0126
    1c28:	50 91 27 01 	lds	r21, 0x0127
    1c2c:	65 2e       	mov	r6, r21
    1c2e:	77 24       	eor	r7, r7
    1c30:	88 24       	eor	r8, r8
    1c32:	99 24       	eor	r9, r9
    1c34:	d2 2e       	mov	r13, r18
    1c36:	cc 24       	eor	r12, r12
    1c38:	bb 24       	eor	r11, r11
    1c3a:	aa 24       	eor	r10, r10
    1c3c:	6a 28       	or	r6, r10
    1c3e:	7b 28       	or	r7, r11
    1c40:	8c 28       	or	r8, r12
    1c42:	9d 28       	or	r9, r13
    1c44:	0f 2e       	mov	r0, r31
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	af 2e       	mov	r10, r31
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	bf 2e       	mov	r11, r31
    1c4e:	ff ef       	ldi	r31, 0xFF	; 255
    1c50:	cf 2e       	mov	r12, r31
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	df 2e       	mov	r13, r31
    1c56:	f0 2d       	mov	r31, r0
    1c58:	a2 22       	and	r10, r18
    1c5a:	b3 22       	and	r11, r19
    1c5c:	c4 22       	and	r12, r20
    1c5e:	d5 22       	and	r13, r21
    1c60:	ab 2c       	mov	r10, r11
    1c62:	bc 2c       	mov	r11, r12
    1c64:	cd 2c       	mov	r12, r13
    1c66:	dd 24       	eor	r13, r13
    1c68:	6a 28       	or	r6, r10
    1c6a:	7b 28       	or	r7, r11
    1c6c:	8c 28       	or	r8, r12
    1c6e:	9d 28       	or	r9, r13
    1c70:	20 70       	andi	r18, 0x00	; 0
    1c72:	40 70       	andi	r20, 0x00	; 0
    1c74:	50 70       	andi	r21, 0x00	; 0
    1c76:	aa 24       	eor	r10, r10
    1c78:	b2 2e       	mov	r11, r18
    1c7a:	c3 2e       	mov	r12, r19
    1c7c:	d4 2e       	mov	r13, r20
    1c7e:	a6 28       	or	r10, r6
    1c80:	b7 28       	or	r11, r7
    1c82:	c8 28       	or	r12, r8
    1c84:	d9 28       	or	r13, r9
    1c86:	a9 82       	std	Y+1, r10	; 0x01
    1c88:	ba 82       	std	Y+2, r11	; 0x02
    1c8a:	cb 82       	std	Y+3, r12	; 0x03
    1c8c:	dc 82       	std	Y+4, r13	; 0x04
	optptr = dhcpSetOption(optptr, DHCP_OPT_SERVERID, 4, &val);
    1c8e:	66 e3       	ldi	r22, 0x36	; 54
    1c90:	44 e0       	ldi	r20, 0x04	; 4
    1c92:	92 01       	movw	r18, r4
    1c94:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	// request the IP previously offered
	optptr = dhcpSetOption(optptr, DHCP_OPT_REQUESTEDIP, 4, &packet->bootp.clipaddr);
    1c98:	98 01       	movw	r18, r16
    1c9a:	2a 5c       	subi	r18, 0xCA	; 202
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	62 e3       	ldi	r22, 0x32	; 50
    1ca0:	44 e0       	ldi	r20, 0x04	; 4
    1ca2:	0e 94 97 0a 	call	0x152e	; 0x152e <dhcpSetOption>
	// send release
	udpSend(DhcpServerIP, DHCP_UDP_SERVER_PORT, DHCP_UDP_CLIENT_PORT, DHCP_HEADER_LEN+3+6+6+1, (unsigned char*)packet);
    1ca6:	60 91 24 01 	lds	r22, 0x0124
    1caa:	70 91 25 01 	lds	r23, 0x0125
    1cae:	80 91 26 01 	lds	r24, 0x0126
    1cb2:	90 91 27 01 	lds	r25, 0x0127
    1cb6:	43 e4       	ldi	r20, 0x43	; 67
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	24 e4       	ldi	r18, 0x44	; 68
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	11 e0       	ldi	r17, 0x01	; 1
    1cc2:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <udpSend>
	
	// deconfigure ip addressing
	ipSetConfig(0,0,0);
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	cb 01       	movw	r24, r22
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	a9 01       	movw	r20, r18
    1cd2:	ee 24       	eor	r14, r14
    1cd4:	ff 24       	eor	r15, r15
    1cd6:	87 01       	movw	r16, r14
    1cd8:	0e 94 08 1c 	call	0x3810	; 0x3810 <ipSetConfig>
	DhcpLeaseTime = 0;
    1cdc:	10 92 20 01 	sts	0x0120, r1
    1ce0:	10 92 21 01 	sts	0x0121, r1
    1ce4:	10 92 22 01 	sts	0x0122, r1
    1ce8:	10 92 23 01 	sts	0x0123, r1
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	bf 90       	pop	r11
    1d06:	af 90       	pop	r10
    1d08:	9f 90       	pop	r9
    1d0a:	8f 90       	pop	r8
    1d0c:	7f 90       	pop	r7
    1d0e:	6f 90       	pop	r6
    1d10:	5f 90       	pop	r5
    1d12:	4f 90       	pop	r4
    1d14:	3f 90       	pop	r3
    1d16:	2f 90       	pop	r2
    1d18:	08 95       	ret

00001d1a <dhcpTimer>:
//Ham duoc goi dinh ky moi 1s de cap nhat lease time va timeout cua DHCP
void dhcpTimer(void)
{
	// this function to be called once per second
	// decrement lease time
	if(DhcpLeaseTime)
    1d1a:	80 91 20 01 	lds	r24, 0x0120
    1d1e:	90 91 21 01 	lds	r25, 0x0121
    1d22:	a0 91 22 01 	lds	r26, 0x0122
    1d26:	b0 91 23 01 	lds	r27, 0x0123
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	a1 05       	cpc	r26, r1
    1d2e:	b1 05       	cpc	r27, r1
    1d30:	59 f0       	breq	.+22     	; 0x1d48 <dhcpTimer+0x2e>
		DhcpLeaseTime--;
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	a1 09       	sbc	r26, r1
    1d36:	b1 09       	sbc	r27, r1
    1d38:	80 93 20 01 	sts	0x0120, r24
    1d3c:	90 93 21 01 	sts	0x0121, r25
    1d40:	a0 93 22 01 	sts	0x0122, r26
    1d44:	b0 93 23 01 	sts	0x0123, r27
	if(DhcpTimeout){
    1d48:	80 91 2e 01 	lds	r24, 0x012E
    1d4c:	88 23       	and	r24, r24
    1d4e:	19 f0       	breq	.+6      	; 0x1d56 <dhcpTimer+0x3c>
		DhcpTimeout--;
    1d50:	81 50       	subi	r24, 0x01	; 1
    1d52:	80 93 2e 01 	sts	0x012E, r24
    1d56:	08 95       	ret

00001d58 <dhcpService>:
	}
}
//Ham dich vu DHCP, duoc goi trong chuong trinh chinh
void dhcpService(void)
{
	if(DhcpRetries && (DhcpTimeout == 0)){
    1d58:	80 91 1f 01 	lds	r24, 0x011F
    1d5c:	88 23       	and	r24, r24
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <dhcpService+0x20>
    1d60:	90 91 2e 01 	lds	r25, 0x012E
    1d64:	99 23       	and	r25, r25
    1d66:	41 f4       	brne	.+16     	; 0x1d78 <dhcpService+0x20>
		DhcpRetries--;
    1d68:	81 50       	subi	r24, 0x01	; 1
    1d6a:	80 93 1f 01 	sts	0x011F, r24
		DhcpTimeout = DHCP_TIMEOUT;
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	80 93 2e 01 	sts	0x012E, r24
		dhcpDiscover();
    1d74:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <dhcpDiscover>
    1d78:	08 95       	ret

00001d7a <enc28j60SPIRead>:
unsigned char Enc28j60Bank;

unsigned char enc28j60SPIRead(unsigned char op, unsigned char address)
{
	unsigned char res;
	ENC28J60_CS_LO();
    1d7a:	c3 98       	cbi	0x18, 3	; 24
	SPDR = op | (address & ADDR_MASK);
    1d7c:	96 2f       	mov	r25, r22
    1d7e:	6f 71       	andi	r22, 0x1F	; 31
    1d80:	68 2b       	or	r22, r24
    1d82:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF))); 
    1d84:	77 9b       	sbis	0x0e, 7	; 14
    1d86:	fe cf       	rjmp	.-4      	; 0x1d84 <enc28j60SPIRead+0xa>
	SPDR = 0x00; 
    1d88:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF))); 
    1d8a:	77 9b       	sbis	0x0e, 7	; 14
    1d8c:	fe cf       	rjmp	.-4      	; 0x1d8a <enc28j60SPIRead+0x10>
	if(address & 0x80){  
    1d8e:	99 23       	and	r25, r25
    1d90:	1c f4       	brge	.+6      	; 0x1d98 <enc28j60SPIRead+0x1e>
		SPDR = 0x00;
    1d92:	1f b8       	out	0x0f, r1	; 15
		while(!((SPSR) & (1<<SPIF)));
    1d94:	77 9b       	sbis	0x0e, 7	; 14
    1d96:	fe cf       	rjmp	.-4      	; 0x1d94 <enc28j60SPIRead+0x1a>
	}
	res = SPDR; 
    1d98:	8f b1       	in	r24, 0x0f	; 15
	ENC28J60_CS_HI();
    1d9a:	c3 9a       	sbi	0x18, 3	; 24
	return res;
}
    1d9c:	08 95       	ret

00001d9e <enc28j60SPIWrite>:

void enc28j60SPIWrite(unsigned char op, unsigned char address, unsigned char data)
{
	ENC28J60_CS_LO();
    1d9e:	c3 98       	cbi	0x18, 3	; 24
	SPDR = op | (address & ADDR_MASK);
    1da0:	6f 71       	andi	r22, 0x1F	; 31
    1da2:	68 2b       	or	r22, r24
    1da4:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    1da6:	77 9b       	sbis	0x0e, 7	; 14
    1da8:	fe cf       	rjmp	.-4      	; 0x1da6 <enc28j60SPIWrite+0x8>
	SPDR = data;
    1daa:	4f b9       	out	0x0f, r20	; 15
	while(!(SPSR & (1<<SPIF)));
    1dac:	77 9b       	sbis	0x0e, 7	; 14
    1dae:	fe cf       	rjmp	.-4      	; 0x1dac <enc28j60SPIWrite+0xe>
	ENC28J60_CS_HI();
    1db0:	c3 9a       	sbi	0x18, 3	; 24
}
    1db2:	08 95       	ret

00001db4 <enc28j60SetBank>:

void enc28j60SetBank(unsigned char address)
{
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	18 2f       	mov	r17, r24
	if((address & BANK_MASK) != Enc28j60Bank)
    1dbc:	c8 2f       	mov	r28, r24
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
    1dc0:	c0 76       	andi	r28, 0x60	; 96
    1dc2:	d0 70       	andi	r29, 0x00	; 0
    1dc4:	80 91 31 01 	lds	r24, 0x0131
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	c8 17       	cp	r28, r24
    1dcc:	d9 07       	cpc	r29, r25
    1dce:	b9 f0       	breq	.+46     	; 0x1dfe <enc28j60SetBank+0x4a>
	{
		enc28j60SPIWrite(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
    1dd0:	80 ea       	ldi	r24, 0xA0	; 160
    1dd2:	6f e1       	ldi	r22, 0x1F	; 31
    1dd4:	43 e0       	ldi	r20, 0x03	; 3
    1dd6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
		enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
    1dda:	ae 01       	movw	r20, r28
    1ddc:	55 95       	asr	r21
    1dde:	47 95       	ror	r20
    1de0:	55 95       	asr	r21
    1de2:	47 95       	ror	r20
    1de4:	55 95       	asr	r21
    1de6:	47 95       	ror	r20
    1de8:	55 95       	asr	r21
    1dea:	47 95       	ror	r20
    1dec:	55 95       	asr	r21
    1dee:	47 95       	ror	r20
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	6f e1       	ldi	r22, 0x1F	; 31
    1df4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
		Enc28j60Bank = (address & BANK_MASK);
    1df8:	10 76       	andi	r17, 0x60	; 96
    1dfa:	10 93 31 01 	sts	0x0131, r17
	}
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	08 95       	ret

00001e06 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(unsigned int len, unsigned char* data)
{
	ENC28J60_CS_LO();
    1e06:	c3 98       	cbi	0x18, 3	; 24
	SPDR = ENC28J60_READ_BUF_MEM;
    1e08:	2a e3       	ldi	r18, 0x3A	; 58
    1e0a:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));
    1e0c:	77 9b       	sbis	0x0e, 7	; 14
    1e0e:	fe cf       	rjmp	.-4      	; 0x1e0c <enc28j60ReadBuffer+0x6>
	while(len--)
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	49 f0       	breq	.+18     	; 0x1e26 <enc28j60ReadBuffer+0x20>
    1e14:	e6 2f       	mov	r30, r22
    1e16:	f7 2f       	mov	r31, r23
	{
		SPDR = 0x00;
    1e18:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
    1e1a:	77 9b       	sbis	0x0e, 7	; 14
    1e1c:	fe cf       	rjmp	.-4      	; 0x1e1a <enc28j60ReadBuffer+0x14>
		*data++ = SPDR;
    1e1e:	2f b1       	in	r18, 0x0f	; 15
    1e20:	21 93       	st	Z+, r18
    1e22:	01 97       	sbiw	r24, 0x01	; 1
void enc28j60ReadBuffer(unsigned int len, unsigned char* data)
{
	ENC28J60_CS_LO();
	SPDR = ENC28J60_READ_BUF_MEM;
	while(!(SPSR & (1<<SPIF)));
	while(len--)
    1e24:	c9 f7       	brne	.-14     	; 0x1e18 <enc28j60ReadBuffer+0x12>
	{
		SPDR = 0x00;
		while(!(SPSR & (1<<SPIF)));
		*data++ = SPDR;
	}	
	ENC28J60_CS_HI();
    1e26:	c3 9a       	sbi	0x18, 3	; 24
}
    1e28:	08 95       	ret

00001e2a <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(unsigned int len, unsigned char* data)
{
    1e2a:	fb 01       	movw	r30, r22
	ENC28J60_CS_LO();
    1e2c:	c3 98       	cbi	0x18, 3	; 24
	SPDR = ENC28J60_WRITE_BUF_MEM;
    1e2e:	2a e7       	ldi	r18, 0x7A	; 122
    1e30:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));
    1e32:	77 9b       	sbis	0x0e, 7	; 14
    1e34:	fe cf       	rjmp	.-4      	; 0x1e32 <enc28j60WriteBuffer+0x8>
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <enc28j60WriteBuffer+0x18>
	while(len--)
	{
		SPDR = *data++;
    1e38:	21 91       	ld	r18, Z+
    1e3a:	2f b9       	out	0x0f, r18	; 15
		while(!(SPSR & (1<<SPIF)));
    1e3c:	77 9b       	sbis	0x0e, 7	; 14
    1e3e:	fe cf       	rjmp	.-4      	; 0x1e3c <enc28j60WriteBuffer+0x12>
    1e40:	01 97       	sbiw	r24, 0x01	; 1
void enc28j60WriteBuffer(unsigned int len, unsigned char* data)
{
	ENC28J60_CS_LO();
	SPDR = ENC28J60_WRITE_BUF_MEM;
	while(!(SPSR & (1<<SPIF)));
	while(len--)
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <enc28j60WriteBuffer+0xe>
	{
		SPDR = *data++;
		while(!(SPSR & (1<<SPIF)));
	}	
	ENC28J60_CS_HI();
    1e46:	c3 9a       	sbi	0x18, 3	; 24
}
    1e48:	08 95       	ret

00001e4a <enc28j60Read>:

unsigned char enc28j60Read(unsigned char address)
{
    1e4a:	1f 93       	push	r17
    1e4c:	18 2f       	mov	r17, r24
	enc28j60SetBank(address);
    1e4e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <enc28j60SetBank>
	return enc28j60SPIRead(ENC28J60_READ_CTRL_REG, address);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	61 2f       	mov	r22, r17
    1e56:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
}
    1e5a:	1f 91       	pop	r17
    1e5c:	08 95       	ret

00001e5e <enc28j60Write>:

void enc28j60Write(unsigned char address, unsigned char data)
{
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	18 2f       	mov	r17, r24
    1e64:	06 2f       	mov	r16, r22
	enc28j60SetBank(address);
    1e66:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <enc28j60SetBank>
	enc28j60SPIWrite(ENC28J60_WRITE_CTRL_REG, address, data);
    1e6a:	80 e4       	ldi	r24, 0x40	; 64
    1e6c:	61 2f       	mov	r22, r17
    1e6e:	40 2f       	mov	r20, r16
    1e70:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
}
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <enc28j60PhyRead>:

unsigned int enc28j60PhyRead(unsigned char address)
{
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	68 2f       	mov	r22, r24
	unsigned int data;
	enc28j60Write(MIREGADR, address);
    1e84:	84 ed       	ldi	r24, 0xD4	; 212
    1e86:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
    1e8a:	82 ed       	ldi	r24, 0xD2	; 210
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
    1e92:	8a ee       	ldi	r24, 0xEA	; 234
    1e94:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    1e98:	80 fd       	sbrc	r24, 0
    1e9a:	fb cf       	rjmp	.-10     	; 0x1e92 <enc28j60PhyRead+0x18>
	enc28j60Write(MICMD, 0x00);
    1e9c:	82 ed       	ldi	r24, 0xD2	; 210
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	data  = enc28j60Read(MIRDL);
    1ea4:	88 ed       	ldi	r24, 0xD8	; 216
    1ea6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    1eaa:	c8 2f       	mov	r28, r24
    1eac:	d0 e0       	ldi	r29, 0x00	; 0
	data |= enc28j60Read(MIRDH);
    1eae:	89 ed       	ldi	r24, 0xD9	; 217
    1eb0:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	c8 2b       	or	r28, r24
    1eb8:	d9 2b       	or	r29, r25
	return data;
}
    1eba:	7e 01       	movw	r14, r28
    1ebc:	8c 2f       	mov	r24, r28
    1ebe:	9f 2d       	mov	r25, r15
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	08 95       	ret

00001eca <enc28j60PhyWrite>:

void enc28j60PhyWrite(unsigned char address, unsigned int data)
{
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	98 2f       	mov	r25, r24
    1ed0:	06 2f       	mov	r16, r22
    1ed2:	17 2f       	mov	r17, r23
	enc28j60Write(MIREGADR, address);
    1ed4:	84 ed       	ldi	r24, 0xD4	; 212
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MIWRL, data);	
    1edc:	86 ed       	ldi	r24, 0xD6	; 214
    1ede:	60 2f       	mov	r22, r16
    1ee0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MIWRH, data>>8);
    1ee4:	87 ed       	ldi	r24, 0xD7	; 215
    1ee6:	61 2f       	mov	r22, r17
    1ee8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
    1eec:	8a ee       	ldi	r24, 0xEA	; 234
    1eee:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    1ef2:	80 fd       	sbrc	r24, 0
    1ef4:	fb cf       	rjmp	.-10     	; 0x1eec <enc28j60PhyWrite+0x22>
}
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <enc28j60PacketSend>:

void enc28j60PacketSend(unsigned int len, unsigned char* packet)
{
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	08 2f       	mov	r16, r24
    1f06:	19 2f       	mov	r17, r25
    1f08:	eb 01       	movw	r28, r22
	enc28j60Write(EWRPTL, TXSTART_INIT);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(ETXNDL, (TXSTART_INIT+len));
    1f1a:	86 e0       	ldi	r24, 0x06	; 6
    1f1c:	60 2f       	mov	r22, r16
    1f1e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
    1f22:	87 e0       	ldi	r24, 0x07	; 7
    1f24:	61 2f       	mov	r22, r17
    1f26:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60SPIWrite(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1f2a:	8a e7       	ldi	r24, 0x7A	; 122
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>

	enc28j60WriteBuffer(len, packet);
    1f34:	80 2f       	mov	r24, r16
    1f36:	91 2f       	mov	r25, r17
    1f38:	be 01       	movw	r22, r28
    1f3a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <enc28j60WriteBuffer>
	enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1f3e:	80 e8       	ldi	r24, 0x80	; 128
    1f40:	6f e1       	ldi	r22, 0x1F	; 31
    1f42:	48 e0       	ldi	r20, 0x08	; 8
    1f44:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <enc28j60PacketReceive>:

unsigned int NextPacketPtr;

unsigned int enc28j60PacketReceive(unsigned int maxlen, unsigned char* packet)
{
    1f52:	ef 92       	push	r14
    1f54:	ff 92       	push	r15
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	8c 01       	movw	r16, r24
    1f60:	7b 01       	movw	r14, r22
	unsigned int rxstat;
	unsigned int len;
	if( !enc28j60Read(EPKTCNT) )
    1f62:	89 e3       	ldi	r24, 0x39	; 57
    1f64:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <enc28j60PacketReceive+0x1c>
    1f6c:	50 c0       	rjmp	.+160    	; 0x200e <enc28j60PacketReceive+0xbc>
		return 0;
	enc28j60Write(ERDPTL, (NextPacketPtr));
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	60 91 2f 01 	lds	r22, 0x012F
    1f74:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
    1f78:	60 91 30 01 	lds	r22, 0x0130
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	NextPacketPtr  = enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0);
    1f82:	8a e3       	ldi	r24, 0x3A	; 58
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
    1f8a:	80 93 2f 01 	sts	0x012F, r24
    1f8e:	10 92 30 01 	sts	0x0130, r1
	NextPacketPtr |= ((unsigned int)enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0))<<8;
    1f92:	8a e3       	ldi	r24, 0x3A	; 58
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
    1f9a:	38 2f       	mov	r19, r24
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	80 91 2f 01 	lds	r24, 0x012F
    1fa2:	90 91 30 01 	lds	r25, 0x0130
    1fa6:	28 2b       	or	r18, r24
    1fa8:	39 2b       	or	r19, r25
    1faa:	30 93 30 01 	sts	0x0130, r19
    1fae:	20 93 2f 01 	sts	0x012F, r18
	len  = enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0);
    1fb2:	8a e3       	ldi	r24, 0x3A	; 58
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
    1fba:	c8 2f       	mov	r28, r24
    1fbc:	d0 e0       	ldi	r29, 0x00	; 0
	len |= ((unsigned int)enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0))<<8;
    1fbe:	8a e3       	ldi	r24, 0x3A	; 58
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
    1fc6:	38 2f       	mov	r19, r24
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	c2 2b       	or	r28, r18
    1fcc:	d3 2b       	or	r29, r19
	rxstat  = enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0);
    1fce:	8a e3       	ldi	r24, 0x3A	; 58
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
	rxstat |= ((unsigned int)enc28j60SPIRead(ENC28J60_READ_BUF_MEM, 0))<<8;
    1fd6:	8a e3       	ldi	r24, 0x3A	; 58
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <enc28j60SPIRead>
	len = ((len<maxlen)?(len):(maxlen));
    1fde:	0c 17       	cp	r16, r28
    1fe0:	1d 07       	cpc	r17, r29
    1fe2:	08 f4       	brcc	.+2      	; 0x1fe6 <enc28j60PacketReceive+0x94>
    1fe4:	e8 01       	movw	r28, r16
	enc28j60ReadBuffer(len, packet);
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	b7 01       	movw	r22, r14
    1fea:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <enc28j60ReadBuffer>
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
    1fee:	8c e0       	ldi	r24, 0x0C	; 12
    1ff0:	60 91 2f 01 	lds	r22, 0x012F
    1ff4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
    1ff8:	60 91 30 01 	lds	r22, 0x0130
    1ffc:	8d e0       	ldi	r24, 0x0D	; 13
    1ffe:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    2002:	80 e8       	ldi	r24, 0x80	; 128
    2004:	6e e1       	ldi	r22, 0x1E	; 30
    2006:	40 e4       	ldi	r20, 0x40	; 64
    2008:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>

	return len;
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <enc28j60PacketReceive+0xc0>
unsigned int enc28j60PacketReceive(unsigned int maxlen, unsigned char* packet)
{
	unsigned int rxstat;
	unsigned int len;
	if( !enc28j60Read(EPKTCNT) )
		return 0;
    200e:	c0 e0       	ldi	r28, 0x00	; 0
    2010:	d0 e0       	ldi	r29, 0x00	; 0
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
	enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);

	return len;
}
    2012:	7e 01       	movw	r14, r28
    2014:	8c 2f       	mov	r24, r28
    2016:	9f 2d       	mov	r25, r15
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	08 95       	ret

00002026 <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
    2026:	03 96       	adiw	r24, 0x03	; 3
    2028:	65 e0       	ldi	r22, 0x05	; 5
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	66 0f       	add	r22, r22
    2036:	77 1f       	adc	r23, r23
    2038:	66 0f       	add	r22, r22
    203a:	77 1f       	adc	r23, r23

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
    203c:	61 15       	cp	r22, r1
    203e:	71 05       	cpc	r23, r1
    2040:	31 f0       	breq	.+12     	; 0x204e <delay_us+0x28>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	86 17       	cp	r24, r22
    204a:	97 07       	cpc	r25, r23
    204c:	e0 f3       	brcs	.-8      	; 0x2046 <delay_us+0x20>
    204e:	08 95       	ret

00002050 <enc28j60Init>:
}

void enc28j60Init(void)
{
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
	unsigned char i;
	unsigned int timeout=0;
	Enc28j60Bank = 0xFF;
    2054:	8f ef       	ldi	r24, 0xFF	; 255
    2056:	80 93 31 01 	sts	0x0131, r24
	ENC28J60_CONTROL_DDR |= (1<<ENC28J60_CONTROL_CS);
    205a:	bb 9a       	sbi	0x17, 3	; 23
	ENC28J60_CS_HI();
    205c:	c3 9a       	sbi	0x18, 3	; 24
	ENC28J60_SPI_PORT |= (1<<ENC28J60_SPI_SCK); //sck = hi
    205e:	c7 9a       	sbi	0x18, 7	; 24
	ENC28J60_SPI_DDR |= (1<<ENC28J60_SPI_SS)|(1<<ENC28J60_SPI_MOSI)|(1<<ENC28J60_SPI_SCK); //SS,MOSI,SCK = OUT
    2060:	87 b3       	in	r24, 0x17	; 23
    2062:	80 6b       	ori	r24, 0xB0	; 176
    2064:	87 bb       	out	0x17, r24	; 23
	ENC28J60_SPI_DDR &= ~(1<<ENC28J60_SPI_MISO); //MISO = IN
    2066:	be 98       	cbi	0x17, 6	; 23
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
    2068:	80 e5       	ldi	r24, 0x50	; 80
    206a:	8d b9       	out	0x0d, r24	; 13
//	SPSR = (1<<SPI2X);
	SPSR = (0<<SPI2X);
    206c:	1e b8       	out	0x0e, r1	; 14
	delay_us(65000);delay_us(65000);delay_us(65000);
	enc28j60SPIWrite(ENC28J60_SOFT_RESET,0, ENC28J60_SOFT_RESET);
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	4f ef       	ldi	r20, 0xFF	; 255
    2074:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
	delay_us(65000);delay_us(65000);delay_us(65000);
	while((!(enc28j60Read(ESTAT) & 0x01)) && (timeout<65000)){timeout++;};
    2078:	c9 ee       	ldi	r28, 0xE9	; 233
    207a:	dd ef       	ldi	r29, 0xFD	; 253
    207c:	8d e1       	ldi	r24, 0x1D	; 29
    207e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    2082:	80 fd       	sbrc	r24, 0
    2084:	02 c0       	rjmp	.+4      	; 0x208a <enc28j60Init+0x3a>
    2086:	21 97       	sbiw	r28, 0x01	; 1
    2088:	c9 f7       	brne	.-14     	; 0x207c <enc28j60Init+0x2c>
	if(timeout>=65000){timeout=0;}
	NextPacketPtr = RXSTART_INIT;
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	96 e0       	ldi	r25, 0x06	; 6
    208e:	90 93 30 01 	sts	0x0130, r25
    2092:	80 93 2f 01 	sts	0x012F, r24
    2096:	c1 e0       	ldi	r28, 0x01	; 1
    2098:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<2*22; i+=2){
		enc28j60Write(pgm_read_byte(&enc28j60_config[i+0]),pgm_read_byte(&enc28j60_config[i+1]));
    209a:	fe 01       	movw	r30, r28
    209c:	eb 52       	subi	r30, 0x2B	; 43
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	84 91       	lpm	r24, Z+
    20a2:	fe 01       	movw	r30, r28
    20a4:	ea 52       	subi	r30, 0x2A	; 42
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	64 91       	lpm	r22, Z+
    20aa:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
    20ae:	22 96       	adiw	r28, 0x02	; 2
	enc28j60SPIWrite(ENC28J60_SOFT_RESET,0, ENC28J60_SOFT_RESET);
	delay_us(65000);delay_us(65000);delay_us(65000);
	while((!(enc28j60Read(ESTAT) & 0x01)) && (timeout<65000)){timeout++;};
	if(timeout>=65000){timeout=0;}
	NextPacketPtr = RXSTART_INIT;
	for(i=0; i<2*22; i+=2){
    20b0:	cd 32       	cpi	r28, 0x2D	; 45
    20b2:	d1 05       	cpc	r29, r1
    20b4:	91 f7       	brne	.-28     	; 0x209a <enc28j60Init+0x4a>
		enc28j60Write(pgm_read_byte(&enc28j60_config[i+0]),pgm_read_byte(&enc28j60_config[i+1]));
	}
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS); //=no loopback of transmitted frames
    20b6:	80 e1       	ldi	r24, 0x10	; 16
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	71 e0       	ldi	r23, 0x01	; 1
    20bc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <enc28j60PhyWrite>
	enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	6b e1       	ldi	r22, 0x1B	; 27
    20c4:	40 ec       	ldi	r20, 0xC0	; 192
    20c6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
	enc28j60SPIWrite(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    20ca:	80 e8       	ldi	r24, 0x80	; 128
    20cc:	6f e1       	ldi	r22, 0x1F	; 31
    20ce:	44 e0       	ldi	r20, 0x04	; 4
    20d0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <enc28j60SPIWrite>
	enc28j60PhyWrite(PHLCON, 0x347A); //cave: Table3-3: reset value is 0x3422, do not modify the reserved "3"!! 
    20d4:	84 e1       	ldi	r24, 0x14	; 20
    20d6:	6a e7       	ldi	r22, 0x7A	; 122
    20d8:	74 e3       	ldi	r23, 0x34	; 52
    20da:	0e 94 65 0f 	call	0x1eca	; 0x1eca <enc28j60PhyWrite>
}
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	08 95       	ret

000020e4 <ethInit>:


//Ham khoi tao chip Ethernet
void ethInit(void)
{
	enc28j60Init();
    20e4:	0e 94 28 10 	call	0x2050	; 0x2050 <enc28j60Init>
	ETH_INT_ENABLE;
    20e8:	8b b7       	in	r24, 0x3b	; 59
    20ea:	80 62       	ori	r24, 0x20	; 32
    20ec:	8b bf       	out	0x3b, r24	; 59
}
    20ee:	08 95       	ret

000020f0 <ethSendFrame>:

//Ham goi 1 frame xuong chip ethernet
void ethSendFrame(unsigned int len, unsigned char* packet)
{
	enc28j60PacketSend(len, packet);
    20f0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <enc28j60PacketSend>
}
    20f4:	08 95       	ret

000020f6 <ethGetFrame>:

//Ham doc 1 frame ethernet tu chip ethernet ve buffer tren RAM cua CPU
unsigned int ethGetFrame(unsigned int maxlen, unsigned char* packet)
{
	return enc28j60PacketReceive(maxlen, packet);
    20f6:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <enc28j60PacketReceive>
}
    20fa:	08 95       	ret

000020fc <ethGetMacAddress>:

//Ham doc dia chi MAC hien tai tu chip ethernet, luu vao buffer macaddr[6]
void ethGetMacAddress(unsigned char* macaddr)
{
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	8c 01       	movw	r16, r24
	*macaddr++ = enc28j60Read(MAADR5);
    210a:	84 ee       	ldi	r24, 0xE4	; 228
    210c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    2110:	e8 01       	movw	r28, r16
    2112:	89 93       	st	Y+, r24
	*macaddr++ = enc28j60Read(MAADR4);
    2114:	85 ee       	ldi	r24, 0xE5	; 229
    2116:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    211a:	f8 01       	movw	r30, r16
    211c:	81 83       	std	Z+1, r24	; 0x01
    211e:	8e 01       	movw	r16, r28
    2120:	0f 5f       	subi	r16, 0xFF	; 255
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
	*macaddr++ = enc28j60Read(MAADR3);
    2124:	82 ee       	ldi	r24, 0xE2	; 226
    2126:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	78 01       	movw	r14, r16
    212e:	08 94       	sec
    2130:	e1 1c       	adc	r14, r1
    2132:	f1 1c       	adc	r15, r1
	*macaddr++ = enc28j60Read(MAADR2);
    2134:	83 ee       	ldi	r24, 0xE3	; 227
    2136:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    213a:	f8 01       	movw	r30, r16
    213c:	81 83       	std	Z+1, r24	; 0x01
    213e:	e7 01       	movw	r28, r14
    2140:	21 96       	adiw	r28, 0x01	; 1
	*macaddr++ = enc28j60Read(MAADR1);
    2142:	80 ee       	ldi	r24, 0xE0	; 224
    2144:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    2148:	f7 01       	movw	r30, r14
    214a:	81 83       	std	Z+1, r24	; 0x01
	*macaddr++ = enc28j60Read(MAADR0);
    214c:	81 ee       	ldi	r24, 0xE1	; 225
    214e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <enc28j60Read>
    2152:	89 83       	std	Y+1, r24	; 0x01
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	ff 90       	pop	r15
    215e:	ef 90       	pop	r14
    2160:	08 95       	ret

00002162 <ethSetMacAddress>:

//Ham set dia chi MAC (dang luu trong buffer macaddr[6] xuong chip ethernet
void ethSetMacAddress(unsigned char* macaddr)
{
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	ec 01       	movw	r28, r24
	enc28j60Write(MAADR5, *macaddr++);
    2174:	8c 01       	movw	r16, r24
    2176:	0f 5f       	subi	r16, 0xFF	; 255
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	84 ee       	ldi	r24, 0xE4	; 228
    217c:	68 81       	ld	r22, Y
    217e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MAADR4, *macaddr++);
    2182:	68 01       	movw	r12, r16
    2184:	08 94       	sec
    2186:	c1 1c       	adc	r12, r1
    2188:	d1 1c       	adc	r13, r1
    218a:	85 ee       	ldi	r24, 0xE5	; 229
    218c:	69 81       	ldd	r22, Y+1	; 0x01
    218e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MAADR3, *macaddr++);
    2192:	76 01       	movw	r14, r12
    2194:	08 94       	sec
    2196:	e1 1c       	adc	r14, r1
    2198:	f1 1c       	adc	r15, r1
    219a:	82 ee       	ldi	r24, 0xE2	; 226
    219c:	f8 01       	movw	r30, r16
    219e:	61 81       	ldd	r22, Z+1	; 0x01
    21a0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MAADR2, *macaddr++);
    21a4:	e7 01       	movw	r28, r14
    21a6:	21 96       	adiw	r28, 0x01	; 1
    21a8:	83 ee       	ldi	r24, 0xE3	; 227
    21aa:	f6 01       	movw	r30, r12
    21ac:	61 81       	ldd	r22, Z+1	; 0x01
    21ae:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MAADR1, *macaddr++);
    21b2:	80 ee       	ldi	r24, 0xE0	; 224
    21b4:	f7 01       	movw	r30, r14
    21b6:	61 81       	ldd	r22, Z+1	; 0x01
    21b8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
	enc28j60Write(MAADR0, *macaddr++);
    21bc:	81 ee       	ldi	r24, 0xE1	; 225
    21be:	69 81       	ldd	r22, Y+1	; 0x01
    21c0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60Write>
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	08 95       	ret

000021d6 <ethGetBuffer>:

//Ham tra lai con tro den buffer ethernet (tren RAM cua CPU)
unsigned char* ethGetBuffer(void)
{
	return ethBuffer;
}
    21d6:	84 e3       	ldi	r24, 0x34	; 52
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	08 95       	ret

000021dc <__vector_3>:

//Vector ngat cua ethernet, mot ngat ngoai se duoc khoi tao boi chip ethernet
// moi khi no nhan duoc 1 frame ethernet (dung dia chi cua no)
ISR (ETH_INTERRUPT)
{
    21dc:	1f 92       	push	r1
    21de:	0f 92       	push	r0
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	0f 92       	push	r0
    21e4:	11 24       	eor	r1, r1
    21e6:	8f 93       	push	r24
	eth_got_frame = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 ae 00 	sts	0x00AE, r24
    time_watchdog = 0;
    21ee:	10 92 33 01 	sts	0x0133, r1
    21f2:	10 92 32 01 	sts	0x0132, r1
	ETH_INT_DISABLE;
    21f6:	8b b7       	in	r24, 0x3b	; 59
    21f8:	8f 7d       	andi	r24, 0xDF	; 223
    21fa:	8b bf       	out	0x3b, r24	; 59
}
    21fc:	8f 91       	pop	r24
    21fe:	0f 90       	pop	r0
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	0f 90       	pop	r0
    2204:	1f 90       	pop	r1
    2206:	18 95       	reti

00002208 <ethService>:

//Ham duoc goi lien tuc de thuc thi cac tac vu cua giao thuc ethernet
void ethService(void)
{
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
	int len;
	struct ntEthHeader* ethPacket;
	if(!eth_got_frame) return;
    2210:	80 91 ae 00 	lds	r24, 0x00AE
    2214:	88 23       	and	r24, r24
    2216:	69 f1       	breq	.+90     	; 0x2272 <ethService+0x6a>
	// look for a packet
	len = ethGetFrame(ETHERNET_BUFFER_SIZE, ethBuffer);
    2218:	8e e1       	ldi	r24, 0x1E	; 30
    221a:	94 e0       	ldi	r25, 0x04	; 4
    221c:	64 e3       	ldi	r22, 0x34	; 52
    221e:	71 e0       	ldi	r23, 0x01	; 1
    2220:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <ethGetFrame>
    2224:	08 2f       	mov	r16, r24
    2226:	19 2f       	mov	r17, r25

	if(len)
    2228:	01 15       	cp	r16, r1
    222a:	11 05       	cpc	r17, r1
    222c:	11 f1       	breq	.+68     	; 0x2272 <ethService+0x6a>
	{
		ethPacket = (struct ntEthHeader*)&ethBuffer[0];
		
		if(ethPacket->type == HTONS(ETH_TYPE_IP))
    222e:	20 91 40 01 	lds	r18, 0x0140
    2232:	30 91 41 01 	lds	r19, 0x0141
    2236:	28 30       	cpi	r18, 0x08	; 8
    2238:	31 05       	cpc	r19, r1
    223a:	69 f4       	brne	.+26     	; 0x2256 <ethService+0x4e>
		//Neu day la frame danh cho giao thuc IP
		{
			arpIPPacketIn((unsigned char*)&ethBuffer[0]);
    223c:	c4 e3       	ldi	r28, 0x34	; 52
    223e:	d1 e0       	ldi	r29, 0x01	; 1
    2240:	ce 01       	movw	r24, r28
    2242:	0e 94 b2 09 	call	0x1364	; 0x1364 <arpIPPacketIn>
			IPProcess( len-ETH_HEADER_LEN, (struct ntIPHeader*)&ethBuffer[ETH_HEADER_LEN] );
    2246:	be 01       	movw	r22, r28
    2248:	62 5f       	subi	r22, 0xF2	; 242
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	c8 01       	movw	r24, r16
    224e:	0e 97       	sbiw	r24, 0x0e	; 14
    2250:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <IPProcess>
    2254:	0b c0       	rjmp	.+22     	; 0x226c <ethService+0x64>
		}
		else if(ethPacket->type == HTONS(ETH_TYPE_ARP))
    2256:	46 e0       	ldi	r20, 0x06	; 6
    2258:	28 30       	cpi	r18, 0x08	; 8
    225a:	34 07       	cpc	r19, r20
    225c:	29 f4       	brne	.+10     	; 0x2268 <ethService+0x60>
		//Neu day la 1 frame cua giao thuc ARP
		{
			arpArpProcess(len, ethBuffer );
    225e:	64 e3       	ldi	r22, 0x34	; 52
    2260:	71 e0       	ldi	r23, 0x01	; 1
    2262:	0e 94 6d 08 	call	0x10da	; 0x10da <arpArpProcess>
    2266:	02 c0       	rjmp	.+4      	; 0x226c <ethService+0x64>
		}else{
			ethInit();
    2268:	0e 94 72 10 	call	0x20e4	; 0x20e4 <ethInit>
		}
		ETH_INT_ENABLE;
    226c:	8b b7       	in	r24, 0x3b	; 59
    226e:	80 62       	ori	r24, 0x20	; 32
    2270:	8b bf       	out	0x3b, r24	; 59
	}
	return;
}
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret

0000227c <decode_base64>:
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
{
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	fc 01       	movw	r30, r24
	unsigned char *strp;
    unsigned char end_byte = 0;
	
	strp = str2_out;
	
	while (*str1_in != 0)
    2286:	80 81       	ld	r24, Z
    2288:	88 23       	and	r24, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <decode_base64+0x12>
    228c:	7d c0       	rjmp	.+250    	; 0x2388 <decode_base64+0x10c>
	{
		*str2_out++= (*str1_in & 0xFC)>>2;
    228e:	28 2f       	mov	r18, r24
    2290:	26 95       	lsr	r18
    2292:	26 95       	lsr	r18
    2294:	db 01       	movw	r26, r22
    2296:	2d 93       	st	X+, r18
    2298:	cd 01       	movw	r24, r26
		
		*str2_out = (((*str1_in++)&0x03)<<4); 
    229a:	10 81       	ld	r17, Z
    229c:	13 70       	andi	r17, 0x03	; 3
    229e:	12 95       	swap	r17
    22a0:	10 7f       	andi	r17, 0xF0	; 240
    22a2:	eb 01       	movw	r28, r22
    22a4:	19 83       	std	Y+1, r17	; 0x01
		if (*str1_in==0)
    22a6:	21 81       	ldd	r18, Z+1	; 0x01
    22a8:	22 23       	and	r18, r18
    22aa:	b9 f4       	brne	.+46     	; 0x22da <decode_base64+0x5e>
    22ac:	12 c0       	rjmp	.+36     	; 0x22d2 <decode_base64+0x56>
	
	strp = str2_out;
	
	while (*str1_in != 0)
	{
		*str2_out++= (*str1_in & 0xFC)>>2;
    22ae:	16 95       	lsr	r17
    22b0:	16 95       	lsr	r17
    22b2:	13 96       	adiw	r26, 0x03	; 3
    22b4:	1c 93       	st	X, r17
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    22b6:	d9 01       	movw	r26, r18
    22b8:	14 96       	adiw	r26, 0x04	; 4
	
	while (*str1_in != 0)
	{
		*str2_out++= (*str1_in & 0xFC)>>2;
		
		*str2_out = (((*str1_in++)&0x03)<<4); 
    22ba:	ea 01       	movw	r28, r20
    22bc:	1b 81       	ldd	r17, Y+3	; 0x03
    22be:	13 70       	andi	r17, 0x03	; 3
    22c0:	12 95       	swap	r17
    22c2:	10 7f       	andi	r17, 0xF0	; 240
    22c4:	e9 01       	movw	r28, r18
    22c6:	1c 83       	std	Y+4, r17	; 0x04
		if (*str1_in==0)
    22c8:	ea 01       	movw	r28, r20
    22ca:	2c 81       	ldd	r18, Y+4	; 0x04
    22cc:	33 96       	adiw	r30, 0x03	; 3
    22ce:	22 23       	and	r18, r18
    22d0:	21 f4       	brne	.+8      	; 0x22da <decode_base64+0x5e>
		{
			str2_out++;
    22d2:	ed 01       	movw	r28, r26
    22d4:	21 96       	adiw	r28, 0x01	; 1
            end_byte = 2;
    22d6:	22 e0       	ldi	r18, 0x02	; 2
			break;
    22d8:	28 c0       	rjmp	.+80     	; 0x232a <decode_base64+0xae>
		}
		else
		{
			*str2_out++ += ((*str1_in & 0xF0)>>4);
    22da:	22 95       	swap	r18
    22dc:	2f 70       	andi	r18, 0x0F	; 15
    22de:	12 0f       	add	r17, r18
    22e0:	1c 93       	st	X, r17
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    22e2:	9d 01       	movw	r18, r26
    22e4:	ed 01       	movw	r28, r26
    22e6:	21 96       	adiw	r28, 0x01	; 1
    22e8:	af 01       	movw	r20, r30
			break;
		}
		else
		{
			*str2_out++ += ((*str1_in & 0xF0)>>4);
			*str2_out = (((*str1_in++)& 0x0F)<<2);
    22ea:	11 81       	ldd	r17, Z+1	; 0x01
    22ec:	1f 70       	andi	r17, 0x0F	; 15
    22ee:	11 0f       	add	r17, r17
    22f0:	11 0f       	add	r17, r17
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	1c 93       	st	X, r17
    22f6:	11 97       	sbiw	r26, 0x01	; 1
			if (*str1_in==0)
    22f8:	02 81       	ldd	r16, Z+2	; 0x02
    22fa:	00 23       	and	r16, r16
    22fc:	19 f4       	brne	.+6      	; 0x2304 <decode_base64+0x88>
			{
				str2_out++;
    22fe:	21 96       	adiw	r28, 0x01	; 1
                end_byte = 1;
    2300:	21 e0       	ldi	r18, 0x01	; 1
                break;
    2302:	13 c0       	rjmp	.+38     	; 0x232a <decode_base64+0xae>
			}
			else
			{
				*str2_out++	+= ((*str1_in & 0xC0)>>6);
    2304:	02 95       	swap	r16
    2306:	06 95       	lsr	r16
    2308:	06 95       	lsr	r16
    230a:	03 70       	andi	r16, 0x03	; 3
    230c:	10 0f       	add	r17, r16
    230e:	11 96       	adiw	r26, 0x01	; 1
    2310:	1c 93       	st	X, r17
    2312:	11 97       	sbiw	r26, 0x01	; 1
				*str2_out++= *str1_in++ & 0x3F;
    2314:	12 81       	ldd	r17, Z+2	; 0x02
    2316:	1f 73       	andi	r17, 0x3F	; 63
    2318:	12 96       	adiw	r26, 0x02	; 2
    231a:	1c 93       	st	X, r17
    231c:	12 97       	sbiw	r26, 0x02	; 2
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    231e:	ed 01       	movw	r28, r26
    2320:	23 96       	adiw	r28, 0x03	; 3
	unsigned char *strp;
    unsigned char end_byte = 0;
	
	strp = str2_out;
	
	while (*str1_in != 0)
    2322:	13 81       	ldd	r17, Z+3	; 0x03
    2324:	11 23       	and	r17, r17
    2326:	19 f6       	brne	.-122    	; 0x22ae <decode_base64+0x32>
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
{
	unsigned char *strp;
    unsigned char end_byte = 0;
    2328:	20 e0       	ldi	r18, 0x00	; 0
				*str2_out++	+= ((*str1_in & 0xC0)>>6);
				*str2_out++= *str1_in++ & 0x3F;
			}
		}
	}
	*str2_out = 0;
    232a:	18 82       	st	Y, r1
    
	while(strp != str2_out)
    232c:	c6 17       	cp	r28, r22
    232e:	d7 07       	cpc	r29, r23
    2330:	91 f0       	breq	.+36     	; 0x2356 <decode_base64+0xda>
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
{
	unsigned char *strp;
    unsigned char end_byte = 0;
	
	strp = str2_out;
    2332:	db 01       	movw	r26, r22
	}
	*str2_out = 0;
    
	while(strp != str2_out)
	{
			*strp = pgm_read_byte(&BASE64CODE[(*strp) & 0x3F]);
    2334:	ec 91       	ld	r30, X
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	ef 73       	andi	r30, 0x3F	; 63
    233a:	f0 70       	andi	r31, 0x00	; 0
    233c:	e3 5c       	subi	r30, 0xC3	; 195
    233e:	f1 4f       	sbci	r31, 0xF1	; 241
    2340:	e4 91       	lpm	r30, Z+
    2342:	ed 93       	st	X+, r30
			}
		}
	}
	*str2_out = 0;
    
	while(strp != str2_out)
    2344:	ca 17       	cp	r28, r26
    2346:	db 07       	cpc	r29, r27
    2348:	a9 f7       	brne	.-22     	; 0x2334 <decode_base64+0xb8>
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    234a:	c8 1b       	sub	r28, r24
    234c:	d9 0b       	sbc	r29, r25
    234e:	21 96       	adiw	r28, 0x01	; 1
			}
		}
	}
	*str2_out = 0;
    
	while(strp != str2_out)
    2350:	c6 0f       	add	r28, r22
    2352:	d7 1f       	adc	r29, r23
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <decode_base64+0xdc>
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
{
	unsigned char *strp;
    unsigned char end_byte = 0;
	
	strp = str2_out;
    2356:	eb 01       	movw	r28, r22
	{
			*strp = pgm_read_byte(&BASE64CODE[(*strp) & 0x3F]);
			strp++;
	}
 
    while (end_byte--)
    2358:	22 23       	and	r18, r18
    235a:	81 f0       	breq	.+32     	; 0x237c <decode_base64+0x100>
    235c:	21 50       	subi	r18, 0x01	; 1
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	ce 01       	movw	r24, r28
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	fe 01       	movw	r30, r28
			strp++;
	}
 
    while (end_byte--)
    {
        *strp = '=';
    236a:	4d e3       	ldi	r20, 0x3D	; 61
    236c:	41 93       	st	Z+, r20
	{
			*strp = pgm_read_byte(&BASE64CODE[(*strp) & 0x3F]);
			strp++;
	}
 
    while (end_byte--)
    236e:	e8 17       	cp	r30, r24
    2370:	f9 07       	cpc	r31, r25
    2372:	e1 f7       	brne	.-8      	; 0x236c <decode_base64+0xf0>
								"WWW-Authenticate: Basic realm=\"My AVR web server\""
								"\r\nContent-Type: text/html\r\n\r\n"};
struct httpSession	httpSessionTable[MAX_HTTP_SESSION];
unsigned char http_auth_password[20];
PROGMEM char BASE64CODE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
	{
			*strp = pgm_read_byte(&BASE64CODE[(*strp) & 0x3F]);
			strp++;
	}
 
    while (end_byte--)
    2378:	c2 0f       	add	r28, r18
    237a:	d3 1f       	adc	r29, r19
    {
        *strp = '=';
        strp++;
    }
    *strp = 0; 
    237c:	18 82       	st	Y, r1
}
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret
				*str2_out++	+= ((*str1_in & 0xC0)>>6);
				*str2_out++= *str1_in++ & 0x3F;
			}
		}
	}
	*str2_out = 0;
    2388:	fb 01       	movw	r30, r22
    238a:	10 82       	st	Z, r1
void decode_base64 (unsigned char *str1_in,unsigned char *str2_out)
{
	unsigned char *strp;
    unsigned char end_byte = 0;
	
	strp = str2_out;
    238c:	eb 01       	movw	r28, r22
    238e:	f6 cf       	rjmp	.-20     	; 0x237c <decode_base64+0x100>

00002390 <httpInit>:
    *strp = 0; 
}
void httpInit()
{
	unsigned char i;
	decode_base64((unsigned char*)HTTP_AUTH_STRING,http_auth_password);
    2390:	80 e6       	ldi	r24, 0x60	; 96
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	66 e0       	ldi	r22, 0x06	; 6
    2396:	76 e0       	ldi	r23, 0x06	; 6
    2398:	0e 94 3e 11 	call	0x227c	; 0x227c <decode_base64>
	for(i=0; i < MAX_HTTP_SESSION; i++){
		httpSessionTable[i].status = HTTP_STATUS_IDLE;
    239c:	10 92 5d 05 	sts	0x055D, r1
    23a0:	10 92 72 05 	sts	0x0572, r1
    23a4:	10 92 87 05 	sts	0x0587, r1
    23a8:	10 92 9c 05 	sts	0x059C, r1
    23ac:	10 92 b1 05 	sts	0x05B1, r1
    23b0:	10 92 c6 05 	sts	0x05C6, r1
    23b4:	10 92 db 05 	sts	0x05DB, r1
    23b8:	10 92 f0 05 	sts	0x05F0, r1
	}
}
    23bc:	08 95       	ret

000023be <httpGetRequest>:
//Ham xu ly mot request cua giao thuc HTTP
void httpGetRequest(unsigned char *buffer,unsigned int bufferLen,struct httpRequest* rqst)
{
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	fc 01       	movw	r30, r24
    23c4:	ea 01       	movw	r28, r20
	unsigned int i;
	if((buffer[0] == 'G')&&(buffer[1] == 'E')&&(buffer[2] == 'T')){
    23c6:	80 81       	ld	r24, Z
    23c8:	87 34       	cpi	r24, 0x47	; 71
    23ca:	49 f4       	brne	.+18     	; 0x23de <httpGetRequest+0x20>
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	95 34       	cpi	r25, 0x45	; 69
    23d0:	31 f4       	brne	.+12     	; 0x23de <httpGetRequest+0x20>
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	84 35       	cpi	r24, 0x54	; 84
    23d6:	f9 f4       	brne	.+62     	; 0x2416 <httpGetRequest+0x58>
	//if(findstr("GET",buffer,3) == 0){
		rqst->method = HTTP_REQUEST_GET;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	88 83       	st	Y, r24
    23dc:	1e c0       	rjmp	.+60     	; 0x241a <httpGetRequest+0x5c>
	}else if((buffer[0] == 'P')&&(buffer[1] == 'O')&&(buffer[2] == 'S')&&(buffer[3] == 'T')){
    23de:	80 35       	cpi	r24, 0x50	; 80
    23e0:	61 f4       	brne	.+24     	; 0x23fa <httpGetRequest+0x3c>
    23e2:	81 81       	ldd	r24, Z+1	; 0x01
    23e4:	8f 34       	cpi	r24, 0x4F	; 79
    23e6:	b9 f4       	brne	.+46     	; 0x2416 <httpGetRequest+0x58>
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	83 35       	cpi	r24, 0x53	; 83
    23ec:	a1 f4       	brne	.+40     	; 0x2416 <httpGetRequest+0x58>
    23ee:	83 81       	ldd	r24, Z+3	; 0x03
    23f0:	84 35       	cpi	r24, 0x54	; 84
    23f2:	89 f4       	brne	.+34     	; 0x2416 <httpGetRequest+0x58>
	//}else if(findstr("POST",buffer,4) == 0){
		rqst->method = HTTP_REQUEST_POST;
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	88 83       	st	Y, r24
    23f8:	10 c0       	rjmp	.+32     	; 0x241a <httpGetRequest+0x5c>
	}else if((buffer[0] == 'H')&&(buffer[1] == 'E')&&(buffer[2] == 'A')&&(buffer[3] == 'D')){
    23fa:	88 34       	cpi	r24, 0x48	; 72
    23fc:	61 f4       	brne	.+24     	; 0x2416 <httpGetRequest+0x58>
    23fe:	81 81       	ldd	r24, Z+1	; 0x01
    2400:	85 34       	cpi	r24, 0x45	; 69
    2402:	49 f4       	brne	.+18     	; 0x2416 <httpGetRequest+0x58>
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	81 34       	cpi	r24, 0x41	; 65
    2408:	31 f4       	brne	.+12     	; 0x2416 <httpGetRequest+0x58>
    240a:	83 81       	ldd	r24, Z+3	; 0x03
    240c:	84 34       	cpi	r24, 0x44	; 68
    240e:	19 f4       	brne	.+6      	; 0x2416 <httpGetRequest+0x58>
	//}else if(findstr("HEAD",buffer,4) == 0){
		rqst->method = HTTP_REQUEST_HEAD;
    2410:	83 e0       	ldi	r24, 0x03	; 3
    2412:	88 83       	st	Y, r24
    2414:	02 c0       	rjmp	.+4      	; 0x241a <httpGetRequest+0x5c>
	}else{
		rqst->method = HTTP_REQUEST_UNKNOWN;
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	88 83       	st	Y, r24
	for(i=0; i < MAX_HTTP_SESSION; i++){
		httpSessionTable[i].status = HTTP_STATUS_IDLE;
	}
}
//Ham xu ly mot request cua giao thuc HTTP
void httpGetRequest(unsigned char *buffer,unsigned int bufferLen,struct httpRequest* rqst)
    241a:	df 01       	movw	r26, r30
    241c:	11 96       	adiw	r26, 0x01	; 1
		rqst->method = HTTP_REQUEST_HEAD;
	}else{
		rqst->method = HTTP_REQUEST_UNKNOWN;
	}
	//Bat dau tim URI va HTTP version
	i = 0;
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
	while(++i<bufferLen){
    2422:	0b c0       	rjmp	.+22     	; 0x243a <httpGetRequest+0x7c>
		if(buffer[i] == ' '){	
    2424:	2d 91       	ld	r18, X+
    2426:	20 32       	cpi	r18, 0x20	; 32
    2428:	41 f4       	brne	.+16     	; 0x243a <httpGetRequest+0x7c>
			//khoang trang dau tien
			rqst->requestURI = &buffer[i+1];
    242a:	9c 01       	movw	r18, r24
    242c:	2f 5f       	subi	r18, 0xFF	; 255
    242e:	3f 4f       	sbci	r19, 0xFF	; 255
    2430:	2e 0f       	add	r18, r30
    2432:	3f 1f       	adc	r19, r31
    2434:	3a 83       	std	Y+2, r19	; 0x02
    2436:	29 83       	std	Y+1, r18	; 0x01
			break;
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <httpGetRequest+0xa4>
	}else{
		rqst->method = HTTP_REQUEST_UNKNOWN;
	}
	//Bat dau tim URI va HTTP version
	i = 0;
	while(++i<bufferLen){
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	86 17       	cp	r24, r22
    243e:	97 07       	cpc	r25, r23
    2440:	88 f3       	brcs	.-30     	; 0x2424 <httpGetRequest+0x66>
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <httpGetRequest+0xa4>
			break;
		}
	}
	while(++i<bufferLen)
		{
		if(buffer[i] == ' ')
    2444:	2d 91       	ld	r18, X+
    2446:	20 32       	cpi	r18, 0x20	; 32
    2448:	81 f4       	brne	.+32     	; 0x246a <httpGetRequest+0xac>
			{	
			//khoang trang dau tien
			rqst->version = &buffer[i+1];
    244a:	9c 01       	movw	r18, r24
    244c:	2f 5f       	subi	r18, 0xFF	; 255
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	2e 0f       	add	r18, r30
    2452:	3f 1f       	adc	r19, r31
    2454:	3c 83       	std	Y+4, r19	; 0x04
    2456:	2b 83       	std	Y+3, r18	; 0x03
	for(i=0; i < MAX_HTTP_SESSION; i++){
		httpSessionTable[i].status = HTTP_STATUS_IDLE;
	}
}
//Ham xu ly mot request cua giao thuc HTTP
void httpGetRequest(unsigned char *buffer,unsigned int bufferLen,struct httpRequest* rqst)
    2458:	dc 01       	movw	r26, r24
    245a:	11 96       	adiw	r26, 0x01	; 1
    245c:	ae 0f       	add	r26, r30
    245e:	bf 1f       	adc	r27, r31
    2460:	1b c0       	rjmp	.+54     	; 0x2498 <httpGetRequest+0xda>
    2462:	dc 01       	movw	r26, r24
    2464:	11 96       	adiw	r26, 0x01	; 1
    2466:	ae 0f       	add	r26, r30
    2468:	bf 1f       	adc	r27, r31
			//khoang trang dau tien
			rqst->requestURI = &buffer[i+1];
			break;
		}
	}
	while(++i<bufferLen)
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	86 17       	cp	r24, r22
    246e:	97 07       	cpc	r25, r23
    2470:	48 f3       	brcs	.-46     	; 0x2444 <httpGetRequest+0x86>
    2472:	f2 cf       	rjmp	.-28     	; 0x2458 <httpGetRequest+0x9a>
			}
		}
	//Tim header
	while(++i<bufferLen)
		{
		if((buffer[i] == 0x0d) && (buffer[i+1] == 0x0a))
    2474:	2d 91       	ld	r18, X+
    2476:	2d 30       	cpi	r18, 0x0D	; 13
    2478:	79 f4       	brne	.+30     	; 0x2498 <httpGetRequest+0xda>
    247a:	2c 91       	ld	r18, X
    247c:	2a 30       	cpi	r18, 0x0A	; 10
    247e:	61 f4       	brne	.+24     	; 0x2498 <httpGetRequest+0xda>
			{	
			//\n\r dau tien, bat dau header
			rqst->header = &buffer[i+2];
    2480:	9c 01       	movw	r18, r24
    2482:	2e 5f       	subi	r18, 0xFE	; 254
    2484:	3f 4f       	sbci	r19, 0xFF	; 255
    2486:	2e 0f       	add	r18, r30
    2488:	3f 1f       	adc	r19, r31
    248a:	3e 83       	std	Y+6, r19	; 0x06
    248c:	2d 83       	std	Y+5, r18	; 0x05
	for(i=0; i < MAX_HTTP_SESSION; i++){
		httpSessionTable[i].status = HTTP_STATUS_IDLE;
	}
}
//Ham xu ly mot request cua giao thuc HTTP
void httpGetRequest(unsigned char *buffer,unsigned int bufferLen,struct httpRequest* rqst)
    248e:	dc 01       	movw	r26, r24
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	ae 0f       	add	r26, r30
    2494:	bf 1f       	adc	r27, r31
    2496:	12 c0       	rjmp	.+36     	; 0x24bc <httpGetRequest+0xfe>
			rqst->version = &buffer[i+1];
			break;
			}
		}
	//Tim header
	while(++i<bufferLen)
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	86 17       	cp	r24, r22
    249c:	97 07       	cpc	r25, r23
    249e:	50 f3       	brcs	.-44     	; 0x2474 <httpGetRequest+0xb6>
    24a0:	f6 cf       	rjmp	.-20     	; 0x248e <httpGetRequest+0xd0>
			}
		}
	//Tim ket thuc header
	while(++i<bufferLen)
		{
		if((buffer[i] == 0x0d) && (buffer[i+1] == 0x0a) && (buffer[i+2] == 0x0d))
    24a2:	2d 91       	ld	r18, X+
    24a4:	2d 30       	cpi	r18, 0x0D	; 13
    24a6:	51 f4       	brne	.+20     	; 0x24bc <httpGetRequest+0xfe>
    24a8:	2c 91       	ld	r18, X
    24aa:	2a 30       	cpi	r18, 0x0A	; 10
    24ac:	39 f4       	brne	.+14     	; 0x24bc <httpGetRequest+0xfe>
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	2c 91       	ld	r18, X
    24b2:	11 97       	sbiw	r26, 0x01	; 1
    24b4:	2d 30       	cpi	r18, 0x0D	; 13
    24b6:	11 f4       	brne	.+4      	; 0x24bc <httpGetRequest+0xfe>
			{	
				//\n\r\n\r
				i += 4;
    24b8:	04 96       	adiw	r24, 0x04	; 4
				break;
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <httpGetRequest+0x106>
			rqst->header = &buffer[i+2];
			break;
			}
		}
	//Tim ket thuc header
	while(++i<bufferLen)
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	86 17       	cp	r24, r22
    24c0:	97 07       	cpc	r25, r23
    24c2:	78 f3       	brcs	.-34     	; 0x24a2 <httpGetRequest+0xe4>
				//\n\r\n\r
				i += 4;
				break;
			}	
		}
	rqst->body = &buffer[i];
    24c4:	e8 0f       	add	r30, r24
    24c6:	f9 1f       	adc	r31, r25
    24c8:	f8 87       	std	Y+8, r31	; 0x08
    24ca:	ef 83       	std	Y+7, r30	; 0x07
	rqst->bodyLen = bufferLen - i;
    24cc:	68 1b       	sub	r22, r24
    24ce:	79 0b       	sbc	r23, r25
    24d0:	7a 87       	std	Y+10, r23	; 0x0a
    24d2:	69 87       	std	Y+9, r22	; 0x09
}
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <httpHeaderGetField>:
//Ham lay gia tri mot truong trong HTTP Header,
// tra lai con tro vi tri bat dau value cua truong nay
unsigned char * httpHeaderGetField(const prog_char fieldname[],struct httpRequest *rqst)
{
    24da:	ff 92       	push	r15
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	fb 01       	movw	r30, r22
	unsigned char *header;
	unsigned int i,j,headerLen;
	header = rqst->header;
    24e6:	05 81       	ldd	r16, Z+5	; 0x05
    24e8:	16 81       	ldd	r17, Z+6	; 0x06
	headerLen = (rqst->header) - (rqst->body) - 4;
    24ea:	b8 01       	movw	r22, r16
    24ec:	64 50       	subi	r22, 0x04	; 4
    24ee:	70 40       	sbci	r23, 0x00	; 0
    24f0:	27 81       	ldd	r18, Z+7	; 0x07
    24f2:	30 85       	ldd	r19, Z+8	; 0x08
    24f4:	62 1b       	sub	r22, r18
    24f6:	73 0b       	sbc	r23, r19
	i=0;
	j=0;
	while(i<headerLen){
    24f8:	29 f1       	breq	.+74     	; 0x2544 <httpHeaderGetField+0x6a>
    24fa:	d8 01       	movw	r26, r16
	unsigned char *header;
	unsigned int i,j,headerLen;
	header = rqst->header;
	headerLen = (rqst->header) - (rqst->body) - 4;
	i=0;
	j=0;
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
{
	unsigned char *header;
	unsigned int i,j,headerLen;
	header = rqst->header;
	headerLen = (rqst->header) - (rqst->body) - 4;
	i=0;
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	50 e0       	ldi	r21, 0x00	; 0
	j=0;
	while(i<headerLen){
		if(header[i++] != pgm_read_byte(fieldname + j++)){
			j = 0;
    2504:	c0 e0       	ldi	r28, 0x00	; 0
    2506:	d0 e0       	ldi	r29, 0x00	; 0
	header = rqst->header;
	headerLen = (rqst->header) - (rqst->body) - 4;
	i=0;
	j=0;
	while(i<headerLen){
		if(header[i++] != pgm_read_byte(fieldname + j++)){
    2508:	fd 90       	ld	r15, X+
    250a:	fc 01       	movw	r30, r24
    250c:	e2 0f       	add	r30, r18
    250e:	f3 1f       	adc	r31, r19
    2510:	e4 91       	lpm	r30, Z+
    2512:	4f 5f       	subi	r20, 0xFF	; 255
    2514:	5f 4f       	sbci	r21, 0xFF	; 255
    2516:	fe 16       	cp	r15, r30
    2518:	19 f4       	brne	.+6      	; 0x2520 <httpHeaderGetField+0x46>
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <httpHeaderGetField+0x48>
			j = 0;
    2520:	9e 01       	movw	r18, r28
		}
		if(pgm_read_byte(fieldname + j) == 0){
    2522:	fc 01       	movw	r30, r24
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	e4 91       	lpm	r30, Z+
    252a:	ee 23       	and	r30, r30
    252c:	29 f4       	brne	.+10     	; 0x2538 <httpHeaderGetField+0x5e>
			return(header+i+2);
    252e:	4e 5f       	subi	r20, 0xFE	; 254
    2530:	5f 4f       	sbci	r21, 0xFF	; 255
    2532:	04 0f       	add	r16, r20
    2534:	15 1f       	adc	r17, r21
    2536:	08 c0       	rjmp	.+16     	; 0x2548 <httpHeaderGetField+0x6e>
	unsigned int i,j,headerLen;
	header = rqst->header;
	headerLen = (rqst->header) - (rqst->body) - 4;
	i=0;
	j=0;
	while(i<headerLen){
    2538:	46 17       	cp	r20, r22
    253a:	57 07       	cpc	r21, r23
    253c:	28 f3       	brcs	.-54     	; 0x2508 <httpHeaderGetField+0x2e>
		}
		if(pgm_read_byte(fieldname + j) == 0){
			return(header+i+2);
		}
	}
	return(0);
    253e:	00 e0       	ldi	r16, 0x00	; 0
    2540:	10 e0       	ldi	r17, 0x00	; 0
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <httpHeaderGetField+0x6e>
    2544:	00 e0       	ldi	r16, 0x00	; 0
    2546:	10 e0       	ldi	r17, 0x00	; 0
}
    2548:	80 2f       	mov	r24, r16
    254a:	91 2f       	mov	r25, r17
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	08 95       	ret

00002558 <change_uint16>:

unsigned char val_tram = 0, val_chuc = 0, val_dvi = 0, val_nghin=0, val_cnghin=0;
void change_uint16 (uint16_t val)
{
	uint16_t temp;
	val_cnghin = val /10000;
    2558:	60 e1       	ldi	r22, 0x10	; 16
    255a:	77 e2       	ldi	r23, 0x27	; 39
    255c:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    2560:	60 93 b4 00 	sts	0x00B4, r22
	temp = val %10000;	
	val_nghin  = (temp) /1000;	
    2564:	68 ee       	ldi	r22, 0xE8	; 232
    2566:	73 e0       	ldi	r23, 0x03	; 3
    2568:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    256c:	60 93 b3 00 	sts	0x00B3, r22
	temp = temp %1000;
	val_tram   = (temp) /100;	
    2570:	64 e6       	ldi	r22, 0x64	; 100
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    2578:	60 93 b0 00 	sts	0x00B0, r22
	temp = temp %100;
	val_chuc   = temp/10;
    257c:	6a e0       	ldi	r22, 0x0A	; 10
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    2584:	60 93 b1 00 	sts	0x00B1, r22
	val_dvi    = temp%10;	
    2588:	80 93 b2 00 	sts	0x00B2, r24
}
    258c:	08 95       	ret

0000258e <change_number>:
void change_number(unsigned char val)
{
	val_tram = val /100;	
    258e:	64 e6       	ldi	r22, 0x64	; 100
    2590:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2594:	80 93 b0 00 	sts	0x00B0, r24
	val_chuc = (val %100) /10;	
    2598:	89 2f       	mov	r24, r25
    259a:	6a e0       	ldi	r22, 0x0A	; 10
    259c:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    25a0:	80 93 b1 00 	sts	0x00B1, r24
	val_dvi = (val %100) %10;
    25a4:	90 93 b2 00 	sts	0x00B2, r25
}
    25a8:	08 95       	ret

000025aa <HTTPSend>:

//Ham gui mot doan du lieu chua trong bo nho chuong trinh ra theo giao thuc HTTP
void	HTTPSend(const prog_char progdata[],unsigned int dataLen,struct tcpSession *pSession, unsigned char endData)
{
    25aa:	2f 92       	push	r2
    25ac:	3f 92       	push	r3
    25ae:	4f 92       	push	r4
    25b0:	5f 92       	push	r5
    25b2:	6f 92       	push	r6
    25b4:	7f 92       	push	r7
    25b6:	8f 92       	push	r8
    25b8:	9f 92       	push	r9
    25ba:	af 92       	push	r10
    25bc:	bf 92       	push	r11
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <HTTPSend+0x26>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <HTTPSend+0x28>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <HTTPSend+0x2a>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	7c 01       	movw	r14, r24
    25da:	5b 01       	movw	r10, r22
    25dc:	3a 01       	movw	r6, r20
    25de:	32 2e       	mov	r3, r18
	
	//unsigned char temp_adc;
	Flags = TCP_PSH_FLAG;

	Flags = TCP_PSH_FLAG;
	dataBuffer = ethGetBuffer() + ETH_HEADER_LEN + IP_HEADER_LEN + TCP_HEADER_LEN;
    25e0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <ethGetBuffer>
    25e4:	0f 2e       	mov	r0, r31
    25e6:	f6 e3       	ldi	r31, 0x36	; 54
    25e8:	cf 2e       	mov	r12, r31
    25ea:	dd 24       	eor	r13, r13
    25ec:	f0 2d       	mov	r31, r0
    25ee:	c8 0e       	add	r12, r24
    25f0:	d9 1e       	adc	r13, r25
	if(dataLen == 0){
    25f2:	a1 14       	cp	r10, r1
    25f4:	b1 04       	cpc	r11, r1
    25f6:	09 f0       	breq	.+2      	; 0x25fa <HTTPSend+0x50>
    25f8:	64 c3       	rjmp	.+1736   	; 0x2cc2 <HTTPSend+0x718>
		Flags |= TCP_ACK_FLAG;
		if(endData){
    25fa:	33 20       	and	r3, r3
    25fc:	39 f0       	breq	.+14     	; 0x260c <HTTPSend+0x62>
			if(srcDataIdx == dataLen){
				Flags |= TCP_FIN_FLAG;
				pSession->sesState = TCP_STATE_FIN_WAIT1;
    25fe:	85 e0       	ldi	r24, 0x05	; 5
    2600:	d3 01       	movw	r26, r6
    2602:	50 96       	adiw	r26, 0x10	; 16
    2604:	8c 93       	st	X, r24
    2606:	50 97       	sbiw	r26, 0x10	; 16
	dataBuffer = ethGetBuffer() + ETH_HEADER_LEN + IP_HEADER_LEN + TCP_HEADER_LEN;
	if(dataLen == 0){
		Flags |= TCP_ACK_FLAG;
		if(endData){
			if(srcDataIdx == dataLen){
				Flags |= TCP_FIN_FLAG;
    2608:	69 e1       	ldi	r22, 0x19	; 25
    260a:	01 c0       	rjmp	.+2      	; 0x260e <HTTPSend+0x64>
	Flags = TCP_PSH_FLAG;

	Flags = TCP_PSH_FLAG;
	dataBuffer = ethGetBuffer() + ETH_HEADER_LEN + IP_HEADER_LEN + TCP_HEADER_LEN;
	if(dataLen == 0){
		Flags |= TCP_ACK_FLAG;
    260c:	68 e1       	ldi	r22, 0x18	; 24
			if(srcDataIdx == dataLen){
				Flags |= TCP_FIN_FLAG;
				pSession->sesState = TCP_STATE_FIN_WAIT1;
			}
		}
		TCPPackedSend(pSession,Flags,0,dataBuffer);
    260e:	c3 01       	movw	r24, r6
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	96 01       	movw	r18, r12
    2616:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    261a:	94 c3       	rjmp	.+1832   	; 0x2d44 <HTTPSend+0x79a>
	}
	while(srcDataIdx < dataLen){
		i = 0;
		while(i<MAX_SEGMENT_SIZE)
			{
			tmpChr = pgm_read_byte(progdata + srcDataIdx++);
    261c:	98 01       	movw	r18, r16
    261e:	2f 5f       	subi	r18, 0xFF	; 255
    2620:	3f 4f       	sbci	r19, 0xFF	; 255
    2622:	f7 01       	movw	r30, r14
    2624:	e0 0f       	add	r30, r16
    2626:	f1 1f       	adc	r31, r17
    2628:	84 91       	lpm	r24, Z+
			//Truyen nhan du lieu
			if(tmpChr == '%')
    262a:	85 32       	cpi	r24, 0x25	; 37
    262c:	09 f0       	breq	.+2      	; 0x2630 <HTTPSend+0x86>
    262e:	36 c3       	rjmp	.+1644   	; 0x2c9c <HTTPSend+0x6f2>
				{
					//Neu khong con du cho trong tren buffer
					if( (i + 9) > MAX_SEGMENT_SIZE)
    2630:	4d 81       	ldd	r20, Y+5	; 0x05
    2632:	5e 81       	ldd	r21, Y+6	; 0x06
    2634:	47 5f       	subi	r20, 0xF7	; 247
    2636:	5f 4f       	sbci	r21, 0xFF	; 255
    2638:	b3 e0       	ldi	r27, 0x03	; 3
    263a:	49 3e       	cpi	r20, 0xE9	; 233
    263c:	5b 07       	cpc	r21, r27
    263e:	08 f0       	brcs	.+2      	; 0x2642 <HTTPSend+0x98>
    2640:	5e c3       	rjmp	.+1724   	; 0x2cfe <HTTPSend+0x754>
							srcDataIdx--;
							break;
						}
						
					//Tiep tuc neu du cho trong tren buffer
					tmpVar = pgm_read_byte(progdata + srcDataIdx + 3) - 0x30;
    2642:	89 01       	movw	r16, r18
    2644:	0d 5f       	subi	r16, 0xFD	; 253
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
					//Truong hop tim duoc CL
					if((pgm_read_byte(progdata + srcDataIdx) == 'C') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'L'))
    2648:	a7 01       	movw	r20, r14
    264a:	42 0f       	add	r20, r18
    264c:	53 1f       	adc	r21, r19
    264e:	fa 01       	movw	r30, r20
    2650:	94 91       	lpm	r25, Z+
    2652:	93 34       	cpi	r25, 0x43	; 67
    2654:	09 f0       	breq	.+2      	; 0x2658 <HTTPSend+0xae>
    2656:	40 c0       	rjmp	.+128    	; 0x26d8 <HTTPSend+0x12e>
    2658:	f9 01       	movw	r30, r18
    265a:	31 96       	adiw	r30, 0x01	; 1
    265c:	ee 0d       	add	r30, r14
    265e:	ff 1d       	adc	r31, r15
    2660:	e4 91       	lpm	r30, Z+
    2662:	ec 34       	cpi	r30, 0x4C	; 76
    2664:	c9 f5       	brne	.+114    	; 0x26d8 <HTTPSend+0x12e>
						{
						if(GetState(pgm_read_byte(progdata + srcDataIdx + 2) - 0x30) == 240)// Get trang thai cua tung role
    2666:	2e 5f       	subi	r18, 0xFE	; 254
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
    266a:	f7 01       	movw	r30, r14
    266c:	e2 0f       	add	r30, r18
    266e:	f3 1f       	adc	r31, r19
    2670:	84 91       	lpm	r24, Z+
    2672:	80 53       	subi	r24, 0x30	; 48
    2674:	0e 94 7e 28 	call	0x50fc	; 0x50fc <GetState>
    2678:	80 3f       	cpi	r24, 0xF0	; 240
    267a:	a1 f4       	brne	.+40     	; 0x26a4 <HTTPSend+0xfa>
							{dataBuffer[i++] = 'o';dataBuffer[i++] = 'n';}
    267c:	ed 81       	ldd	r30, Y+5	; 0x05
    267e:	fe 81       	ldd	r31, Y+6	; 0x06
    2680:	ec 0d       	add	r30, r12
    2682:	fd 1d       	adc	r31, r13
    2684:	2f e6       	ldi	r18, 0x6F	; 111
    2686:	20 83       	st	Z, r18
    2688:	2d 81       	ldd	r18, Y+5	; 0x05
    268a:	3e 81       	ldd	r19, Y+6	; 0x06
    268c:	2f 5f       	subi	r18, 0xFF	; 255
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	f6 01       	movw	r30, r12
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	8e e6       	ldi	r24, 0x6E	; 110
    2698:	80 83       	st	Z, r24
    269a:	d9 01       	movw	r26, r18
    269c:	11 96       	adiw	r26, 0x01	; 1
    269e:	be 83       	std	Y+6, r27	; 0x06
    26a0:	ad 83       	std	Y+5, r26	; 0x05
    26a2:	07 c3       	rjmp	.+1550   	; 0x2cb2 <HTTPSend+0x708>
						else
							{dataBuffer[i++] = 'o';dataBuffer[i++] = 'f'; dataBuffer[i++] = 'f';}
    26a4:	ed 81       	ldd	r30, Y+5	; 0x05
    26a6:	fe 81       	ldd	r31, Y+6	; 0x06
    26a8:	ec 0d       	add	r30, r12
    26aa:	fd 1d       	adc	r31, r13
    26ac:	bf e6       	ldi	r27, 0x6F	; 111
    26ae:	b0 83       	st	Z, r27
    26b0:	2d 81       	ldd	r18, Y+5	; 0x05
    26b2:	3e 81       	ldd	r19, Y+6	; 0x06
    26b4:	2f 5f       	subi	r18, 0xFF	; 255
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	f6 01       	movw	r30, r12
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	86 e6       	ldi	r24, 0x66	; 102
    26c0:	80 83       	st	Z, r24
    26c2:	2f 5f       	subi	r18, 0xFF	; 255
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	f6 01       	movw	r30, r12
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	80 83       	st	Z, r24
    26ce:	d9 01       	movw	r26, r18
    26d0:	11 96       	adiw	r26, 0x01	; 1
    26d2:	be 83       	std	Y+6, r27	; 0x06
    26d4:	ad 83       	std	Y+5, r26	; 0x05
						srcDataIdx+=3;
    26d6:	ed c2       	rjmp	.+1498   	; 0x2cb2 <HTTPSend+0x708>
						}
					else
					//Truong hop tim duoc RL
					if((pgm_read_byte(progdata + srcDataIdx) == 'R') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'S'))
    26d8:	fa 01       	movw	r30, r20
    26da:	94 91       	lpm	r25, Z+
    26dc:	92 35       	cpi	r25, 0x52	; 82
    26de:	09 f0       	breq	.+2      	; 0x26e2 <HTTPSend+0x138>
    26e0:	40 c0       	rjmp	.+128    	; 0x2762 <HTTPSend+0x1b8>
    26e2:	f9 01       	movw	r30, r18
    26e4:	31 96       	adiw	r30, 0x01	; 1
    26e6:	ee 0d       	add	r30, r14
    26e8:	ff 1d       	adc	r31, r15
    26ea:	e4 91       	lpm	r30, Z+
    26ec:	e3 35       	cpi	r30, 0x53	; 83
    26ee:	c9 f5       	brne	.+114    	; 0x2762 <HTTPSend+0x1b8>
						{
						if(GetState(pgm_read_byte(progdata + srcDataIdx + 2) - 0x30) == 240)// Get trang thai cua tung role
    26f0:	2e 5f       	subi	r18, 0xFE	; 254
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	f7 01       	movw	r30, r14
    26f6:	e2 0f       	add	r30, r18
    26f8:	f3 1f       	adc	r31, r19
    26fa:	84 91       	lpm	r24, Z+
    26fc:	80 53       	subi	r24, 0x30	; 48
    26fe:	0e 94 7e 28 	call	0x50fc	; 0x50fc <GetState>
    2702:	80 3f       	cpi	r24, 0xF0	; 240
    2704:	d1 f4       	brne	.+52     	; 0x273a <HTTPSend+0x190>
							{dataBuffer[i++] = 'O';dataBuffer[i++] = 'F';dataBuffer[i++] = 'F';}
    2706:	ed 81       	ldd	r30, Y+5	; 0x05
    2708:	fe 81       	ldd	r31, Y+6	; 0x06
    270a:	ec 0d       	add	r30, r12
    270c:	fd 1d       	adc	r31, r13
    270e:	2f e4       	ldi	r18, 0x4F	; 79
    2710:	20 83       	st	Z, r18
    2712:	2d 81       	ldd	r18, Y+5	; 0x05
    2714:	3e 81       	ldd	r19, Y+6	; 0x06
    2716:	2f 5f       	subi	r18, 0xFF	; 255
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	f6 01       	movw	r30, r12
    271c:	e2 0f       	add	r30, r18
    271e:	f3 1f       	adc	r31, r19
    2720:	86 e4       	ldi	r24, 0x46	; 70
    2722:	80 83       	st	Z, r24
    2724:	2f 5f       	subi	r18, 0xFF	; 255
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	f6 01       	movw	r30, r12
    272a:	e2 0f       	add	r30, r18
    272c:	f3 1f       	adc	r31, r19
    272e:	80 83       	st	Z, r24
    2730:	d9 01       	movw	r26, r18
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	be 83       	std	Y+6, r27	; 0x06
    2736:	ad 83       	std	Y+5, r26	; 0x05
    2738:	bc c2       	rjmp	.+1400   	; 0x2cb2 <HTTPSend+0x708>
						else
							{dataBuffer[i++] = 'O';dataBuffer[i++] = 'N';}
    273a:	ed 81       	ldd	r30, Y+5	; 0x05
    273c:	fe 81       	ldd	r31, Y+6	; 0x06
    273e:	ec 0d       	add	r30, r12
    2740:	fd 1d       	adc	r31, r13
    2742:	bf e4       	ldi	r27, 0x4F	; 79
    2744:	b0 83       	st	Z, r27
    2746:	2d 81       	ldd	r18, Y+5	; 0x05
    2748:	3e 81       	ldd	r19, Y+6	; 0x06
    274a:	2f 5f       	subi	r18, 0xFF	; 255
    274c:	3f 4f       	sbci	r19, 0xFF	; 255
    274e:	f6 01       	movw	r30, r12
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	8e e4       	ldi	r24, 0x4E	; 78
    2756:	80 83       	st	Z, r24
    2758:	d9 01       	movw	r26, r18
    275a:	11 96       	adiw	r26, 0x01	; 1
    275c:	be 83       	std	Y+6, r27	; 0x06
    275e:	ad 83       	std	Y+5, r26	; 0x05
						srcDataIdx+=3;
    2760:	a8 c2       	rjmp	.+1360   	; 0x2cb2 <HTTPSend+0x708>
						}	
					else
					//Truong hop tim duoc TI
						if((pgm_read_byte(progdata + srcDataIdx) == 'T') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'I'))
    2762:	fa 01       	movw	r30, r20
    2764:	94 91       	lpm	r25, Z+
    2766:	94 35       	cpi	r25, 0x54	; 84
    2768:	09 f0       	breq	.+2      	; 0x276c <HTTPSend+0x1c2>
    276a:	69 c0       	rjmp	.+210    	; 0x283e <HTTPSend+0x294>
    276c:	f9 01       	movw	r30, r18
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	ee 0d       	add	r30, r14
    2772:	ff 1d       	adc	r31, r15
    2774:	e4 91       	lpm	r30, Z+
    2776:	e9 34       	cpi	r30, 0x49	; 73
    2778:	09 f0       	breq	.+2      	; 0x277c <HTTPSend+0x1d2>
    277a:	61 c0       	rjmp	.+194    	; 0x283e <HTTPSend+0x294>
							{									
								//dataBuffer[i++] = ' '; 
								if(Hour/10 != 0)	dataBuffer[i++] = Hour/10 + 0x30;	dataBuffer[i++] = Hour%10 + 0x30;
    277c:	80 91 a7 00 	lds	r24, 0x00A7
    2780:	8a 30       	cpi	r24, 0x0A	; 10
    2782:	80 f0       	brcs	.+32     	; 0x27a4 <HTTPSend+0x1fa>
    2784:	80 91 a7 00 	lds	r24, 0x00A7
    2788:	ed 81       	ldd	r30, Y+5	; 0x05
    278a:	fe 81       	ldd	r31, Y+6	; 0x06
    278c:	ec 0d       	add	r30, r12
    278e:	fd 1d       	adc	r31, r13
    2790:	6a e0       	ldi	r22, 0x0A	; 10
    2792:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2796:	80 5d       	subi	r24, 0xD0	; 208
    2798:	80 83       	st	Z, r24
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	80 91 a7 00 	lds	r24, 0x00A7
    27a8:	ed 81       	ldd	r30, Y+5	; 0x05
    27aa:	fe 81       	ldd	r31, Y+6	; 0x06
    27ac:	ec 0d       	add	r30, r12
    27ae:	fd 1d       	adc	r31, r13
    27b0:	6a e0       	ldi	r22, 0x0A	; 10
    27b2:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    27b6:	90 5d       	subi	r25, 0xD0	; 208
    27b8:	90 83       	st	Z, r25
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	01 96       	adiw	r24, 0x01	; 1
								dataBuffer[i++]=':';
    27c0:	f6 01       	movw	r30, r12
    27c2:	e8 0f       	add	r30, r24
    27c4:	f9 1f       	adc	r31, r25
    27c6:	80 82       	st	Z, r8
    27c8:	ac 01       	movw	r20, r24
    27ca:	4f 5f       	subi	r20, 0xFF	; 255
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
								dataBuffer[i++] = Minute/10 + 0x30;		dataBuffer[i++] = Minute%10 + 0x30;
    27ce:	80 91 a6 00 	lds	r24, 0x00A6
    27d2:	f6 01       	movw	r30, r12
    27d4:	e4 0f       	add	r30, r20
    27d6:	f5 1f       	adc	r31, r21
    27d8:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    27dc:	80 5d       	subi	r24, 0xD0	; 208
    27de:	80 83       	st	Z, r24
    27e0:	4f 5f       	subi	r20, 0xFF	; 255
    27e2:	5f 4f       	sbci	r21, 0xFF	; 255
    27e4:	80 91 a6 00 	lds	r24, 0x00A6
    27e8:	f6 01       	movw	r30, r12
    27ea:	e4 0f       	add	r30, r20
    27ec:	f5 1f       	adc	r31, r21
    27ee:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    27f2:	90 5d       	subi	r25, 0xD0	; 208
    27f4:	90 83       	st	Z, r25
    27f6:	4f 5f       	subi	r20, 0xFF	; 255
    27f8:	5f 4f       	sbci	r21, 0xFF	; 255
								dataBuffer[i++]=':'; 
    27fa:	f6 01       	movw	r30, r12
    27fc:	e4 0f       	add	r30, r20
    27fe:	f5 1f       	adc	r31, r21
    2800:	80 82       	st	Z, r8
    2802:	4f 5f       	subi	r20, 0xFF	; 255
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
								dataBuffer[i++] = Second/10 + 0x30;		dataBuffer[i++] = Second%10 + 0x30;
    2806:	80 91 a5 00 	lds	r24, 0x00A5
    280a:	f6 01       	movw	r30, r12
    280c:	e4 0f       	add	r30, r20
    280e:	f5 1f       	adc	r31, r21
    2810:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2814:	80 5d       	subi	r24, 0xD0	; 208
    2816:	80 83       	st	Z, r24
    2818:	4f 5f       	subi	r20, 0xFF	; 255
    281a:	5f 4f       	sbci	r21, 0xFF	; 255
    281c:	80 91 a5 00 	lds	r24, 0x00A5
    2820:	f6 01       	movw	r30, r12
    2822:	e4 0f       	add	r30, r20
    2824:	f5 1f       	adc	r31, r21
    2826:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    282a:	90 5d       	subi	r25, 0xD0	; 208
    282c:	90 83       	st	Z, r25
    282e:	da 01       	movw	r26, r20
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	be 83       	std	Y+6, r27	; 0x06
    2834:	ad 83       	std	Y+5, r26	; 0x05
								//dataBuffer[i++]=' ';
								//srcDataIdx+=10;
								srcDataIdx+=9;	
    2836:	89 01       	movw	r16, r18
    2838:	07 5f       	subi	r16, 0xF7	; 247
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	3a c2       	rjmp	.+1140   	; 0x2cb2 <HTTPSend+0x708>
							}
					else
					//Truong hop tim duoc AD
					if((pgm_read_byte(progdata + srcDataIdx) == 'A') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'D'))
    283e:	fa 01       	movw	r30, r20
    2840:	94 91       	lpm	r25, Z+
    2842:	91 34       	cpi	r25, 0x41	; 65
    2844:	09 f0       	breq	.+2      	; 0x2848 <HTTPSend+0x29e>
    2846:	74 c0       	rjmp	.+232    	; 0x2930 <HTTPSend+0x386>
    2848:	f9 01       	movw	r30, r18
    284a:	31 96       	adiw	r30, 0x01	; 1
    284c:	ee 0d       	add	r30, r14
    284e:	ff 1d       	adc	r31, r15
    2850:	e4 91       	lpm	r30, Z+
    2852:	e4 34       	cpi	r30, 0x44	; 68
    2854:	09 f0       	breq	.+2      	; 0x2858 <HTTPSend+0x2ae>
    2856:	6c c0       	rjmp	.+216    	; 0x2930 <HTTPSend+0x386>
						{												
							//dataBuffer[i++] = ' ';
							if(ds18b20 /100 == 0 && (ds18b20 %100) /10 != 0)	dataBuffer[i++] = (ds18b20 %100) /10 + 0x30;
    2858:	80 91 31 06 	lds	r24, 0x0631
    285c:	84 36       	cpi	r24, 0x64	; 100
    285e:	a8 f4       	brcc	.+42     	; 0x288a <HTTPSend+0x2e0>
    2860:	64 e6       	ldi	r22, 0x64	; 100
    2862:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2866:	9a 30       	cpi	r25, 0x0A	; 10
    2868:	70 f1       	brcs	.+92     	; 0x28c6 <HTTPSend+0x31c>
    286a:	ed 81       	ldd	r30, Y+5	; 0x05
    286c:	fe 81       	ldd	r31, Y+6	; 0x06
    286e:	ec 0d       	add	r30, r12
    2870:	fd 1d       	adc	r31, r13
    2872:	89 2f       	mov	r24, r25
    2874:	6a e0       	ldi	r22, 0x0A	; 10
    2876:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    287a:	80 5d       	subi	r24, 0xD0	; 208
    287c:	80 83       	st	Z, r24
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	9e 81       	ldd	r25, Y+6	; 0x06
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	1e c0       	rjmp	.+60     	; 0x28c6 <HTTPSend+0x31c>
							else if(ds18b20 /100 != 0) {dataBuffer[i++] = ds18b20 /100 + 0x30;	dataBuffer[i++] = (ds18b20 %100) /10 + 0x30;}
    288a:	ed 81       	ldd	r30, Y+5	; 0x05
    288c:	fe 81       	ldd	r31, Y+6	; 0x06
    288e:	ec 0d       	add	r30, r12
    2890:	fd 1d       	adc	r31, r13
    2892:	64 e6       	ldi	r22, 0x64	; 100
    2894:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2898:	80 5d       	subi	r24, 0xD0	; 208
    289a:	80 83       	st	Z, r24
    289c:	4d 81       	ldd	r20, Y+5	; 0x05
    289e:	5e 81       	ldd	r21, Y+6	; 0x06
    28a0:	4f 5f       	subi	r20, 0xFF	; 255
    28a2:	5f 4f       	sbci	r21, 0xFF	; 255
    28a4:	f6 01       	movw	r30, r12
    28a6:	e4 0f       	add	r30, r20
    28a8:	f5 1f       	adc	r31, r21
    28aa:	80 91 31 06 	lds	r24, 0x0631
    28ae:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    28b2:	89 2f       	mov	r24, r25
    28b4:	6a e0       	ldi	r22, 0x0A	; 10
    28b6:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    28ba:	80 5d       	subi	r24, 0xD0	; 208
    28bc:	80 83       	st	Z, r24
    28be:	da 01       	movw	r26, r20
    28c0:	11 96       	adiw	r26, 0x01	; 1
    28c2:	be 83       	std	Y+6, r27	; 0x06
    28c4:	ad 83       	std	Y+5, r26	; 0x05
							dataBuffer[i++] = (ds18b20 %100) %10 + 0x30;	
    28c6:	ed 81       	ldd	r30, Y+5	; 0x05
    28c8:	fe 81       	ldd	r31, Y+6	; 0x06
    28ca:	ec 0d       	add	r30, r12
    28cc:	fd 1d       	adc	r31, r13
    28ce:	80 91 31 06 	lds	r24, 0x0631
    28d2:	64 e6       	ldi	r22, 0x64	; 100
    28d4:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    28d8:	89 2f       	mov	r24, r25
    28da:	6a e0       	ldi	r22, 0x0A	; 10
    28dc:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    28e0:	90 5d       	subi	r25, 0xD0	; 208
    28e2:	90 83       	st	Z, r25
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	01 96       	adiw	r24, 0x01	; 1
							dataBuffer[i++] = '.';
    28ea:	f6 01       	movw	r30, r12
    28ec:	e8 0f       	add	r30, r24
    28ee:	f9 1f       	adc	r31, r25
    28f0:	20 82       	st	Z, r2
    28f2:	ac 01       	movw	r20, r24
    28f4:	4f 5f       	subi	r20, 0xFF	; 255
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255
							dataBuffer[i++] = digit/10 + 0x30;
    28f8:	f6 01       	movw	r30, r12
    28fa:	e4 0f       	add	r30, r20
    28fc:	f5 1f       	adc	r31, r21
    28fe:	80 91 2f 06 	lds	r24, 0x062F
    2902:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    2906:	80 5d       	subi	r24, 0xD0	; 208
    2908:	80 83       	st	Z, r24
    290a:	4f 5f       	subi	r20, 0xFF	; 255
    290c:	5f 4f       	sbci	r21, 0xFF	; 255
							dataBuffer[i++] = digit%10 + 0x30;
    290e:	f6 01       	movw	r30, r12
    2910:	e4 0f       	add	r30, r20
    2912:	f5 1f       	adc	r31, r21
    2914:	80 91 2f 06 	lds	r24, 0x062F
    2918:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    291c:	90 5d       	subi	r25, 0xD0	; 208
    291e:	90 83       	st	Z, r25
    2920:	fa 01       	movw	r30, r20
    2922:	31 96       	adiw	r30, 0x01	; 1
    2924:	fe 83       	std	Y+6, r31	; 0x06
    2926:	ed 83       	std	Y+5, r30	; 0x05
							//dataBuffer[i++] = ' ';
							srcDataIdx+=2;
    2928:	89 01       	movw	r16, r18
    292a:	0e 5f       	subi	r16, 0xFE	; 254
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	c1 c1       	rjmp	.+898    	; 0x2cb2 <HTTPSend+0x708>
						}	
					//Truong hop tim duoc CD
					else
					if((pgm_read_byte(progdata + srcDataIdx) == 'C') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'D'))
    2930:	fa 01       	movw	r30, r20
    2932:	94 91       	lpm	r25, Z+
    2934:	93 34       	cpi	r25, 0x43	; 67
    2936:	09 f0       	breq	.+2      	; 0x293a <HTTPSend+0x390>
    2938:	cf c0       	rjmp	.+414    	; 0x2ad8 <HTTPSend+0x52e>
    293a:	f9 01       	movw	r30, r18
    293c:	31 96       	adiw	r30, 0x01	; 1
    293e:	ee 0d       	add	r30, r14
    2940:	ff 1d       	adc	r31, r15
    2942:	e4 91       	lpm	r30, Z+
    2944:	e4 34       	cpi	r30, 0x44	; 68
    2946:	09 f0       	breq	.+2      	; 0x294a <HTTPSend+0x3a0>
    2948:	c7 c0       	rjmp	.+398    	; 0x2ad8 <HTTPSend+0x52e>
						{
							//dataBuffer[i++] = ' ';
							if(countdown_min[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30] != 0 && state_count[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30] != 255)	// Kiem tra xem co hen h hay khong
    294a:	2e 5f       	subi	r18, 0xFE	; 254
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	2e 0d       	add	r18, r14
    2950:	3f 1d       	adc	r19, r15
    2952:	f9 01       	movw	r30, r18
    2954:	84 91       	lpm	r24, Z+
    2956:	e8 2f       	mov	r30, r24
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	f0 97       	sbiw	r30, 0x30	; 48
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	ee 5c       	subi	r30, 0xCE	; 206
    2962:	f9 4f       	sbci	r31, 0xF9	; 249
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	09 f4       	brne	.+2      	; 0x296e <HTTPSend+0x3c4>
    296c:	a2 c1       	rjmp	.+836    	; 0x2cb2 <HTTPSend+0x708>
    296e:	f9 01       	movw	r30, r18
    2970:	84 91       	lpm	r24, Z+
    2972:	ed e3       	ldi	r30, 0x3D	; 61
    2974:	f6 e0       	ldi	r31, 0x06	; 6
    2976:	e8 0f       	add	r30, r24
    2978:	f1 1d       	adc	r31, r1
    297a:	f0 97       	sbiw	r30, 0x30	; 48
    297c:	80 81       	ld	r24, Z
    297e:	8f 3f       	cpi	r24, 0xFF	; 255
    2980:	09 f4       	brne	.+2      	; 0x2984 <HTTPSend+0x3da>
    2982:	97 c1       	rjmp	.+814    	; 0x2cb2 <HTTPSend+0x708>
								{
								change_uint16(countdown_min[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30]);
    2984:	f9 01       	movw	r30, r18
    2986:	24 91       	lpm	r18, Z+
    2988:	e2 2f       	mov	r30, r18
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	f0 97       	sbiw	r30, 0x30	; 48
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	ee 5c       	subi	r30, 0xCE	; 206
    2994:	f9 4f       	sbci	r31, 0xF9	; 249
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	0e 94 ac 12 	call	0x2558	; 0x2558 <change_uint16>
								if(val_cnghin != 0) {dataBuffer[i++] = val_cnghin + 0x30; dataBuffer[i++] = val_nghin + 0x30; dataBuffer[i++] = val_tram + 0x30; dataBuffer[i++] = val_chuc + 0x30;}
    299e:	80 91 b4 00 	lds	r24, 0x00B4
    29a2:	88 23       	and	r24, r24
    29a4:	61 f1       	breq	.+88     	; 0x29fe <HTTPSend+0x454>
    29a6:	ed 81       	ldd	r30, Y+5	; 0x05
    29a8:	fe 81       	ldd	r31, Y+6	; 0x06
    29aa:	ec 0d       	add	r30, r12
    29ac:	fd 1d       	adc	r31, r13
    29ae:	80 5d       	subi	r24, 0xD0	; 208
    29b0:	80 83       	st	Z, r24
    29b2:	2d 81       	ldd	r18, Y+5	; 0x05
    29b4:	3e 81       	ldd	r19, Y+6	; 0x06
    29b6:	2f 5f       	subi	r18, 0xFF	; 255
    29b8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ba:	f6 01       	movw	r30, r12
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	80 91 b3 00 	lds	r24, 0x00B3
    29c4:	80 5d       	subi	r24, 0xD0	; 208
    29c6:	80 83       	st	Z, r24
    29c8:	2f 5f       	subi	r18, 0xFF	; 255
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	f6 01       	movw	r30, r12
    29ce:	e2 0f       	add	r30, r18
    29d0:	f3 1f       	adc	r31, r19
    29d2:	80 91 b0 00 	lds	r24, 0x00B0
    29d6:	80 5d       	subi	r24, 0xD0	; 208
    29d8:	80 83       	st	Z, r24
    29da:	2f 5f       	subi	r18, 0xFF	; 255
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	f6 01       	movw	r30, r12
    29e0:	e2 0f       	add	r30, r18
    29e2:	f3 1f       	adc	r31, r19
    29e4:	80 91 b1 00 	lds	r24, 0x00B1
    29e8:	80 5d       	subi	r24, 0xD0	; 208
    29ea:	80 83       	st	Z, r24
    29ec:	c9 01       	movw	r24, r18
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
								if(val_cnghin == 0 && val_nghin !=0) {dataBuffer[i++] = val_nghin + 0x30; dataBuffer[i++] = val_tram + 0x30; dataBuffer[i++] = val_chuc + 0x30;}
    29f4:	80 91 b4 00 	lds	r24, 0x00B4
    29f8:	88 23       	and	r24, r24
    29fa:	09 f0       	breq	.+2      	; 0x29fe <HTTPSend+0x454>
    29fc:	5f c0       	rjmp	.+190    	; 0x2abc <HTTPSend+0x512>
    29fe:	80 91 b3 00 	lds	r24, 0x00B3
    2a02:	88 23       	and	r24, r24
    2a04:	31 f1       	breq	.+76     	; 0x2a52 <HTTPSend+0x4a8>
    2a06:	ed 81       	ldd	r30, Y+5	; 0x05
    2a08:	fe 81       	ldd	r31, Y+6	; 0x06
    2a0a:	ec 0d       	add	r30, r12
    2a0c:	fd 1d       	adc	r31, r13
    2a0e:	80 5d       	subi	r24, 0xD0	; 208
    2a10:	80 83       	st	Z, r24
    2a12:	2d 81       	ldd	r18, Y+5	; 0x05
    2a14:	3e 81       	ldd	r19, Y+6	; 0x06
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	f6 01       	movw	r30, r12
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f3 1f       	adc	r31, r19
    2a20:	80 91 b0 00 	lds	r24, 0x00B0
    2a24:	80 5d       	subi	r24, 0xD0	; 208
    2a26:	80 83       	st	Z, r24
    2a28:	2f 5f       	subi	r18, 0xFF	; 255
    2a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2c:	f6 01       	movw	r30, r12
    2a2e:	e2 0f       	add	r30, r18
    2a30:	f3 1f       	adc	r31, r19
    2a32:	80 91 b1 00 	lds	r24, 0x00B1
    2a36:	80 5d       	subi	r24, 0xD0	; 208
    2a38:	80 83       	st	Z, r24
    2a3a:	d9 01       	movw	r26, r18
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	be 83       	std	Y+6, r27	; 0x06
    2a40:	ad 83       	std	Y+5, r26	; 0x05
								if(val_cnghin == 0 && val_nghin ==0 && val_tram !=0 ) {dataBuffer[i++] = val_tram + 0x30; dataBuffer[i++] = val_chuc + 0x30;}	
    2a42:	80 91 b4 00 	lds	r24, 0x00B4
    2a46:	88 23       	and	r24, r24
    2a48:	c9 f5       	brne	.+114    	; 0x2abc <HTTPSend+0x512>
    2a4a:	80 91 b3 00 	lds	r24, 0x00B3
    2a4e:	88 23       	and	r24, r24
    2a50:	a9 f5       	brne	.+106    	; 0x2abc <HTTPSend+0x512>
    2a52:	80 91 b0 00 	lds	r24, 0x00B0
    2a56:	88 23       	and	r24, r24
    2a58:	e9 f0       	breq	.+58     	; 0x2a94 <HTTPSend+0x4ea>
    2a5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2a5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2a5e:	ec 0d       	add	r30, r12
    2a60:	fd 1d       	adc	r31, r13
    2a62:	80 5d       	subi	r24, 0xD0	; 208
    2a64:	80 83       	st	Z, r24
    2a66:	2d 81       	ldd	r18, Y+5	; 0x05
    2a68:	3e 81       	ldd	r19, Y+6	; 0x06
    2a6a:	2f 5f       	subi	r18, 0xFF	; 255
    2a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6e:	f6 01       	movw	r30, r12
    2a70:	e2 0f       	add	r30, r18
    2a72:	f3 1f       	adc	r31, r19
    2a74:	80 91 b1 00 	lds	r24, 0x00B1
    2a78:	80 5d       	subi	r24, 0xD0	; 208
    2a7a:	80 83       	st	Z, r24
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	31 96       	adiw	r30, 0x01	; 1
    2a80:	fe 83       	std	Y+6, r31	; 0x06
    2a82:	ed 83       	std	Y+5, r30	; 0x05
								if(val_cnghin == 0 && val_nghin ==0 && val_tram ==0 && val_chuc != 0 ) dataBuffer[i++] = val_chuc + 0x30;
    2a84:	80 91 b4 00 	lds	r24, 0x00B4
    2a88:	88 23       	and	r24, r24
    2a8a:	c1 f4       	brne	.+48     	; 0x2abc <HTTPSend+0x512>
    2a8c:	80 91 b3 00 	lds	r24, 0x00B3
    2a90:	88 23       	and	r24, r24
    2a92:	a1 f4       	brne	.+40     	; 0x2abc <HTTPSend+0x512>
    2a94:	80 91 b0 00 	lds	r24, 0x00B0
    2a98:	88 23       	and	r24, r24
    2a9a:	81 f4       	brne	.+32     	; 0x2abc <HTTPSend+0x512>
    2a9c:	80 91 b1 00 	lds	r24, 0x00B1
    2aa0:	88 23       	and	r24, r24
    2aa2:	61 f0       	breq	.+24     	; 0x2abc <HTTPSend+0x512>
    2aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    2aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa8:	ec 0d       	add	r30, r12
    2aaa:	fd 1d       	adc	r31, r13
    2aac:	80 5d       	subi	r24, 0xD0	; 208
    2aae:	80 83       	st	Z, r24
    2ab0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab4:	2f 5f       	subi	r18, 0xFF	; 255
    2ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab8:	3e 83       	std	Y+6, r19	; 0x06
    2aba:	2d 83       	std	Y+5, r18	; 0x05
								dataBuffer[i++] = val_dvi + 0x30;	
    2abc:	ed 81       	ldd	r30, Y+5	; 0x05
    2abe:	fe 81       	ldd	r31, Y+6	; 0x06
    2ac0:	ec 0d       	add	r30, r12
    2ac2:	fd 1d       	adc	r31, r13
    2ac4:	80 91 b2 00 	lds	r24, 0x00B2
    2ac8:	80 5d       	subi	r24, 0xD0	; 208
    2aca:	80 83       	st	Z, r24
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
								}
							//dataBuffer[i++] = ' ';
							srcDataIdx+=3;
    2ad6:	ed c0       	rjmp	.+474    	; 0x2cb2 <HTTPSend+0x708>
						}
					//Truong hop tim duoc TS
					else
					if((pgm_read_byte(progdata + srcDataIdx) == 'T') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'S'))
    2ad8:	fa 01       	movw	r30, r20
    2ada:	94 91       	lpm	r25, Z+
    2adc:	94 35       	cpi	r25, 0x54	; 84
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <HTTPSend+0x538>
    2ae0:	44 c0       	rjmp	.+136    	; 0x2b6a <HTTPSend+0x5c0>
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	31 96       	adiw	r30, 0x01	; 1
    2ae6:	ee 0d       	add	r30, r14
    2ae8:	ff 1d       	adc	r31, r15
    2aea:	e4 91       	lpm	r30, Z+
    2aec:	e3 35       	cpi	r30, 0x53	; 83
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <HTTPSend+0x548>
    2af0:	3c c0       	rjmp	.+120    	; 0x2b6a <HTTPSend+0x5c0>
						{
							//dataBuffer[i++] = ' ';
							//printf("Sent state device %d :countdown_min %d countdown_state %d and %d\r\n",pgm_read_byte(progdata + srcDataIdx + 2)-0x30,countdown_min[pgm_read_byte(progdata + srcDataIdx + 2)-0x30],state_count[pgm_read_byte(progdata + srcDataIdx + 2)-0x30],test_out_state(pgm_read_byte(progdata + srcDataIdx + 2)-0x30));
							switch(test_out_state(pgm_read_byte(progdata + srcDataIdx + 2) - 0x30))	//Kiem tra trang thai neu co hen gio
    2af2:	2e 5f       	subi	r18, 0xFE	; 254
    2af4:	3f 4f       	sbci	r19, 0xFF	; 255
    2af6:	f7 01       	movw	r30, r14
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	84 91       	lpm	r24, Z+
    2afe:	80 53       	subi	r24, 0x30	; 48
    2b00:	0e 94 68 29 	call	0x52d0	; 0x52d0 <test_out_state>
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	b9 f0       	breq	.+46     	; 0x2b36 <HTTPSend+0x58c>
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <HTTPSend+0x564>
    2b0c:	d2 c0       	rjmp	.+420    	; 0x2cb2 <HTTPSend+0x708>
							{
								case 2:	dataBuffer[i++] = 'O';	dataBuffer[i++] = 'N';	break;
    2b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2b10:	fe 81       	ldd	r31, Y+6	; 0x06
    2b12:	ec 0d       	add	r30, r12
    2b14:	fd 1d       	adc	r31, r13
    2b16:	2f e4       	ldi	r18, 0x4F	; 79
    2b18:	20 83       	st	Z, r18
    2b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b1c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b1e:	2f 5f       	subi	r18, 0xFF	; 255
    2b20:	3f 4f       	sbci	r19, 0xFF	; 255
    2b22:	f6 01       	movw	r30, r12
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	8e e4       	ldi	r24, 0x4E	; 78
    2b2a:	80 83       	st	Z, r24
    2b2c:	d9 01       	movw	r26, r18
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	be 83       	std	Y+6, r27	; 0x06
    2b32:	ad 83       	std	Y+5, r26	; 0x05
    2b34:	be c0       	rjmp	.+380    	; 0x2cb2 <HTTPSend+0x708>
								case 1:	dataBuffer[i++] = 'O';	dataBuffer[i++] = 'F';	dataBuffer[i++] = 'F';	break;
    2b36:	ed 81       	ldd	r30, Y+5	; 0x05
    2b38:	fe 81       	ldd	r31, Y+6	; 0x06
    2b3a:	ec 0d       	add	r30, r12
    2b3c:	fd 1d       	adc	r31, r13
    2b3e:	bf e4       	ldi	r27, 0x4F	; 79
    2b40:	b0 83       	st	Z, r27
    2b42:	2d 81       	ldd	r18, Y+5	; 0x05
    2b44:	3e 81       	ldd	r19, Y+6	; 0x06
    2b46:	2f 5f       	subi	r18, 0xFF	; 255
    2b48:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4a:	f6 01       	movw	r30, r12
    2b4c:	e2 0f       	add	r30, r18
    2b4e:	f3 1f       	adc	r31, r19
    2b50:	86 e4       	ldi	r24, 0x46	; 70
    2b52:	80 83       	st	Z, r24
    2b54:	2f 5f       	subi	r18, 0xFF	; 255
    2b56:	3f 4f       	sbci	r19, 0xFF	; 255
    2b58:	f6 01       	movw	r30, r12
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	80 83       	st	Z, r24
    2b60:	d9 01       	movw	r26, r18
    2b62:	11 96       	adiw	r26, 0x01	; 1
    2b64:	be 83       	std	Y+6, r27	; 0x06
    2b66:	ad 83       	std	Y+5, r26	; 0x05
								//case 0:	dataBuffer[i++] = ' ';	dataBuffer[i++] = ' ';	break;	//Khong co hen gio
								default: break;
							}
							//dataBuffer[i++] = ' ';
							srcDataIdx+=3;
    2b68:	a4 c0       	rjmp	.+328    	; 0x2cb2 <HTTPSend+0x708>
						}
					//Truong hop tim duoc TA
					else
					if((pgm_read_byte(progdata + srcDataIdx) == 'T') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'A'))
    2b6a:	fa 01       	movw	r30, r20
    2b6c:	44 91       	lpm	r20, Z+
    2b6e:	44 35       	cpi	r20, 0x54	; 84
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <HTTPSend+0x5ca>
    2b72:	88 c0       	rjmp	.+272    	; 0x2c84 <HTTPSend+0x6da>
    2b74:	f9 01       	movw	r30, r18
    2b76:	31 96       	adiw	r30, 0x01	; 1
    2b78:	ee 0d       	add	r30, r14
    2b7a:	ff 1d       	adc	r31, r15
    2b7c:	e4 91       	lpm	r30, Z+
    2b7e:	e1 34       	cpi	r30, 0x41	; 65
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <HTTPSend+0x5da>
    2b82:	80 c0       	rjmp	.+256    	; 0x2c84 <HTTPSend+0x6da>
						{
												
							//dataBuffer[i++] = ' ';
							if(auto_off[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30] != 0)
    2b84:	2e 5f       	subi	r18, 0xFE	; 254
    2b86:	3f 4f       	sbci	r19, 0xFF	; 255
    2b88:	c7 01       	movw	r24, r14
    2b8a:	82 0f       	add	r24, r18
    2b8c:	93 1f       	adc	r25, r19
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	fc 01       	movw	r30, r24
    2b94:	84 91       	lpm	r24, Z+
    2b96:	e8 e5       	ldi	r30, 0x58	; 88
    2b98:	f6 e0       	ldi	r31, 0x06	; 6
    2b9a:	e8 0f       	add	r30, r24
    2b9c:	f1 1d       	adc	r31, r1
    2b9e:	f0 97       	sbiw	r30, 0x30	; 48
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <HTTPSend+0x5fe>
    2ba6:	85 c0       	rjmp	.+266    	; 0x2cb2 <HTTPSend+0x708>
								{
								change_number(auto_off[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30]);
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	84 91       	lpm	r24, Z+
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	3c 83       	std	Y+4, r19	; 0x04
    2bb4:	2b 83       	std	Y+3, r18	; 0x03
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	e8 5a       	subi	r30, 0xA8	; 168
    2bba:	f9 4f       	sbci	r31, 0xF9	; 249
    2bbc:	f0 97       	sbiw	r30, 0x30	; 48
    2bbe:	80 81       	ld	r24, Z
    2bc0:	0e 94 c7 12 	call	0x258e	; 0x258e <change_number>
								if(auto_state[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30] == 240) dataBuffer[i++] = 'H';
    2bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc8:	e3 5a       	subi	r30, 0xA3	; 163
    2bca:	f9 4f       	sbci	r31, 0xF9	; 249
    2bcc:	f0 97       	sbiw	r30, 0x30	; 48
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 3f       	cpi	r24, 0xF0	; 240
    2bd2:	61 f4       	brne	.+24     	; 0x2bec <HTTPSend+0x642>
    2bd4:	ed 81       	ldd	r30, Y+5	; 0x05
    2bd6:	fe 81       	ldd	r31, Y+6	; 0x06
    2bd8:	ec 0d       	add	r30, r12
    2bda:	fd 1d       	adc	r31, r13
    2bdc:	38 e4       	ldi	r19, 0x48	; 72
    2bde:	30 83       	st	Z, r19
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	16 c0       	rjmp	.+44     	; 0x2c18 <HTTPSend+0x66e>
								else if(auto_state[pgm_read_byte(progdata + srcDataIdx + 2) - 0x30] == 15) dataBuffer[i++] = 'L';
    2bec:	e9 81       	ldd	r30, Y+1	; 0x01
    2bee:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf0:	84 91       	lpm	r24, Z+
    2bf2:	ed e5       	ldi	r30, 0x5D	; 93
    2bf4:	f6 e0       	ldi	r31, 0x06	; 6
    2bf6:	e8 0f       	add	r30, r24
    2bf8:	f1 1d       	adc	r31, r1
    2bfa:	f0 97       	sbiw	r30, 0x30	; 48
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8f 30       	cpi	r24, 0x0F	; 15
    2c00:	59 f4       	brne	.+22     	; 0x2c18 <HTTPSend+0x66e>
    2c02:	ed 81       	ldd	r30, Y+5	; 0x05
    2c04:	fe 81       	ldd	r31, Y+6	; 0x06
    2c06:	ec 0d       	add	r30, r12
    2c08:	fd 1d       	adc	r31, r13
    2c0a:	2c e4       	ldi	r18, 0x4C	; 76
    2c0c:	20 83       	st	Z, r18
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
								dataBuffer[i++] = ' ';
    2c18:	ed 81       	ldd	r30, Y+5	; 0x05
    2c1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2c1c:	ec 0d       	add	r30, r12
    2c1e:	fd 1d       	adc	r31, r13
    2c20:	90 e2       	ldi	r25, 0x20	; 32
    2c22:	90 83       	st	Z, r25
    2c24:	2d 81       	ldd	r18, Y+5	; 0x05
    2c26:	3e 81       	ldd	r19, Y+6	; 0x06
    2c28:	2f 5f       	subi	r18, 0xFF	; 255
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
								if(val_tram== 0 && val_chuc != 0)	dataBuffer[i++] = val_chuc + 0x30;
    2c2c:	80 91 b0 00 	lds	r24, 0x00B0
    2c30:	88 23       	and	r24, r24
    2c32:	61 f4       	brne	.+24     	; 0x2c4c <HTTPSend+0x6a2>
    2c34:	80 91 b1 00 	lds	r24, 0x00B1
    2c38:	88 23       	and	r24, r24
    2c3a:	c1 f0       	breq	.+48     	; 0x2c6c <HTTPSend+0x6c2>
    2c3c:	f6 01       	movw	r30, r12
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f3 1f       	adc	r31, r19
    2c42:	80 5d       	subi	r24, 0xD0	; 208
    2c44:	80 83       	st	Z, r24
    2c46:	2f 5f       	subi	r18, 0xFF	; 255
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	10 c0       	rjmp	.+32     	; 0x2c6c <HTTPSend+0x6c2>
								else if(val_tram != 0) {dataBuffer[i++] = val_tram + 0x30;	dataBuffer[i++] = val_chuc + 0x30;}
    2c4c:	f6 01       	movw	r30, r12
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f3 1f       	adc	r31, r19
    2c52:	80 5d       	subi	r24, 0xD0	; 208
    2c54:	80 83       	st	Z, r24
    2c56:	2f 5f       	subi	r18, 0xFF	; 255
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	f6 01       	movw	r30, r12
    2c5c:	e2 0f       	add	r30, r18
    2c5e:	f3 1f       	adc	r31, r19
    2c60:	80 91 b1 00 	lds	r24, 0x00B1
    2c64:	80 5d       	subi	r24, 0xD0	; 208
    2c66:	80 83       	st	Z, r24
    2c68:	2f 5f       	subi	r18, 0xFF	; 255
    2c6a:	3f 4f       	sbci	r19, 0xFF	; 255
								dataBuffer[i++] = val_dvi + 0x30;											
    2c6c:	f6 01       	movw	r30, r12
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 91 b2 00 	lds	r24, 0x00B2
    2c76:	80 5d       	subi	r24, 0xD0	; 208
    2c78:	80 83       	st	Z, r24
    2c7a:	d9 01       	movw	r26, r18
    2c7c:	11 96       	adiw	r26, 0x01	; 1
    2c7e:	be 83       	std	Y+6, r27	; 0x06
    2c80:	ad 83       	std	Y+5, r26	; 0x05
								}
							//dataBuffer[i++] = ' ';
							srcDataIdx+=3;
    2c82:	17 c0       	rjmp	.+46     	; 0x2cb2 <HTTPSend+0x708>
						}						
					//Cac truong hop con lai
					else
						dataBuffer[i++] = tmpChr;																																					
    2c84:	ed 81       	ldd	r30, Y+5	; 0x05
    2c86:	fe 81       	ldd	r31, Y+6	; 0x06
    2c88:	ec 0d       	add	r30, r12
    2c8a:	fd 1d       	adc	r31, r13
    2c8c:	80 83       	st	Z, r24
    2c8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c90:	fe 81       	ldd	r31, Y+6	; 0x06
    2c92:	31 96       	adiw	r30, 0x01	; 1
    2c94:	fe 83       	std	Y+6, r31	; 0x06
    2c96:	ed 83       	std	Y+5, r30	; 0x05
	}
	while(srcDataIdx < dataLen){
		i = 0;
		while(i<MAX_SEGMENT_SIZE)
			{
			tmpChr = pgm_read_byte(progdata + srcDataIdx++);
    2c98:	89 01       	movw	r16, r18
    2c9a:	0b c0       	rjmp	.+22     	; 0x2cb2 <HTTPSend+0x708>
					//Cac truong hop con lai
					else
						dataBuffer[i++] = tmpChr;																																					
				}
			else
				dataBuffer[i++] = tmpChr;	//Copy data to tcp data buffer
    2c9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2c9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca0:	ec 0d       	add	r30, r12
    2ca2:	fd 1d       	adc	r31, r13
    2ca4:	80 83       	st	Z, r24
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
	}
	while(srcDataIdx < dataLen){
		i = 0;
		while(i<MAX_SEGMENT_SIZE)
			{
			tmpChr = pgm_read_byte(progdata + srcDataIdx++);
    2cb0:	89 01       	movw	r16, r18
					else
						dataBuffer[i++] = tmpChr;																																					
				}
			else
				dataBuffer[i++] = tmpChr;	//Copy data to tcp data buffer
			if(srcDataIdx==dataLen)
    2cb2:	0a 15       	cp	r16, r10
    2cb4:	1b 05       	cpc	r17, r11
    2cb6:	c9 f4       	brne	.+50     	; 0x2cea <HTTPSend+0x740>
    2cb8:	ad 81       	ldd	r26, Y+5	; 0x05
    2cba:	be 81       	ldd	r27, Y+6	; 0x06
    2cbc:	ba 83       	std	Y+2, r27	; 0x02
    2cbe:	a9 83       	std	Y+1, r26	; 0x01
    2cc0:	22 c0       	rjmp	.+68     	; 0x2d06 <HTTPSend+0x75c>
	extern uint8_t ds18b20, digit;
	
	//unsigned char temp_adc;
	Flags = TCP_PSH_FLAG;

	Flags = TCP_PSH_FLAG;
    2cc2:	99 24       	eor	r9, r9
    2cc4:	68 94       	set
    2cc6:	93 f8       	bld	r9, 3
	dataBuffer = ethGetBuffer() + ETH_HEADER_LEN + IP_HEADER_LEN + TCP_HEADER_LEN;
	if(dataLen == 0){
    2cc8:	00 e0       	ldi	r16, 0x00	; 0
    2cca:	10 e0       	ldi	r17, 0x00	; 0
		Flags |= TCP_ACK_FLAG;
		if(endData){
			if(srcDataIdx == dataLen){
				Flags |= TCP_FIN_FLAG;
    2ccc:	44 24       	eor	r4, r4
    2cce:	55 24       	eor	r5, r5
    2cd0:	5a 82       	std	Y+2, r5	; 0x02
    2cd2:	49 82       	std	Y+1, r4	; 0x01
						{												
							//dataBuffer[i++] = ' ';
							if(ds18b20 /100 == 0 && (ds18b20 %100) /10 != 0)	dataBuffer[i++] = (ds18b20 %100) /10 + 0x30;
							else if(ds18b20 /100 != 0) {dataBuffer[i++] = ds18b20 /100 + 0x30;	dataBuffer[i++] = (ds18b20 %100) /10 + 0x30;}
							dataBuffer[i++] = (ds18b20 %100) %10 + 0x30;	
							dataBuffer[i++] = '.';
    2cd4:	0f 2e       	mov	r0, r31
    2cd6:	fe e2       	ldi	r31, 0x2E	; 46
    2cd8:	2f 2e       	mov	r2, r31
    2cda:	f0 2d       	mov	r31, r0
					//Truong hop tim duoc TI
						if((pgm_read_byte(progdata + srcDataIdx) == 'T') && (pgm_read_byte(progdata + srcDataIdx + 1) == 'I'))
							{									
								//dataBuffer[i++] = ' '; 
								if(Hour/10 != 0)	dataBuffer[i++] = Hour/10 + 0x30;	dataBuffer[i++] = Hour%10 + 0x30;
								dataBuffer[i++]=':';
    2cdc:	0f 2e       	mov	r0, r31
    2cde:	fa e3       	ldi	r31, 0x3A	; 58
    2ce0:	8f 2e       	mov	r8, r31
    2ce2:	f0 2d       	mov	r31, r0
    2ce4:	5e 82       	std	Y+6, r5	; 0x06
    2ce6:	4d 82       	std	Y+5, r4	; 0x05
    2ce8:	99 cc       	rjmp	.-1742   	; 0x261c <HTTPSend+0x72>
		}
		TCPPackedSend(pSession,Flags,0,dataBuffer);
	}
	while(srcDataIdx < dataLen){
		i = 0;
		while(i<MAX_SEGMENT_SIZE)
    2cea:	ed 81       	ldd	r30, Y+5	; 0x05
    2cec:	fe 81       	ldd	r31, Y+6	; 0x06
    2cee:	23 e0       	ldi	r18, 0x03	; 3
    2cf0:	e8 3e       	cpi	r30, 0xE8	; 232
    2cf2:	f2 07       	cpc	r31, r18
    2cf4:	08 f4       	brcc	.+2      	; 0x2cf8 <HTTPSend+0x74e>
    2cf6:	92 cc       	rjmp	.-1756   	; 0x261c <HTTPSend+0x72>
    2cf8:	fa 83       	std	Y+2, r31	; 0x02
    2cfa:	e9 83       	std	Y+1, r30	; 0x01
    2cfc:	04 c0       	rjmp	.+8      	; 0x2d06 <HTTPSend+0x75c>
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
			else
				dataBuffer[i++] = tmpChr;	//Copy data to tcp data buffer
			if(srcDataIdx==dataLen)
				break;
		}
		Flags |= TCP_ACK_FLAG;
    2d06:	90 e1       	ldi	r25, 0x10	; 16
    2d08:	99 2a       	or	r9, r25
		if(endData){
    2d0a:	33 20       	and	r3, r3
    2d0c:	89 f0       	breq	.+34     	; 0x2d30 <HTTPSend+0x786>
			if(srcDataIdx == dataLen){
    2d0e:	0a 15       	cp	r16, r10
    2d10:	1b 05       	cpc	r17, r11
    2d12:	71 f4       	brne	.+28     	; 0x2d30 <HTTPSend+0x786>
    2d14:	09 81       	ldd	r16, Y+1	; 0x01
    2d16:	1a 81       	ldd	r17, Y+2	; 0x02
				Flags |= TCP_FIN_FLAG;
				pSession->sesState = TCP_STATE_FIN_WAIT1;
    2d18:	85 e0       	ldi	r24, 0x05	; 5
    2d1a:	d3 01       	movw	r26, r6
    2d1c:	50 96       	adiw	r26, 0x10	; 16
    2d1e:	8c 93       	st	X, r24
				break;
		}
		Flags |= TCP_ACK_FLAG;
		if(endData){
			if(srcDataIdx == dataLen){
				Flags |= TCP_FIN_FLAG;
    2d20:	69 2d       	mov	r22, r9
    2d22:	61 60       	ori	r22, 0x01	; 1
				pSession->sesState = TCP_STATE_FIN_WAIT1;
			}
		}
		TCPPackedSend(pSession,Flags,i,dataBuffer);
    2d24:	c3 01       	movw	r24, r6
    2d26:	a8 01       	movw	r20, r16
    2d28:	96 01       	movw	r18, r12
    2d2a:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    2d2e:	0a c0       	rjmp	.+20     	; 0x2d44 <HTTPSend+0x79a>
    2d30:	c3 01       	movw	r24, r6
    2d32:	69 2d       	mov	r22, r9
    2d34:	49 81       	ldd	r20, Y+1	; 0x01
    2d36:	5a 81       	ldd	r21, Y+2	; 0x02
    2d38:	96 01       	movw	r18, r12
    2d3a:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
				pSession->sesState = TCP_STATE_FIN_WAIT1;
			}
		}
		TCPPackedSend(pSession,Flags,0,dataBuffer);
	}
	while(srcDataIdx < dataLen){
    2d3e:	0a 15       	cp	r16, r10
    2d40:	1b 05       	cpc	r17, r11
    2d42:	30 f2       	brcs	.-116    	; 0x2cd0 <HTTPSend+0x726>
				pSession->sesState = TCP_STATE_FIN_WAIT1;
			}
		}
		TCPPackedSend(pSession,Flags,i,dataBuffer);
	}
}
    2d44:	26 96       	adiw	r28, 0x06	; 6
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	1f 91       	pop	r17
    2d56:	0f 91       	pop	r16
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	df 90       	pop	r13
    2d5e:	cf 90       	pop	r12
    2d60:	bf 90       	pop	r11
    2d62:	af 90       	pop	r10
    2d64:	9f 90       	pop	r9
    2d66:	8f 90       	pop	r8
    2d68:	7f 90       	pop	r7
    2d6a:	6f 90       	pop	r6
    2d6c:	5f 90       	pop	r5
    2d6e:	4f 90       	pop	r4
    2d70:	3f 90       	pop	r3
    2d72:	2f 90       	pop	r2
    2d74:	08 95       	ret

00002d76 <findstr>:
//----------------------------------------------------------------------------
unsigned int findstr(const prog_char progstr[],unsigned char* str,unsigned int len)
{
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
    2d7c:	41 15       	cp	r20, r1
    2d7e:	51 05       	cpc	r21, r1
    2d80:	21 f1       	breq	.+72     	; 0x2dca <findstr+0x54>
    2d82:	a6 2f       	mov	r26, r22
    2d84:	b7 2f       	mov	r27, r23
//----------------------------------------------------------------------------
unsigned int findstr(const prog_char progstr[],unsigned char* str,unsigned int len)
{
	unsigned int i,j;
	i=0;
	j=0;
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
}
//----------------------------------------------------------------------------
unsigned int findstr(const prog_char progstr[],unsigned char* str,unsigned int len)
{
	unsigned int i,j;
	i=0;
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
	j=0;
	while(i<len){
		if(str[i++] != pgm_read_byte(progstr + j++)){
			j = 0;
    2d8e:	c0 e0       	ldi	r28, 0x00	; 0
    2d90:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
		if(str[i++] != pgm_read_byte(progstr + j++)){
    2d92:	1d 91       	ld	r17, X+
    2d94:	fc 01       	movw	r30, r24
    2d96:	e2 0f       	add	r30, r18
    2d98:	f3 1f       	adc	r31, r19
    2d9a:	e4 91       	lpm	r30, Z+
    2d9c:	6f 5f       	subi	r22, 0xFF	; 255
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	1e 17       	cp	r17, r30
    2da2:	19 f4       	brne	.+6      	; 0x2daa <findstr+0x34>
    2da4:	2f 5f       	subi	r18, 0xFF	; 255
    2da6:	3f 4f       	sbci	r19, 0xFF	; 255
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <findstr+0x36>
			j = 0;
    2daa:	9e 01       	movw	r18, r28
		}
		if(pgm_read_byte(progstr + j) == 0){
    2dac:	fc 01       	movw	r30, r24
    2dae:	e2 0f       	add	r30, r18
    2db0:	f3 1f       	adc	r31, r19
    2db2:	e4 91       	lpm	r30, Z+
    2db4:	ee 23       	and	r30, r30
    2db6:	19 f4       	brne	.+6      	; 0x2dbe <findstr+0x48>
			return(i-j);
    2db8:	62 1b       	sub	r22, r18
    2dba:	73 0b       	sbc	r23, r19
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <findstr+0x58>
unsigned int findstr(const prog_char progstr[],unsigned char* str,unsigned int len)
{
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
    2dbe:	64 17       	cp	r22, r20
    2dc0:	75 07       	cpc	r23, r21
    2dc2:	38 f3       	brcs	.-50     	; 0x2d92 <findstr+0x1c>
		}
		if(pgm_read_byte(progstr + j) == 0){
			return(i-j);
		}
	}
	return(-1);
    2dc4:	6f ef       	ldi	r22, 0xFF	; 255
    2dc6:	7f ef       	ldi	r23, 0xFF	; 255
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <findstr+0x58>
    2dca:	6f ef       	ldi	r22, 0xFF	; 255
    2dcc:	7f ef       	ldi	r23, 0xFF	; 255
}
    2dce:	86 2f       	mov	r24, r22
    2dd0:	97 2f       	mov	r25, r23
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	1f 91       	pop	r17
    2dd8:	08 95       	ret

00002dda <findstrdatamem>:
//----------------------------------------------------------------------------
unsigned int findstrdatamem(unsigned char* str1,unsigned char* str2,unsigned int len)
{
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
    2de0:	41 15       	cp	r20, r1
    2de2:	51 05       	cpc	r21, r1
    2de4:	39 f1       	breq	.+78     	; 0x2e34 <findstrdatamem+0x5a>
    2de6:	e6 2f       	mov	r30, r22
    2de8:	f7 2f       	mov	r31, r23
//----------------------------------------------------------------------------
unsigned int findstrdatamem(unsigned char* str1,unsigned char* str2,unsigned int len)
{
	unsigned int i,j;
	i=0;
	j=0;
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
}
//----------------------------------------------------------------------------
unsigned int findstrdatamem(unsigned char* str1,unsigned char* str2,unsigned int len)
{
	unsigned int i,j;
	i=0;
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
	j=0;
	while(i<len){
		if(str2[i++] != str1[j++]){
			j = 0;
    2df2:	c0 e0       	ldi	r28, 0x00	; 0
    2df4:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
		if(str2[i++] != str1[j++]){
    2df6:	11 91       	ld	r17, Z+
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	a6 0f       	add	r26, r22
    2e00:	b7 1f       	adc	r27, r23
    2e02:	ac 91       	ld	r26, X
    2e04:	1a 17       	cp	r17, r26
    2e06:	19 f4       	brne	.+6      	; 0x2e0e <findstrdatamem+0x34>
    2e08:	6f 5f       	subi	r22, 0xFF	; 255
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <findstrdatamem+0x36>
			j = 0;
    2e0e:	be 01       	movw	r22, r28
		}
		if(str1[j] == 0){
    2e10:	dc 01       	movw	r26, r24
    2e12:	a6 0f       	add	r26, r22
    2e14:	b7 1f       	adc	r27, r23
    2e16:	ac 91       	ld	r26, X
    2e18:	aa 23       	and	r26, r26
    2e1a:	19 f4       	brne	.+6      	; 0x2e22 <findstrdatamem+0x48>
			return(i-j);
    2e1c:	26 1b       	sub	r18, r22
    2e1e:	37 0b       	sbc	r19, r23
    2e20:	0e c0       	rjmp	.+28     	; 0x2e3e <findstrdatamem+0x64>
		}
		if(str2[i] == 0){
    2e22:	a0 81       	ld	r26, Z
    2e24:	aa 23       	and	r26, r26
    2e26:	49 f0       	breq	.+18     	; 0x2e3a <findstrdatamem+0x60>
unsigned int findstrdatamem(unsigned char* str1,unsigned char* str2,unsigned int len)
{
	unsigned int i,j;
	i=0;
	j=0;
	while(i<len){
    2e28:	24 17       	cp	r18, r20
    2e2a:	35 07       	cpc	r19, r21
    2e2c:	20 f3       	brcs	.-56     	; 0x2df6 <findstrdatamem+0x1c>
		}
		if(str2[i] == 0){
			return(-1);
		}
	}
	return(-1);
    2e2e:	2f ef       	ldi	r18, 0xFF	; 255
    2e30:	3f ef       	ldi	r19, 0xFF	; 255
    2e32:	05 c0       	rjmp	.+10     	; 0x2e3e <findstrdatamem+0x64>
    2e34:	2f ef       	ldi	r18, 0xFF	; 255
    2e36:	3f ef       	ldi	r19, 0xFF	; 255
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <findstrdatamem+0x64>
		}
		if(str1[j] == 0){
			return(i-j);
		}
		if(str2[i] == 0){
			return(-1);
    2e3a:	2f ef       	ldi	r18, 0xFF	; 255
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
		}
	}
	return(-1);
}
    2e3e:	82 2f       	mov	r24, r18
    2e40:	93 2f       	mov	r25, r19
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	08 95       	ret

00002e4a <get_time>:
unsigned int time_dev;
unsigned char  state_dev, temp_dev;

//Ham lay gia tri thoi gian
void get_time()
{
    2e4a:	2f 92       	push	r2
    2e4c:	3f 92       	push	r3
    2e4e:	4f 92       	push	r4
    2e50:	5f 92       	push	r5
    2e52:	6f 92       	push	r6
    2e54:	7f 92       	push	r7
    2e56:	8f 92       	push	r8
    2e58:	9f 92       	push	r9
    2e5a:	af 92       	push	r10
    2e5c:	bf 92       	push	r11
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
	uint8_t temp = 3;
	state_dev = 240;
    2e6e:	80 ef       	ldi	r24, 0xF0	; 240
    2e70:	80 93 52 05 	sts	0x0552, r24
	if(mData[2] == 70)	{ temp++;	state_dev = 15;}
    2e74:	80 91 55 05 	lds	r24, 0x0555
    2e78:	86 34       	cpi	r24, 0x46	; 70
    2e7a:	29 f4       	brne	.+10     	; 0x2e86 <get_time+0x3c>
    2e7c:	8f e0       	ldi	r24, 0x0F	; 15
    2e7e:	80 93 52 05 	sts	0x0552, r24
    2e82:	14 e0       	ldi	r17, 0x04	; 4
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <get_time+0x3e>
unsigned char  state_dev, temp_dev;

//Ham lay gia tri thoi gian
void get_time()
{
	uint8_t temp = 3;
    2e86:	13 e0       	ldi	r17, 0x03	; 3
	state_dev = 240;
	if(mData[2] == 70)	{ temp++;	state_dev = 15;}
	time_dev = 0;
    2e88:	10 92 1b 06 	sts	0x061B, r1
    2e8c:	10 92 1a 06 	sts	0x061A, r1
	for( uint8_t i = temp; i <= index; i++)
    2e90:	80 90 05 06 	lds	r8, 0x0605
    2e94:	81 16       	cp	r8, r17
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <get_time+0x50>
    2e98:	4d c0       	rjmp	.+154    	; 0x2f34 <get_time+0xea>
    2e9a:	cc 24       	eor	r12, r12
    2e9c:	dd 24       	eor	r13, r13
		{
		time_dev = time_dev + (mData[i] - 48)*pow(10,index-i);
    2e9e:	28 2c       	mov	r2, r8
    2ea0:	33 24       	eor	r3, r3
    2ea2:	c1 2f       	mov	r28, r17
    2ea4:	d0 e0       	ldi	r29, 0x00	; 0
    2ea6:	71 01       	movw	r14, r2
    2ea8:	ec 1a       	sub	r14, r28
    2eaa:	fd 0a       	sbc	r15, r29
    2eac:	b7 01       	movw	r22, r14
    2eae:	88 27       	eor	r24, r24
    2eb0:	77 fd       	sbrc	r23, 7
    2eb2:	80 95       	com	r24
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    2eba:	9b 01       	movw	r18, r22
    2ebc:	ac 01       	movw	r20, r24
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	80 e2       	ldi	r24, 0x20	; 32
    2ec4:	91 e4       	ldi	r25, 0x41	; 65
    2ec6:	0e 94 55 36 	call	0x6caa	; 0x6caa <pow>
    2eca:	06 2f       	mov	r16, r22
    2ecc:	b7 2e       	mov	r11, r23
    2ece:	a8 2e       	mov	r10, r24
    2ed0:	99 2e       	mov	r9, r25
    2ed2:	b6 01       	movw	r22, r12
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <__floatunsisf>
    2edc:	2b 01       	movw	r4, r22
    2ede:	3c 01       	movw	r6, r24
    2ee0:	cd 5a       	subi	r28, 0xAD	; 173
    2ee2:	da 4f       	sbci	r29, 0xFA	; 250
    2ee4:	68 81       	ld	r22, Y
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	60 53       	subi	r22, 0x30	; 48
    2eea:	70 40       	sbci	r23, 0x00	; 0
    2eec:	88 27       	eor	r24, r24
    2eee:	77 fd       	sbrc	r23, 7
    2ef0:	80 95       	com	r24
    2ef2:	98 2f       	mov	r25, r24
    2ef4:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    2ef8:	20 2f       	mov	r18, r16
    2efa:	3b 2d       	mov	r19, r11
    2efc:	4a 2d       	mov	r20, r10
    2efe:	59 2d       	mov	r21, r9
    2f00:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__mulsf3>
    2f04:	9b 01       	movw	r18, r22
    2f06:	ac 01       	movw	r20, r24
    2f08:	c3 01       	movw	r24, r6
    2f0a:	b2 01       	movw	r22, r4
    2f0c:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <__addsf3>
    2f10:	0e 94 38 35 	call	0x6a70	; 0x6a70 <__fixunssfsi>
    2f14:	6b 01       	movw	r12, r22
		if(index - i == 2) time_dev++;
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	e8 16       	cp	r14, r24
    2f1a:	f1 04       	cpc	r15, r1
    2f1c:	19 f4       	brne	.+6      	; 0x2f24 <get_time+0xda>
    2f1e:	08 94       	sec
    2f20:	c1 1c       	adc	r12, r1
    2f22:	d1 1c       	adc	r13, r1
{
	uint8_t temp = 3;
	state_dev = 240;
	if(mData[2] == 70)	{ temp++;	state_dev = 15;}
	time_dev = 0;
	for( uint8_t i = temp; i <= index; i++)
    2f24:	1f 5f       	subi	r17, 0xFF	; 255
    2f26:	81 16       	cp	r8, r17
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <get_time+0xe2>
    2f2a:	bb cf       	rjmp	.-138    	; 0x2ea2 <get_time+0x58>
    2f2c:	d0 92 1b 06 	sts	0x061B, r13
    2f30:	c0 92 1a 06 	sts	0x061A, r12
		{
		time_dev = time_dev + (mData[i] - 48)*pow(10,index-i);
		if(index - i == 2) time_dev++;
		}
}
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	9f 90       	pop	r9
    2f4a:	8f 90       	pop	r8
    2f4c:	7f 90       	pop	r7
    2f4e:	6f 90       	pop	r6
    2f50:	5f 90       	pop	r5
    2f52:	4f 90       	pop	r4
    2f54:	3f 90       	pop	r3
    2f56:	2f 90       	pop	r2
    2f58:	08 95       	ret

00002f5a <get_temp>:
//Ham lay gia tri nhiet do
void get_temp()
{
    2f5a:	2f 92       	push	r2
    2f5c:	3f 92       	push	r3
    2f5e:	5f 92       	push	r5
    2f60:	6f 92       	push	r6
    2f62:	7f 92       	push	r7
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
	uint8_t temp = index - 2;
    2f7c:	80 91 05 06 	lds	r24, 0x0605
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fe ef       	ldi	r31, 0xFE	; 254
    2f84:	5f 2e       	mov	r5, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	58 0e       	add	r5, r24
	state_dev = 240;
    2f8a:	90 ef       	ldi	r25, 0xF0	; 240
    2f8c:	90 93 52 05 	sts	0x0552, r25
	if(mData[index] == 70)	{temp--;	state_dev = 15;}
    2f90:	e3 e5       	ldi	r30, 0x53	; 83
    2f92:	f5 e0       	ldi	r31, 0x05	; 5
    2f94:	e8 0f       	add	r30, r24
    2f96:	f1 1d       	adc	r31, r1
    2f98:	80 81       	ld	r24, Z
    2f9a:	86 34       	cpi	r24, 0x46	; 70
    2f9c:	21 f4       	brne	.+8      	; 0x2fa6 <get_temp+0x4c>
    2f9e:	5a 94       	dec	r5
    2fa0:	8f e0       	ldi	r24, 0x0F	; 15
    2fa2:	80 93 52 05 	sts	0x0552, r24
	temp_dev = 0;
    2fa6:	10 92 1c 06 	sts	0x061C, r1
	for(uint8_t i = 1; i <= temp; i++)
    2faa:	55 20       	and	r5, r5
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <get_temp+0x56>
    2fae:	4c c0       	rjmp	.+152    	; 0x3048 <get_temp+0xee>
    2fb0:	00 e0       	ldi	r16, 0x00	; 0
    2fb2:	11 e0       	ldi	r17, 0x01	; 1
		{
			temp_dev+=(mData[i] - 48)*pow(10,temp - i);
    2fb4:	25 2c       	mov	r2, r5
    2fb6:	33 24       	eor	r3, r3
    2fb8:	c1 2f       	mov	r28, r17
    2fba:	d0 e0       	ldi	r29, 0x00	; 0
    2fbc:	71 01       	movw	r14, r2
    2fbe:	ec 1a       	sub	r14, r28
    2fc0:	fd 0a       	sbc	r15, r29
    2fc2:	b7 01       	movw	r22, r14
    2fc4:	88 27       	eor	r24, r24
    2fc6:	77 fd       	sbrc	r23, 7
    2fc8:	80 95       	com	r24
    2fca:	98 2f       	mov	r25, r24
    2fcc:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	80 e2       	ldi	r24, 0x20	; 32
    2fda:	91 e4       	ldi	r25, 0x41	; 65
    2fdc:	0e 94 55 36 	call	0x6caa	; 0x6caa <pow>
    2fe0:	d6 2e       	mov	r13, r22
    2fe2:	c7 2e       	mov	r12, r23
    2fe4:	b8 2e       	mov	r11, r24
    2fe6:	a9 2e       	mov	r10, r25
    2fe8:	60 2f       	mov	r22, r16
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	88 27       	eor	r24, r24
    2fee:	77 fd       	sbrc	r23, 7
    2ff0:	80 95       	com	r24
    2ff2:	98 2f       	mov	r25, r24
    2ff4:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    2ff8:	3b 01       	movw	r6, r22
    2ffa:	4c 01       	movw	r8, r24
    2ffc:	cd 5a       	subi	r28, 0xAD	; 173
    2ffe:	da 4f       	sbci	r29, 0xFA	; 250
    3000:	68 81       	ld	r22, Y
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	60 53       	subi	r22, 0x30	; 48
    3006:	70 40       	sbci	r23, 0x00	; 0
    3008:	88 27       	eor	r24, r24
    300a:	77 fd       	sbrc	r23, 7
    300c:	80 95       	com	r24
    300e:	98 2f       	mov	r25, r24
    3010:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    3014:	2d 2d       	mov	r18, r13
    3016:	3c 2d       	mov	r19, r12
    3018:	4b 2d       	mov	r20, r11
    301a:	5a 2d       	mov	r21, r10
    301c:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__mulsf3>
    3020:	9b 01       	movw	r18, r22
    3022:	ac 01       	movw	r20, r24
    3024:	c4 01       	movw	r24, r8
    3026:	b3 01       	movw	r22, r6
    3028:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <__addsf3>
    302c:	0e 94 38 35 	call	0x6a70	; 0x6a70 <__fixunssfsi>
    3030:	06 2f       	mov	r16, r22
			if(temp - i == 2) temp_dev++;
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	e8 16       	cp	r14, r24
    3036:	f1 04       	cpc	r15, r1
    3038:	09 f4       	brne	.+2      	; 0x303c <get_temp+0xe2>
    303a:	0f 5f       	subi	r16, 0xFF	; 255
{
	uint8_t temp = index - 2;
	state_dev = 240;
	if(mData[index] == 70)	{temp--;	state_dev = 15;}
	temp_dev = 0;
	for(uint8_t i = 1; i <= temp; i++)
    303c:	1f 5f       	subi	r17, 0xFF	; 255
    303e:	51 16       	cp	r5, r17
    3040:	08 f0       	brcs	.+2      	; 0x3044 <get_temp+0xea>
    3042:	ba cf       	rjmp	.-140    	; 0x2fb8 <get_temp+0x5e>
    3044:	00 93 1c 06 	sts	0x061C, r16
		{
			temp_dev+=(mData[i] - 48)*pow(10,temp - i);
			if(temp - i == 2) temp_dev++;
		}
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	9f 90       	pop	r9
    305e:	8f 90       	pop	r8
    3060:	7f 90       	pop	r7
    3062:	6f 90       	pop	r6
    3064:	5f 90       	pop	r5
    3066:	3f 90       	pop	r3
    3068:	2f 90       	pop	r2
    306a:	08 95       	ret

0000306c <apply_edit>:
void apply_edit() // HMS & DMY
{
	uint8_t val1, val2, val3, type;
	if(mData[3] == 83) type = 1;
    306c:	80 91 56 05 	lds	r24, 0x0556
    3070:	83 35       	cpi	r24, 0x53	; 83
    3072:	19 f0       	breq	.+6      	; 0x307a <apply_edit+0xe>
	else if(mData[3] == 89) type = 2;
    3074:	89 35       	cpi	r24, 0x59	; 89
    3076:	19 f0       	breq	.+6      	; 0x307e <apply_edit+0x12>
    3078:	08 95       	ret
		}
}
void apply_edit() // HMS & DMY
{
	uint8_t val1, val2, val3, type;
	if(mData[3] == 83) type = 1;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <apply_edit+0x14>
	else if(mData[3] == 89) type = 2;
    307e:	82 e0       	ldi	r24, 0x02	; 2
	val1 = (mData[4] - 48)*10 + (mData[5] - 48);
    3080:	50 91 57 05 	lds	r21, 0x0557
    3084:	60 91 58 05 	lds	r22, 0x0558
	val2 = (mData[6] - 48)*10 + (mData[7] - 48); 
    3088:	30 91 59 05 	lds	r19, 0x0559
    308c:	40 91 5a 05 	lds	r20, 0x055A
	val3 = (mData[8] - 48)*10 + (mData[9] - 48);
    3090:	90 91 5b 05 	lds	r25, 0x055B
    3094:	20 91 5c 05 	lds	r18, 0x055C
void apply_edit() // HMS & DMY
{
	uint8_t val1, val2, val3, type;
	if(mData[3] == 83) type = 1;
	else if(mData[3] == 89) type = 2;
	val1 = (mData[4] - 48)*10 + (mData[5] - 48);
    3098:	60 51       	subi	r22, 0x10	; 16
    309a:	55 0f       	add	r21, r21
    309c:	75 2f       	mov	r23, r21
    309e:	77 0f       	add	r23, r23
    30a0:	77 0f       	add	r23, r23
    30a2:	57 0f       	add	r21, r23
    30a4:	65 0f       	add	r22, r21
	val2 = (mData[6] - 48)*10 + (mData[7] - 48); 
    30a6:	40 51       	subi	r20, 0x10	; 16
    30a8:	33 0f       	add	r19, r19
    30aa:	53 2f       	mov	r21, r19
    30ac:	55 0f       	add	r21, r21
    30ae:	55 0f       	add	r21, r21
    30b0:	35 0f       	add	r19, r21
    30b2:	43 0f       	add	r20, r19
	val3 = (mData[8] - 48)*10 + (mData[9] - 48);
    30b4:	20 51       	subi	r18, 0x10	; 16
    30b6:	99 0f       	add	r25, r25
    30b8:	39 2f       	mov	r19, r25
    30ba:	33 0f       	add	r19, r19
    30bc:	33 0f       	add	r19, r19
    30be:	93 0f       	add	r25, r19
    30c0:	29 0f       	add	r18, r25
	if(type != 0)	edit_clock(type, val1, val2, val3);
    30c2:	0e 94 76 23 	call	0x46ec	; 0x46ec <edit_clock>
    30c6:	08 95       	ret

000030c8 <get_string>:
}
//Lay gia tri chuoi auto_device trong buffer
void get_string(unsigned char* str,unsigned int len,unsigned int device)
{
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
	unsigned int i = 0;
	unsigned int j = 1;
	for(unsigned char k = 1; k <= 16; k++)	mData[k] = 0;
	while (i<len)
    30ce:	a4 e5       	ldi	r26, 0x54	; 84
    30d0:	b5 e0       	ldi	r27, 0x05	; 5
	val2 = (mData[6] - 48)*10 + (mData[7] - 48); 
	val3 = (mData[8] - 48)*10 + (mData[9] - 48);
	if(type != 0)	edit_clock(type, val1, val2, val3);
}
//Lay gia tri chuoi auto_device trong buffer
void get_string(unsigned char* str,unsigned int len,unsigned int device)
    30d2:	9d 01       	movw	r18, r26
    30d4:	20 5f       	subi	r18, 0xF0	; 240
    30d6:	3f 4f       	sbci	r19, 0xFF	; 255
    30d8:	fd 01       	movw	r30, r26
{
	unsigned int i = 0;
	unsigned int j = 1;
	for(unsigned char k = 1; k <= 16; k++)	mData[k] = 0;
    30da:	11 92       	st	Z+, r1
    30dc:	e2 17       	cp	r30, r18
    30de:	f3 07       	cpc	r31, r19
    30e0:	e1 f7       	brne	.-8      	; 0x30da <get_string+0x12>
	while (i<len)
    30e2:	61 15       	cp	r22, r1
    30e4:	71 05       	cpc	r23, r1
    30e6:	99 f1       	breq	.+102    	; 0x314e <get_string+0x86>
    30e8:	fc 01       	movw	r30, r24
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(str[i] == 'A' && str[i+1] == 'u' && str[i+2] == 't' && str[i+3] == 'o' && str[i+4] == device + 0x30) // Bang cac gia tri config_auto
    30ee:	40 5d       	subi	r20, 0xD0	; 208
    30f0:	5f 4f       	sbci	r21, 0xFF	; 255
    30f2:	11 91       	ld	r17, Z+
    30f4:	11 34       	cpi	r17, 0x41	; 65
    30f6:	31 f5       	brne	.+76     	; 0x3144 <get_string+0x7c>
    30f8:	10 81       	ld	r17, Z
    30fa:	15 37       	cpi	r17, 0x75	; 117
    30fc:	19 f5       	brne	.+70     	; 0x3144 <get_string+0x7c>
    30fe:	11 81       	ldd	r17, Z+1	; 0x01
    3100:	14 37       	cpi	r17, 0x74	; 116
    3102:	01 f5       	brne	.+64     	; 0x3144 <get_string+0x7c>
    3104:	12 81       	ldd	r17, Z+2	; 0x02
    3106:	1f 36       	cpi	r17, 0x6F	; 111
    3108:	e9 f4       	brne	.+58     	; 0x3144 <get_string+0x7c>
    310a:	13 81       	ldd	r17, Z+3	; 0x03
    310c:	c1 2f       	mov	r28, r17
    310e:	d0 e0       	ldi	r29, 0x00	; 0
    3110:	c4 17       	cp	r28, r20
    3112:	d5 07       	cpc	r29, r21
    3114:	b9 f4       	brne	.+46     	; 0x3144 <get_string+0x7c>
			{
				i += 6;
				index = 0;
    3116:	10 92 05 06 	sts	0x0605, r1
				while(str[i] != '&')
    311a:	fc 01       	movw	r30, r24
    311c:	e2 0f       	add	r30, r18
    311e:	f3 1f       	adc	r31, r19
    3120:	46 81       	ldd	r20, Z+6	; 0x06
    3122:	46 32       	cpi	r20, 0x26	; 38
    3124:	a1 f0       	breq	.+40     	; 0x314e <get_string+0x86>
	val2 = (mData[6] - 48)*10 + (mData[7] - 48); 
	val3 = (mData[8] - 48)*10 + (mData[9] - 48);
	if(type != 0)	edit_clock(type, val1, val2, val3);
}
//Lay gia tri chuoi auto_device trong buffer
void get_string(unsigned char* str,unsigned int len,unsigned int device)
    3126:	29 5f       	subi	r18, 0xF9	; 249
    3128:	3f 4f       	sbci	r19, 0xFF	; 255
    312a:	fc 01       	movw	r30, r24
    312c:	e2 0f       	add	r30, r18
    312e:	f3 1f       	adc	r31, r19
			{
				i += 6;
				index = 0;
				while(str[i] != '&')
					{
						mData[j++] = str[i++];
    3130:	4d 93       	st	X+, r20
						index++;
    3132:	80 91 05 06 	lds	r24, 0x0605
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	80 93 05 06 	sts	0x0605, r24
	{
		if(str[i] == 'A' && str[i+1] == 'u' && str[i+2] == 't' && str[i+3] == 'o' && str[i+4] == device + 0x30) // Bang cac gia tri config_auto
			{
				i += 6;
				index = 0;
				while(str[i] != '&')
    313c:	41 91       	ld	r20, Z+
    313e:	46 32       	cpi	r20, 0x26	; 38
    3140:	b9 f7       	brne	.-18     	; 0x3130 <get_string+0x68>
    3142:	05 c0       	rjmp	.+10     	; 0x314e <get_string+0x86>
						mData[j++] = str[i++];
						index++;
					}	
				break;
			}
		i++;
    3144:	2f 5f       	subi	r18, 0xFF	; 255
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
void get_string(unsigned char* str,unsigned int len,unsigned int device)
{
	unsigned int i = 0;
	unsigned int j = 1;
	for(unsigned char k = 1; k <= 16; k++)	mData[k] = 0;
	while (i<len)
    3148:	26 17       	cp	r18, r22
    314a:	37 07       	cpc	r19, r23
    314c:	90 f2       	brcs	.-92     	; 0x30f2 <get_string+0x2a>
					}	
				break;
			}
		i++;
	}
	if(mData[1] == 79)	get_time();
    314e:	80 91 54 05 	lds	r24, 0x0554
    3152:	8f 34       	cpi	r24, 0x4F	; 79
    3154:	19 f4       	brne	.+6      	; 0x315c <get_string+0x94>
    3156:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <get_time>
    315a:	1c c0       	rjmp	.+56     	; 0x3194 <get_string+0xcc>
	else if(mData[index] == 70 || mData[index] == 78)	get_temp();
    315c:	80 91 05 06 	lds	r24, 0x0605
    3160:	e3 e5       	ldi	r30, 0x53	; 83
    3162:	f5 e0       	ldi	r31, 0x05	; 5
    3164:	e8 0f       	add	r30, r24
    3166:	f1 1d       	adc	r31, r1
    3168:	80 81       	ld	r24, Z
    316a:	86 34       	cpi	r24, 0x46	; 70
    316c:	11 f0       	breq	.+4      	; 0x3172 <get_string+0xaa>
    316e:	8e 34       	cpi	r24, 0x4E	; 78
    3170:	19 f4       	brne	.+6      	; 0x3178 <get_string+0xb0>
    3172:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <get_temp>
    3176:	0e c0       	rjmp	.+28     	; 0x3194 <get_string+0xcc>
	else if(mData[2] == 77)  apply_edit();
    3178:	80 91 55 05 	lds	r24, 0x0555
    317c:	8d 34       	cpi	r24, 0x4D	; 77
    317e:	19 f4       	brne	.+6      	; 0x3186 <get_string+0xbe>
    3180:	0e 94 36 18 	call	0x306c	; 0x306c <apply_edit>
    3184:	07 c0       	rjmp	.+14     	; 0x3194 <get_string+0xcc>
	else if(mData[2] == 65)	 edit_day(mData[4] - 48);
    3186:	81 34       	cpi	r24, 0x41	; 65
    3188:	29 f4       	brne	.+10     	; 0x3194 <get_string+0xcc>
    318a:	80 91 57 05 	lds	r24, 0x0557
    318e:	80 53       	subi	r24, 0x30	; 48
    3190:	0e 94 4f 23 	call	0x469e	; 0x469e <edit_day>
}
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	1f 91       	pop	r17
    319a:	08 95       	ret

0000319c <httpDataIn>:

//Ham xu ly mot goi thuoc giao thuc HTP nhan duoc
void httpDataIn(unsigned char *buffer,unsigned int bufferLen,struct tcpSession *pSession)
{
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	6c 01       	movw	r12, r24
    31b4:	7b 01       	movw	r14, r22
    31b6:	8a 01       	movw	r16, r20
			break;
	}
	if(i == MAX_HTTP_SESSION){
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
			if(httpSessionTable[i].status == HTTP_STATUS_IDLE){
    31b8:	ed e5       	ldi	r30, 0x5D	; 93
    31ba:	f5 e0       	ldi	r31, 0x05	; 5
void httpDataIn(unsigned char *buffer,unsigned int bufferLen,struct tcpSession *pSession)
{
	unsigned char i;
	unsigned char *tmpstr;
	//Tim xem cophien HTTP service da co cho phien TCP nay khong
	for(i=0; i < MAX_HTTP_SESSION; i++){
    31bc:	40 e0       	ldi	r20, 0x00	; 0
		if((httpSessionTable[i].status != HTTP_STATUS_IDLE) && (httpSessionTable[i].pTCPSession == pSession))
    31be:	80 81       	ld	r24, Z
    31c0:	88 23       	and	r24, r24
    31c2:	29 f0       	breq	.+10     	; 0x31ce <httpDataIn+0x32>
    31c4:	83 89       	ldd	r24, Z+19	; 0x13
    31c6:	94 89       	ldd	r25, Z+20	; 0x14
    31c8:	80 17       	cp	r24, r16
    31ca:	91 07       	cpc	r25, r17
    31cc:	29 f0       	breq	.+10     	; 0x31d8 <httpDataIn+0x3c>
void httpDataIn(unsigned char *buffer,unsigned int bufferLen,struct tcpSession *pSession)
{
	unsigned char i;
	unsigned char *tmpstr;
	//Tim xem cophien HTTP service da co cho phien TCP nay khong
	for(i=0; i < MAX_HTTP_SESSION; i++){
    31ce:	4f 5f       	subi	r20, 0xFF	; 255
    31d0:	75 96       	adiw	r30, 0x15	; 21
    31d2:	48 30       	cpi	r20, 0x08	; 8
    31d4:	a1 f7       	brne	.-24     	; 0x31be <httpDataIn+0x22>
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <httpDataIn+0x40>
		if((httpSessionTable[i].status != HTTP_STATUS_IDLE) && (httpSessionTable[i].pTCPSession == pSession))
			break;
	}
	if(i == MAX_HTTP_SESSION){
    31d8:	48 30       	cpi	r20, 0x08	; 8
    31da:	49 f5       	brne	.+82     	; 0x322e <httpDataIn+0x92>
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
			if(httpSessionTable[i].status == HTTP_STATUS_IDLE){
    31dc:	80 91 5d 05 	lds	r24, 0x055D
    31e0:	88 23       	and	r24, r24
    31e2:	59 f0       	breq	.+22     	; 0x31fa <httpDataIn+0x5e>
    31e4:	e2 e7       	ldi	r30, 0x72	; 114
    31e6:	f5 e0       	ldi	r31, 0x05	; 5
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
		if((httpSessionTable[i].status != HTTP_STATUS_IDLE) && (httpSessionTable[i].pTCPSession == pSession))
			break;
	}
	if(i == MAX_HTTP_SESSION){
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
    31ec:	41 e0       	ldi	r20, 0x01	; 1
	else if(mData[2] == 77)  apply_edit();
	else if(mData[2] == 65)	 edit_day(mData[4] - 48);
}

//Ham xu ly mot goi thuoc giao thuc HTP nhan duoc
void httpDataIn(unsigned char *buffer,unsigned int bufferLen,struct tcpSession *pSession)
    31ee:	01 96       	adiw	r24, 0x01	; 1
    31f0:	9c 01       	movw	r18, r24
			break;
	}
	if(i == MAX_HTTP_SESSION){
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
			if(httpSessionTable[i].status == HTTP_STATUS_IDLE){
    31f2:	50 81       	ld	r21, Z
    31f4:	55 23       	and	r21, r21
    31f6:	b9 f4       	brne	.+46     	; 0x3226 <httpDataIn+0x8a>
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <httpDataIn+0x64>
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e0       	ldi	r20, 0x00	; 0
				httpSessionTable[i].pTCPSession = pSession;
    3200:	c9 01       	movw	r24, r18
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	28 0f       	add	r18, r24
    3208:	39 1f       	adc	r19, r25
    320a:	f9 01       	movw	r30, r18
    320c:	ee 0f       	add	r30, r30
    320e:	ff 1f       	adc	r31, r31
    3210:	ee 0f       	add	r30, r30
    3212:	ff 1f       	adc	r31, r31
    3214:	ee 0f       	add	r30, r30
    3216:	ff 1f       	adc	r31, r31
    3218:	e2 1b       	sub	r30, r18
    321a:	f3 0b       	sbc	r31, r19
    321c:	e3 5a       	subi	r30, 0xA3	; 163
    321e:	fa 4f       	sbci	r31, 0xFA	; 250
    3220:	14 8b       	std	Z+20, r17	; 0x14
    3222:	03 8b       	std	Z+19, r16	; 0x13
				break;
    3224:	04 c0       	rjmp	.+8      	; 0x322e <httpDataIn+0x92>
		if((httpSessionTable[i].status != HTTP_STATUS_IDLE) && (httpSessionTable[i].pTCPSession == pSession))
			break;
	}
	if(i == MAX_HTTP_SESSION){
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
    3226:	4f 5f       	subi	r20, 0xFF	; 255
    3228:	75 96       	adiw	r30, 0x15	; 21
    322a:	48 30       	cpi	r20, 0x08	; 8
    322c:	01 f7       	brne	.-64     	; 0x31ee <httpDataIn+0x52>
				httpSessionTable[i].pTCPSession = pSession;
				break;
			}
		}
	}
	if(httpSessionTable[i].status == HTTP_STATUS_IDLE){
    322e:	c4 2f       	mov	r28, r20
    3230:	d0 e0       	ldi	r29, 0x00	; 0
    3232:	ce 01       	movw	r24, r28
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	8c 0f       	add	r24, r28
    323a:	9d 1f       	adc	r25, r29
    323c:	fc 01       	movw	r30, r24
    323e:	ee 0f       	add	r30, r30
    3240:	ff 1f       	adc	r31, r31
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	e8 1b       	sub	r30, r24
    324c:	f9 0b       	sbc	r31, r25
    324e:	e3 5a       	subi	r30, 0xA3	; 163
    3250:	fa 4f       	sbci	r31, 0xFA	; 250
    3252:	80 81       	ld	r24, Z
    3254:	88 23       	and	r24, r24
    3256:	99 f5       	brne	.+102    	; 0x32be <httpDataIn+0x122>
	//Neu day la 1 HTTP request moi
		//Kiem tra method cua request
		httpGetRequest(buffer,bufferLen,&(httpSessionTable[i].rqst));
    3258:	ce 01       	movw	r24, r28
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	8c 0f       	add	r24, r28
    3260:	9d 1f       	adc	r25, r29
    3262:	5c 01       	movw	r10, r24
    3264:	aa 0c       	add	r10, r10
    3266:	bb 1c       	adc	r11, r11
    3268:	aa 0c       	add	r10, r10
    326a:	bb 1c       	adc	r11, r11
    326c:	aa 0c       	add	r10, r10
    326e:	bb 1c       	adc	r11, r11
    3270:	a8 1a       	sub	r10, r24
    3272:	b9 0a       	sbc	r11, r25
    3274:	a5 01       	movw	r20, r10
    3276:	4b 59       	subi	r20, 0x9B	; 155
    3278:	5a 4f       	sbci	r21, 0xFA	; 250
    327a:	c6 01       	movw	r24, r12
    327c:	b7 01       	movw	r22, r14
    327e:	0e 94 df 11 	call	0x23be	; 0x23be <httpGetRequest>
		if(httpSessionTable[i].rqst.method == HTTP_REQUEST_UNKNOWN){
    3282:	f5 01       	movw	r30, r10
    3284:	e3 5a       	subi	r30, 0xA3	; 163
    3286:	fa 4f       	sbci	r31, 0xFA	; 250
    3288:	80 85       	ldd	r24, Z+8	; 0x08
    328a:	84 30       	cpi	r24, 0x04	; 4
    328c:	29 f4       	brne	.+10     	; 0x3298 <httpDataIn+0xfc>
		//Neu request khong biet, thoat tro ve trang thai idle
			httpSessionTable[i].status = HTTP_STATUS_IDLE;
    328e:	f5 01       	movw	r30, r10
    3290:	e3 5a       	subi	r30, 0xA3	; 163
    3292:	fa 4f       	sbci	r31, 0xFA	; 250
    3294:	10 82       	st	Z, r1
			return;
    3296:	25 c2       	rjmp	.+1098   	; 0x36e2 <httpDataIn+0x546>
		}else{
		//Set trang thai cua HTTP session thanh HEADER_RECEIVED (da nhan header)
			httpSessionTable[i].status = HTTP_STATUS_HEADER_RECEIVED;
    3298:	ce 01       	movw	r24, r28
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	8c 0f       	add	r24, r28
    32a0:	9d 1f       	adc	r25, r29
    32a2:	fc 01       	movw	r30, r24
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	ee 0f       	add	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	e8 1b       	sub	r30, r24
    32b2:	f9 0b       	sbc	r31, r25
    32b4:	e3 5a       	subi	r30, 0xA3	; 163
    32b6:	fa 4f       	sbci	r31, 0xFA	; 250
    32b8:	83 e0       	ldi	r24, 0x03	; 3
    32ba:	80 83       	st	Z, r24
    32bc:	03 c0       	rjmp	.+6      	; 0x32c4 <httpDataIn+0x128>
		}
	}
	//Neu da nhan header
	if(httpSessionTable[i].status == HTTP_STATUS_HEADER_RECEIVED){
    32be:	83 30       	cpi	r24, 0x03	; 3
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <httpDataIn+0x128>
    32c2:	0f c2       	rjmp	.+1054   	; 0x36e2 <httpDataIn+0x546>
		//Kiem tra xem da xac thuc hay chua
		if(httpSessionTable[i].auth != 1){
    32c4:	ce 01       	movw	r24, r28
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	8c 0f       	add	r24, r28
    32cc:	9d 1f       	adc	r25, r29
    32ce:	fc 01       	movw	r30, r24
    32d0:	ee 0f       	add	r30, r30
    32d2:	ff 1f       	adc	r31, r31
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	ee 0f       	add	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	e8 1b       	sub	r30, r24
    32de:	f9 0b       	sbc	r31, r25
    32e0:	e3 5a       	subi	r30, 0xA3	; 163
    32e2:	fa 4f       	sbci	r31, 0xFA	; 250
    32e4:	87 81       	ldd	r24, Z+7	; 0x07
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	09 f4       	brne	.+2      	; 0x32ec <httpDataIn+0x150>
    32ea:	4d c0       	rjmp	.+154    	; 0x3386 <httpDataIn+0x1ea>
			tmpstr = httpHeaderGetField(Auth_str,&(httpSessionTable[i].rqst));
    32ec:	ce 01       	movw	r24, r28
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	8c 0f       	add	r24, r28
    32f4:	9d 1f       	adc	r25, r29
    32f6:	5c 01       	movw	r10, r24
    32f8:	aa 0c       	add	r10, r10
    32fa:	bb 1c       	adc	r11, r11
    32fc:	aa 0c       	add	r10, r10
    32fe:	bb 1c       	adc	r11, r11
    3300:	aa 0c       	add	r10, r10
    3302:	bb 1c       	adc	r11, r11
    3304:	a8 1a       	sub	r10, r24
    3306:	b9 0a       	sbc	r11, r25
    3308:	b5 01       	movw	r22, r10
    330a:	6b 59       	subi	r22, 0x9B	; 155
    330c:	7a 4f       	sbci	r23, 0xFA	; 250
    330e:	86 eb       	ldi	r24, 0xB6	; 182
    3310:	9c e0       	ldi	r25, 0x0C	; 12
    3312:	0e 94 6d 12 	call	0x24da	; 0x24da <httpHeaderGetField>
    3316:	bc 01       	movw	r22, r24
			if(findstrdatamem(http_auth_password,tmpstr,httpSessionTable[i].rqst.body-tmpstr) != -1){
    3318:	f5 01       	movw	r30, r10
    331a:	e3 5a       	subi	r30, 0xA3	; 163
    331c:	fa 4f       	sbci	r31, 0xFA	; 250
    331e:	47 85       	ldd	r20, Z+15	; 0x0f
    3320:	50 89       	ldd	r21, Z+16	; 0x10
    3322:	48 1b       	sub	r20, r24
    3324:	59 0b       	sbc	r21, r25
    3326:	86 e0       	ldi	r24, 0x06	; 6
    3328:	96 e0       	ldi	r25, 0x06	; 6
    332a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <findstrdatamem>
    332e:	2f ef       	ldi	r18, 0xFF	; 255
    3330:	8f 3f       	cpi	r24, 0xFF	; 255
    3332:	92 07       	cpc	r25, r18
    3334:	31 f0       	breq	.+12     	; 0x3342 <httpDataIn+0x1a6>
				httpSessionTable[i].auth = 1;
    3336:	f5 01       	movw	r30, r10
    3338:	e3 5a       	subi	r30, 0xA3	; 163
    333a:	fa 4f       	sbci	r31, 0xFA	; 250
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	87 83       	std	Z+7, r24	; 0x07
    3340:	22 c0       	rjmp	.+68     	; 0x3386 <httpDataIn+0x1ea>
			//Neu xac thuc khong hop le
			}else{
				HTTPSend(http_pageheader_unauth,sizeof(http_pageheader_unauth)-1,pSession,0);
    3342:	8c e1       	ldi	r24, 0x1C	; 28
    3344:	9d e0       	ldi	r25, 0x0D	; 13
    3346:	61 e8       	ldi	r22, 0x81	; 129
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	a8 01       	movw	r20, r16
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
				HTTPSend(http_pageheader_auth_error,sizeof(http_pageheader_auth_error)-1,pSession,1);
    3352:	8e e9       	ldi	r24, 0x9E	; 158
    3354:	9d e0       	ldi	r25, 0x0D	; 13
    3356:	64 e1       	ldi	r22, 0x14	; 20
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	a8 01       	movw	r20, r16
    335c:	21 e0       	ldi	r18, 0x01	; 1
    335e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
				httpSessionTable[i].status = HTTP_STATUS_IDLE;
    3362:	ce 01       	movw	r24, r28
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	c8 0f       	add	r28, r24
    336a:	d9 1f       	adc	r29, r25
    336c:	fe 01       	movw	r30, r28
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	ec 1b       	sub	r30, r28
    337c:	fd 0b       	sbc	r31, r29
    337e:	e3 5a       	subi	r30, 0xA3	; 163
    3380:	fa 4f       	sbci	r31, 0xFA	; 250
    3382:	10 82       	st	Z, r1
				return;
    3384:	ae c1       	rjmp	.+860    	; 0x36e2 <httpDataIn+0x546>
			}
		}
		//Process for each method
		//If GET method
		if(httpSessionTable[i].rqst.method == HTTP_REQUEST_GET){
    3386:	ce 01       	movw	r24, r28
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	8c 0f       	add	r24, r28
    338e:	9d 1f       	adc	r25, r29
    3390:	fc 01       	movw	r30, r24
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	ee 0f       	add	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	e8 1b       	sub	r30, r24
    33a0:	f9 0b       	sbc	r31, r25
    33a2:	e3 5a       	subi	r30, 0xA3	; 163
    33a4:	fa 4f       	sbci	r31, 0xFA	; 250
    33a6:	80 85       	ldd	r24, Z+8	; 0x08
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	09 f0       	breq	.+2      	; 0x33ae <httpDataIn+0x212>
    33ac:	55 c0       	rjmp	.+170    	; 0x3458 <httpDataIn+0x2bc>
			//If GET the main website
			if((httpSessionTable[i].rqst.requestURI[0] == '/') && (httpSessionTable[i].rqst.requestURI[1] == ' ')){
    33ae:	ce 01       	movw	r24, r28
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	8c 0f       	add	r24, r28
    33b6:	9d 1f       	adc	r25, r29
    33b8:	fc 01       	movw	r30, r24
    33ba:	ee 0f       	add	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	e8 1b       	sub	r30, r24
    33c8:	f9 0b       	sbc	r31, r25
    33ca:	e3 5a       	subi	r30, 0xA3	; 163
    33cc:	fa 4f       	sbci	r31, 0xFA	; 250
    33ce:	01 84       	ldd	r0, Z+9	; 0x09
    33d0:	f2 85       	ldd	r31, Z+10	; 0x0a
    33d2:	e0 2d       	mov	r30, r0
    33d4:	80 81       	ld	r24, Z
    33d6:	8f 32       	cpi	r24, 0x2F	; 47
    33d8:	29 f5       	brne	.+74     	; 0x3424 <httpDataIn+0x288>
    33da:	81 81       	ldd	r24, Z+1	; 0x01
    33dc:	80 32       	cpi	r24, 0x20	; 32
    33de:	11 f5       	brne	.+68     	; 0x3424 <httpDataIn+0x288>
				HTTPSend(http_pageheader_ok,sizeof(http_pageheader_ok)-1,pSession,0);
    33e0:	84 ec       	ldi	r24, 0xC4	; 196
    33e2:	9c e0       	ldi	r25, 0x0C	; 12
    33e4:	67 e5       	ldi	r22, 0x57	; 87
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	a8 01       	movw	r20, r16
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
				HTTPSend(Page1,sizeof(Page1)-1,pSession,1);
    33f0:	82 e0       	ldi	r24, 0x02	; 2
    33f2:	91 e0       	ldi	r25, 0x01	; 1
    33f4:	63 eb       	ldi	r22, 0xB3	; 179
    33f6:	7b e0       	ldi	r23, 0x0B	; 11
    33f8:	a8 01       	movw	r20, r16
    33fa:	21 e0       	ldi	r18, 0x01	; 1
    33fc:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
				httpSessionTable[i].status = HTTP_STATUS_IDLE;
    3400:	ce 01       	movw	r24, r28
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	c8 0f       	add	r28, r24
    3408:	d9 1f       	adc	r29, r25
    340a:	fe 01       	movw	r30, r28
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	ec 1b       	sub	r30, r28
    341a:	fd 0b       	sbc	r31, r29
    341c:	e3 5a       	subi	r30, 0xA3	; 163
    341e:	fa 4f       	sbci	r31, 0xFA	; 250
    3420:	10 82       	st	Z, r1
    3422:	5f c1       	rjmp	.+702    	; 0x36e2 <httpDataIn+0x546>
			//If error
			}else{
				HTTPSend(http_error_notimp,sizeof(http_error_notimp),pSession,1);
    3424:	83 eb       	ldi	r24, 0xB3	; 179
    3426:	9d e0       	ldi	r25, 0x0D	; 13
    3428:	6a e8       	ldi	r22, 0x8A	; 138
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	a8 01       	movw	r20, r16
    342e:	21 e0       	ldi	r18, 0x01	; 1
    3430:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
				httpSessionTable[i].status = HTTP_STATUS_IDLE;
    3434:	ce 01       	movw	r24, r28
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	c8 0f       	add	r28, r24
    343c:	d9 1f       	adc	r29, r25
    343e:	fe 01       	movw	r30, r28
    3440:	ee 0f       	add	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	ec 1b       	sub	r30, r28
    344e:	fd 0b       	sbc	r31, r29
    3450:	e3 5a       	subi	r30, 0xA3	; 163
    3452:	fa 4f       	sbci	r31, 0xFA	; 250
    3454:	10 82       	st	Z, r1
    3456:	45 c1       	rjmp	.+650    	; 0x36e2 <httpDataIn+0x546>
			}
			return;
		//If POST method
		}else 
			if(httpSessionTable[i].rqst.method == HTTP_REQUEST_POST)
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	09 f0       	breq	.+2      	; 0x345e <httpDataIn+0x2c2>
    345c:	42 c1       	rjmp	.+644    	; 0x36e2 <httpDataIn+0x546>
			{
			if(findstr(PSTR("RL1=ON"),buffer,bufferLen)	!= -1)	{ON1	AUTO1	needreload = 1;}	else if(findstr(PSTR("RL1=OFF"),buffer,bufferLen) != -1)	{OFF1	AUTO1	needreload = 1;}
    345e:	8b ef       	ldi	r24, 0xFB	; 251
    3460:	9e e0       	ldi	r25, 0x0E	; 14
    3462:	b6 01       	movw	r22, r12
    3464:	a7 01       	movw	r20, r14
    3466:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    346a:	2f ef       	ldi	r18, 0xFF	; 255
    346c:	8f 3f       	cpi	r24, 0xFF	; 255
    346e:	92 07       	cpc	r25, r18
    3470:	49 f0       	breq	.+18     	; 0x3484 <httpDataIn+0x2e8>
    3472:	af 98       	cbi	0x15, 7	; 21
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	80 93 af 00 	sts	0x00AF, r24
    3482:	12 c0       	rjmp	.+36     	; 0x34a8 <httpDataIn+0x30c>
    3484:	83 ef       	ldi	r24, 0xF3	; 243
    3486:	9e e0       	ldi	r25, 0x0E	; 14
    3488:	b6 01       	movw	r22, r12
    348a:	a7 01       	movw	r20, r14
    348c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    3490:	2f ef       	ldi	r18, 0xFF	; 255
    3492:	8f 3f       	cpi	r24, 0xFF	; 255
    3494:	92 07       	cpc	r25, r18
    3496:	41 f0       	breq	.+16     	; 0x34a8 <httpDataIn+0x30c>
    3498:	af 9a       	sbi	0x15, 7	; 21
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	80 93 af 00 	sts	0x00AF, r24
			if(findstr(PSTR("RL2=ON"),buffer,bufferLen)	!= -1)	{ON2	AUTO2	needreload = 1;}	else if(findstr(PSTR("RL2=OFF"),buffer,bufferLen) != -1)	{OFF2	AUTO2	needreload = 1;}
    34a8:	8c ee       	ldi	r24, 0xEC	; 236
    34aa:	9e e0       	ldi	r25, 0x0E	; 14
    34ac:	b6 01       	movw	r22, r12
    34ae:	a7 01       	movw	r20, r14
    34b0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    34b4:	2f ef       	ldi	r18, 0xFF	; 255
    34b6:	8f 3f       	cpi	r24, 0xFF	; 255
    34b8:	92 07       	cpc	r25, r18
    34ba:	49 f0       	breq	.+18     	; 0x34ce <httpDataIn+0x332>
    34bc:	ae 98       	cbi	0x15, 6	; 21
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	80 93 af 00 	sts	0x00AF, r24
    34cc:	12 c0       	rjmp	.+36     	; 0x34f2 <httpDataIn+0x356>
    34ce:	84 ee       	ldi	r24, 0xE4	; 228
    34d0:	9e e0       	ldi	r25, 0x0E	; 14
    34d2:	b6 01       	movw	r22, r12
    34d4:	a7 01       	movw	r20, r14
    34d6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    34da:	2f ef       	ldi	r18, 0xFF	; 255
    34dc:	8f 3f       	cpi	r24, 0xFF	; 255
    34de:	92 07       	cpc	r25, r18
    34e0:	41 f0       	breq	.+16     	; 0x34f2 <httpDataIn+0x356>
    34e2:	ae 9a       	sbi	0x15, 6	; 21
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	80 93 af 00 	sts	0x00AF, r24
			if(findstr(PSTR("RL3=ON"),buffer,bufferLen)	!= -1)	{ON3	AUTO3	needreload = 1;}	else if(findstr(PSTR("RL3=OFF"),buffer,bufferLen) != -1)	{OFF3	AUTO3	needreload = 1;}
    34f2:	8d ed       	ldi	r24, 0xDD	; 221
    34f4:	9e e0       	ldi	r25, 0x0E	; 14
    34f6:	b6 01       	movw	r22, r12
    34f8:	a7 01       	movw	r20, r14
    34fa:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    34fe:	2f ef       	ldi	r18, 0xFF	; 255
    3500:	8f 3f       	cpi	r24, 0xFF	; 255
    3502:	92 07       	cpc	r25, r18
    3504:	49 f0       	breq	.+18     	; 0x3518 <httpDataIn+0x37c>
    3506:	ad 98       	cbi	0x15, 5	; 21
    3508:	83 e0       	ldi	r24, 0x03	; 3
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	80 93 af 00 	sts	0x00AF, r24
    3516:	12 c0       	rjmp	.+36     	; 0x353c <httpDataIn+0x3a0>
    3518:	85 ed       	ldi	r24, 0xD5	; 213
    351a:	9e e0       	ldi	r25, 0x0E	; 14
    351c:	b6 01       	movw	r22, r12
    351e:	a7 01       	movw	r20, r14
    3520:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    3524:	2f ef       	ldi	r18, 0xFF	; 255
    3526:	8f 3f       	cpi	r24, 0xFF	; 255
    3528:	92 07       	cpc	r25, r18
    352a:	41 f0       	breq	.+16     	; 0x353c <httpDataIn+0x3a0>
    352c:	ad 9a       	sbi	0x15, 5	; 21
    352e:	83 e0       	ldi	r24, 0x03	; 3
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	80 93 af 00 	sts	0x00AF, r24
			if(findstr(PSTR("RL4=ON"),buffer,bufferLen)	!= -1)	{ON4	AUTO4	needreload = 1;}	else if(findstr(PSTR("RL4=OFF"),buffer,bufferLen) != -1)	{OFF4	AUTO4	needreload = 1;}
    353c:	8e ec       	ldi	r24, 0xCE	; 206
    353e:	9e e0       	ldi	r25, 0x0E	; 14
    3540:	b6 01       	movw	r22, r12
    3542:	a7 01       	movw	r20, r14
    3544:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    3548:	2f ef       	ldi	r18, 0xFF	; 255
    354a:	8f 3f       	cpi	r24, 0xFF	; 255
    354c:	92 07       	cpc	r25, r18
    354e:	49 f0       	breq	.+18     	; 0x3562 <httpDataIn+0x3c6>
    3550:	ac 98       	cbi	0x15, 4	; 21
    3552:	84 e0       	ldi	r24, 0x04	; 4
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	80 93 af 00 	sts	0x00AF, r24
    3560:	12 c0       	rjmp	.+36     	; 0x3586 <httpDataIn+0x3ea>
    3562:	86 ec       	ldi	r24, 0xC6	; 198
    3564:	9e e0       	ldi	r25, 0x0E	; 14
    3566:	b6 01       	movw	r22, r12
    3568:	a7 01       	movw	r20, r14
    356a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    356e:	2f ef       	ldi	r18, 0xFF	; 255
    3570:	8f 3f       	cpi	r24, 0xFF	; 255
    3572:	92 07       	cpc	r25, r18
    3574:	41 f0       	breq	.+16     	; 0x3586 <httpDataIn+0x3ea>
    3576:	ac 9a       	sbi	0x15, 4	; 21
    3578:	84 e0       	ldi	r24, 0x04	; 4
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	80 93 af 00 	sts	0x00AF, r24
			//Update POST data
			if(findstr(PSTR("SUB=Submit"),buffer,bufferLen) != -1)
    3586:	8b eb       	ldi	r24, 0xBB	; 187
    3588:	9e e0       	ldi	r25, 0x0E	; 14
    358a:	b6 01       	movw	r22, r12
    358c:	a7 01       	movw	r20, r14
    358e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    3592:	2f ef       	ldi	r18, 0xFF	; 255
    3594:	8f 3f       	cpi	r24, 0xFF	; 255
    3596:	92 07       	cpc	r25, r18
    3598:	09 f4       	brne	.+2      	; 0x359c <httpDataIn+0x400>
    359a:	73 c0       	rjmp	.+230    	; 0x3682 <httpDataIn+0x4e6>
				{
				needreload = 1;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	80 93 af 00 	sts	0x00AF, r24
				if(findstr(PSTR("Auto1=reset"),buffer,bufferLen) != -1) reset_one_device(1);
    35a2:	8f ea       	ldi	r24, 0xAF	; 175
    35a4:	9e e0       	ldi	r25, 0x0E	; 14
    35a6:	b6 01       	movw	r22, r12
    35a8:	a7 01       	movw	r20, r14
    35aa:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    35ae:	2f ef       	ldi	r18, 0xFF	; 255
    35b0:	8f 3f       	cpi	r24, 0xFF	; 255
    35b2:	92 07       	cpc	r25, r18
    35b4:	19 f0       	breq	.+6      	; 0x35bc <httpDataIn+0x420>
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <reset_one_device>
				if(findstr(PSTR("Auto1=rsall"),buffer,bufferLen) != -1) reset_all();
    35bc:	83 ea       	ldi	r24, 0xA3	; 163
    35be:	9e e0       	ldi	r25, 0x0E	; 14
    35c0:	b6 01       	movw	r22, r12
    35c2:	a7 01       	movw	r20, r14
    35c4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    35c8:	2f ef       	ldi	r18, 0xFF	; 255
    35ca:	8f 3f       	cpi	r24, 0xFF	; 255
    35cc:	92 07       	cpc	r25, r18
    35ce:	11 f0       	breq	.+4      	; 0x35d4 <httpDataIn+0x438>
    35d0:	0e 94 21 26 	call	0x4c42	; 0x4c42 <reset_all>
				if(findstr(PSTR("Auto2=reset"),buffer,bufferLen) != -1) reset_one_device(2);
    35d4:	87 e9       	ldi	r24, 0x97	; 151
    35d6:	9e e0       	ldi	r25, 0x0E	; 14
    35d8:	b6 01       	movw	r22, r12
    35da:	a7 01       	movw	r20, r14
    35dc:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    35e0:	2f ef       	ldi	r18, 0xFF	; 255
    35e2:	8f 3f       	cpi	r24, 0xFF	; 255
    35e4:	92 07       	cpc	r25, r18
    35e6:	19 f0       	breq	.+6      	; 0x35ee <httpDataIn+0x452>
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <reset_one_device>
				if(findstr(PSTR("Auto3=reset"),buffer,bufferLen) != -1) reset_one_device(3);
    35ee:	8b e8       	ldi	r24, 0x8B	; 139
    35f0:	9e e0       	ldi	r25, 0x0E	; 14
    35f2:	b6 01       	movw	r22, r12
    35f4:	a7 01       	movw	r20, r14
    35f6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    35fa:	2f ef       	ldi	r18, 0xFF	; 255
    35fc:	8f 3f       	cpi	r24, 0xFF	; 255
    35fe:	92 07       	cpc	r25, r18
    3600:	19 f0       	breq	.+6      	; 0x3608 <httpDataIn+0x46c>
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <reset_one_device>
				if(findstr(PSTR("Auto4=reset"),buffer,bufferLen) != -1) reset_one_device(4);	
    3608:	8f e7       	ldi	r24, 0x7F	; 127
    360a:	9e e0       	ldi	r25, 0x0E	; 14
    360c:	b6 01       	movw	r22, r12
    360e:	a7 01       	movw	r20, r14
    3610:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <findstr>
    3614:	2f ef       	ldi	r18, 0xFF	; 255
    3616:	8f 3f       	cpi	r24, 0xFF	; 255
    3618:	92 07       	cpc	r25, r18
    361a:	19 f0       	breq	.+6      	; 0x3622 <httpDataIn+0x486>
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <reset_one_device>
			break;
	}
	if(i == MAX_HTTP_SESSION){
		//Tim 1 phien trong
		for(i=0; i < MAX_HTTP_SESSION; i++){
			if(httpSessionTable[i].status == HTTP_STATUS_IDLE){
    3622:	aa 24       	eor	r10, r10
    3624:	bb 24       	eor	r11, r11
				needreload = 1;
				if(findstr(PSTR("Auto1=reset"),buffer,bufferLen) != -1) reset_one_device(1);
				if(findstr(PSTR("Auto1=rsall"),buffer,bufferLen) != -1) reset_all();
				if(findstr(PSTR("Auto2=reset"),buffer,bufferLen) != -1) reset_one_device(2);
				if(findstr(PSTR("Auto3=reset"),buffer,bufferLen) != -1) reset_one_device(3);
				if(findstr(PSTR("Auto4=reset"),buffer,bufferLen) != -1) reset_one_device(4);	
    3626:	9a 2c       	mov	r9, r10
    3628:	93 94       	inc	r9
				//Get String	
				for(uint8_t m = 1 ; m <= 4 ; m++)				
						{
						state_dev = time_dev = index = temp_dev=0;
    362a:	10 92 1c 06 	sts	0x061C, r1
    362e:	10 92 05 06 	sts	0x0605, r1
    3632:	10 92 1b 06 	sts	0x061B, r1
    3636:	10 92 1a 06 	sts	0x061A, r1
    363a:	10 92 52 05 	sts	0x0552, r1
    363e:	08 94       	sec
    3640:	a1 1c       	adc	r10, r1
    3642:	b1 1c       	adc	r11, r1
						get_string(buffer,bufferLen,m);
    3644:	c6 01       	movw	r24, r12
    3646:	b7 01       	movw	r22, r14
    3648:	a5 01       	movw	r20, r10
    364a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <get_string>
						if(time_dev != 0)	{set_time_count(m,state_dev,time_dev);	/*printf("Set Time: \r\nState  = %d \r\nTime   = %d \r\nDevice = %d\r\n",state_dev,time_dev,m);*/}
    364e:	40 91 1a 06 	lds	r20, 0x061A
    3652:	50 91 1b 06 	lds	r21, 0x061B
    3656:	41 15       	cp	r20, r1
    3658:	51 05       	cpc	r21, r1
    365a:	31 f0       	breq	.+12     	; 0x3668 <httpDataIn+0x4cc>
    365c:	89 2d       	mov	r24, r9
    365e:	60 91 52 05 	lds	r22, 0x0552
    3662:	0e 94 93 24 	call	0x4926	; 0x4926 <set_time_count>
    3666:	09 c0       	rjmp	.+18     	; 0x367a <httpDataIn+0x4de>
						else
						if(temp_dev != 0)	{set_temp_val(temp_dev,state_dev,m);	/*printf("Set Temp: \r\nState  = %d \r\nTemp   = %d \r\nDevice = %d\r\n ",state_dev,temp_dev,m);*/}
    3668:	80 91 1c 06 	lds	r24, 0x061C
    366c:	88 23       	and	r24, r24
    366e:	29 f0       	breq	.+10     	; 0x367a <httpDataIn+0x4de>
    3670:	60 91 52 05 	lds	r22, 0x0552
    3674:	49 2d       	mov	r20, r9
    3676:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <set_temp_val>
				if(findstr(PSTR("Auto1=rsall"),buffer,bufferLen) != -1) reset_all();
				if(findstr(PSTR("Auto2=reset"),buffer,bufferLen) != -1) reset_one_device(2);
				if(findstr(PSTR("Auto3=reset"),buffer,bufferLen) != -1) reset_one_device(3);
				if(findstr(PSTR("Auto4=reset"),buffer,bufferLen) != -1) reset_one_device(4);	
				//Get String	
				for(uint8_t m = 1 ; m <= 4 ; m++)				
    367a:	84 e0       	ldi	r24, 0x04	; 4
    367c:	a8 16       	cp	r10, r24
    367e:	b1 04       	cpc	r11, r1
    3680:	91 f6       	brne	.-92     	; 0x3626 <httpDataIn+0x48a>
						if(temp_dev != 0)	{set_temp_val(temp_dev,state_dev,m);	/*printf("Set Temp: \r\nState  = %d \r\nTemp   = %d \r\nDevice = %d\r\n ",state_dev,temp_dev,m);*/}
						}					
				}
				
			//Send HTTP	
			if(needreload)
    3682:	80 91 af 00 	lds	r24, 0x00AF
    3686:	88 23       	and	r24, r24
    3688:	21 f1       	breq	.+72     	; 0x36d2 <httpDataIn+0x536>
			{
			needreload = 0;
    368a:	10 92 af 00 	sts	0x00AF, r1
			HTTPSend(http_pageheader_ok,sizeof(http_pageheader_ok)-1,pSession,0);
    368e:	84 ec       	ldi	r24, 0xC4	; 196
    3690:	9c e0       	ldi	r25, 0x0C	; 12
    3692:	67 e5       	ldi	r22, 0x57	; 87
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	a8 01       	movw	r20, r16
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
			HTTPSend(Page1,sizeof(Page1)-1,pSession,1);
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	63 eb       	ldi	r22, 0xB3	; 179
    36a4:	7b e0       	ldi	r23, 0x0B	; 11
    36a6:	a8 01       	movw	r20, r16
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
			httpSessionTable[i].status = HTTP_STATUS_IDLE;
    36ae:	ce 01       	movw	r24, r28
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	c8 0f       	add	r28, r24
    36b6:	d9 1f       	adc	r29, r25
    36b8:	fe 01       	movw	r30, r28
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	ee 0f       	add	r30, r30
    36c0:	ff 1f       	adc	r31, r31
    36c2:	ee 0f       	add	r30, r30
    36c4:	ff 1f       	adc	r31, r31
    36c6:	ec 1b       	sub	r30, r28
    36c8:	fd 0b       	sbc	r31, r29
    36ca:	e3 5a       	subi	r30, 0xA3	; 163
    36cc:	fa 4f       	sbci	r31, 0xFA	; 250
    36ce:	10 82       	st	Z, r1
			return;	
    36d0:	08 c0       	rjmp	.+16     	; 0x36e2 <httpDataIn+0x546>
			}			
			else	HTTPSend("",0,pSession,0);
    36d2:	8b e6       	ldi	r24, 0x6B	; 107
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	a8 01       	movw	r20, r16
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HTTPSend>
		}
	}
}
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	df 90       	pop	r13
    36f0:	cf 90       	pop	r12
    36f2:	bf 90       	pop	r11
    36f4:	af 90       	pop	r10
    36f6:	9f 90       	pop	r9
    36f8:	08 95       	ret

000036fa <icmpEchoReply>:
#include "arp.h"
#include "ip.h"
#include "icmp.h"
//Ham gui di ban tin tra loi cho Echo Request (Echo Reply)
void icmpEchoReply(struct ntIPHeader* ipHeader)
{
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	ec 01       	movw	r28, r24
	unsigned long tempIp;
	unsigned char* ethFrame;
	struct ntICMPHeader* icmpHeader;
	icmpHeader = (struct ntICMPHeader*)((unsigned char*)ipHeader + IP_HEADER_LEN);
    3704:	8c 01       	movw	r16, r24
    3706:	0c 5e       	subi	r16, 0xEC	; 236
    3708:	1f 4f       	sbci	r17, 0xFF	; 255
	icmpHeader->Type = ICMP_TYPE_ECHOREPLY;
    370a:	1c 8a       	std	Y+20, r1	; 0x14
	icmpHeader->Checksum = 0;
    370c:	f8 01       	movw	r30, r16
    370e:	13 82       	std	Z+3, r1	; 0x03
    3710:	12 82       	std	Z+2, r1	; 0x02
	icmpHeader->Checksum = ipChecksum((unsigned char*)icmpHeader, HTONS(ipHeader->Len)-IP_HEADER_LEN);
    3712:	6a 81       	ldd	r22, Y+2	; 0x02
    3714:	7b 81       	ldd	r23, Y+3	; 0x03
    3716:	76 27       	eor	r23, r22
    3718:	67 27       	eor	r22, r23
    371a:	76 27       	eor	r23, r22
    371c:	64 51       	subi	r22, 0x14	; 20
    371e:	70 40       	sbci	r23, 0x00	; 0
    3720:	c8 01       	movw	r24, r16
    3722:	0e 94 c4 1b 	call	0x3788	; 0x3788 <ipChecksum>
    3726:	f8 01       	movw	r30, r16
    3728:	93 83       	std	Z+3, r25	; 0x03
    372a:	82 83       	std	Z+2, r24	; 0x02
	tempIp = ipHeader->desIPAddr;
    372c:	88 89       	ldd	r24, Y+16	; 0x10
    372e:	99 89       	ldd	r25, Y+17	; 0x11
    3730:	aa 89       	ldd	r26, Y+18	; 0x12
    3732:	bb 89       	ldd	r27, Y+19	; 0x13
	ipHeader->desIPAddr = ipHeader->srcIPAddr;
    3734:	2c 85       	ldd	r18, Y+12	; 0x0c
    3736:	3d 85       	ldd	r19, Y+13	; 0x0d
    3738:	4e 85       	ldd	r20, Y+14	; 0x0e
    373a:	5f 85       	ldd	r21, Y+15	; 0x0f
    373c:	28 8b       	std	Y+16, r18	; 0x10
    373e:	39 8b       	std	Y+17, r19	; 0x11
    3740:	4a 8b       	std	Y+18, r20	; 0x12
    3742:	5b 8b       	std	Y+19, r21	; 0x13
	ipHeader->srcIPAddr = tempIp;
    3744:	8c 87       	std	Y+12, r24	; 0x0c
    3746:	9d 87       	std	Y+13, r25	; 0x0d
    3748:	ae 87       	std	Y+14, r26	; 0x0e
    374a:	bf 87       	std	Y+15, r27	; 0x0f
	ethFrame = ((unsigned char*)ipHeader);
	ethFrame -= ETH_HEADER_LEN;
    374c:	8e 01       	movw	r16, r28
    374e:	0e 50       	subi	r16, 0x0E	; 14
    3750:	10 40       	sbci	r17, 0x00	; 0
	arpIpOut(ethFrame, 0);
    3752:	c8 01       	movw	r24, r16
    3754:	40 e0       	ldi	r20, 0x00	; 0
    3756:	50 e0       	ldi	r21, 0x00	; 0
    3758:	ba 01       	movw	r22, r20
    375a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <arpIpOut>
	ethSendFrame(HTONS(ipHeader->Len)+ETH_HEADER_LEN, ethFrame);
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	9b 81       	ldd	r25, Y+3	; 0x03
    3762:	98 27       	eor	r25, r24
    3764:	89 27       	eor	r24, r25
    3766:	98 27       	eor	r25, r24
    3768:	0e 96       	adiw	r24, 0x0e	; 14
    376a:	b8 01       	movw	r22, r16
    376c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ethSendFrame>
}
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	08 95       	ret

0000377a <icmpIpIn>:
void icmpIpIn(struct ntIPHeader* ipHeader)
{
	struct ntICMPHeader* icmpHeader;
	icmpHeader = (struct ntICMPHeader*)((unsigned char*)ipHeader + IP_HEADER_LEN);
	// check ICMP type
	switch(icmpHeader->Type)
    377a:	fc 01       	movw	r30, r24
    377c:	24 89       	ldd	r18, Z+20	; 0x14
    377e:	28 30       	cpi	r18, 0x08	; 8
    3780:	11 f4       	brne	.+4      	; 0x3786 <icmpIpIn+0xc>
	{
	case ICMP_TYPE_ECHOREQUEST:
		// echo request
		icmpEchoReply(ipHeader);
    3782:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <icmpEchoReply>
    3786:	08 95       	ret

00003788 <ipChecksum>:
#include "icmp.h"
#include "uart.h"
struct ipConfig IpMyConfig;	///< Local IP address/config structure
//Ham tinh checksum cho goi ip
unsigned int ipChecksum(unsigned char *data, unsigned int len)
{
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	8c 01       	movw	r16, r24
    register unsigned long sum = 0;

    for (;;) {
        if (len < 2)
    3792:	62 30       	cpi	r22, 0x02	; 2
    3794:	71 05       	cpc	r23, r1
    3796:	e0 f0       	brcs	.+56     	; 0x37d0 <ipChecksum+0x48>
    3798:	fb 01       	movw	r30, r22
    379a:	ec 01       	movw	r28, r24
#include "uart.h"
struct ipConfig IpMyConfig;	///< Local IP address/config structure
//Ham tinh checksum cho goi ip
unsigned int ipChecksum(unsigned char *data, unsigned int len)
{
    register unsigned long sum = 0;
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	dc 01       	movw	r26, r24

    for (;;) {
        if (len < 2)
            break;
		sum += *((unsigned int *)data);
    37a2:	29 91       	ld	r18, Y+
    37a4:	39 91       	ld	r19, Y+
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	50 e0       	ldi	r21, 0x00	; 0
    37aa:	82 0f       	add	r24, r18
    37ac:	93 1f       	adc	r25, r19
    37ae:	a4 1f       	adc	r26, r20
    37b0:	b5 1f       	adc	r27, r21
		data+=2;
        len -= 2;
    37b2:	32 97       	sbiw	r30, 0x02	; 2
unsigned int ipChecksum(unsigned char *data, unsigned int len)
{
    register unsigned long sum = 0;

    for (;;) {
        if (len < 2)
    37b4:	e2 30       	cpi	r30, 0x02	; 2
    37b6:	f1 05       	cpc	r31, r1
    37b8:	a0 f7       	brcc	.-24     	; 0x37a2 <ipChecksum+0x1a>
#include "udp.h"
#include "icmp.h"
#include "uart.h"
struct ipConfig IpMyConfig;	///< Local IP address/config structure
//Ham tinh checksum cho goi ip
unsigned int ipChecksum(unsigned char *data, unsigned int len)
    37ba:	62 50       	subi	r22, 0x02	; 2
    37bc:	70 40       	sbci	r23, 0x00	; 0
    37be:	9b 01       	movw	r18, r22
    37c0:	2e 7f       	andi	r18, 0xFE	; 254
    37c2:	2e 5f       	subi	r18, 0xFE	; 254
    37c4:	3f 4f       	sbci	r19, 0xFF	; 255
    37c6:	02 0f       	add	r16, r18
    37c8:	13 1f       	adc	r17, r19
    37ca:	61 70       	andi	r22, 0x01	; 1
    37cc:	70 70       	andi	r23, 0x00	; 0
    37ce:	03 c0       	rjmp	.+6      	; 0x37d6 <ipChecksum+0x4e>
{
    register unsigned long sum = 0;
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	dc 01       	movw	r26, r24
            break;
		sum += *((unsigned int *)data);
		data+=2;
        len -= 2;
    }
    if (len)
    37d6:	61 15       	cp	r22, r1
    37d8:	71 05       	cpc	r23, r1
    37da:	31 f0       	breq	.+12     	; 0x37e8 <ipChecksum+0x60>
        sum += *(unsigned char *) data;
    37dc:	f8 01       	movw	r30, r16
    37de:	20 81       	ld	r18, Z
    37e0:	82 0f       	add	r24, r18
    37e2:	91 1d       	adc	r25, r1
    37e4:	a1 1d       	adc	r26, r1
    37e6:	b1 1d       	adc	r27, r1

    while ((len = (unsigned int) (sum >> 16)) != 0)
    37e8:	9d 01       	movw	r18, r26
    37ea:	10 97       	sbiw	r26, 0x00	; 0
    37ec:	39 f0       	breq	.+14     	; 0x37fc <ipChecksum+0x74>
        sum = (unsigned int) sum + len;
    37ee:	82 0f       	add	r24, r18
    37f0:	93 1f       	adc	r25, r19
    37f2:	a0 e0       	ldi	r26, 0x00	; 0
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
        len -= 2;
    }
    if (len)
        sum += *(unsigned char *) data;

    while ((len = (unsigned int) (sum >> 16)) != 0)
    37f6:	9d 01       	movw	r18, r26
    37f8:	10 97       	sbiw	r26, 0x00	; 0
    37fa:	c9 f7       	brne	.-14     	; 0x37ee <ipChecksum+0x66>
        sum = (unsigned int) sum + len;

    return (unsigned int) sum ^ 0xFFFF;
    37fc:	9c 01       	movw	r18, r24
    37fe:	20 95       	com	r18
    3800:	30 95       	com	r19
}
    3802:	82 2f       	mov	r24, r18
    3804:	93 2f       	mov	r25, r19
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	1f 91       	pop	r17
    380c:	0f 91       	pop	r16
    380e:	08 95       	ret

00003810 <ipSetConfig>:
//Set cac gia tri cau hinh cho giao thuc ip
void ipSetConfig(unsigned long myIp, unsigned long netmask, unsigned long gatewayIp)
{
    3810:	af 92       	push	r10
    3812:	bf 92       	push	r11
    3814:	cf 92       	push	r12
    3816:	df 92       	push	r13
    3818:	ef 92       	push	r14
    381a:	ff 92       	push	r15
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <ipSetConfig+0x16>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <ipSetConfig+0x18>
    3828:	00 d0       	rcall	.+0      	; 0x382a <ipSetConfig+0x1a>
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	5b 01       	movw	r10, r22
    3830:	6c 01       	movw	r12, r24
	struct ntEthAddr ethaddr;

	// set local addressing
	IpMyConfig.ip = myIp;
    3832:	60 93 1d 06 	sts	0x061D, r22
    3836:	70 93 1e 06 	sts	0x061E, r23
    383a:	80 93 1f 06 	sts	0x061F, r24
    383e:	90 93 20 06 	sts	0x0620, r25
	IpMyConfig.netmask = netmask;
    3842:	20 93 21 06 	sts	0x0621, r18
    3846:	30 93 22 06 	sts	0x0622, r19
    384a:	40 93 23 06 	sts	0x0623, r20
    384e:	50 93 24 06 	sts	0x0624, r21
	IpMyConfig.gateway = gatewayIp;
    3852:	e0 92 25 06 	sts	0x0625, r14
    3856:	f0 92 26 06 	sts	0x0626, r15
    385a:	00 93 27 06 	sts	0x0627, r16
    385e:	10 93 28 06 	sts	0x0628, r17

	// set ARP association
	ethGetMacAddress(ethaddr.addr);
    3862:	8e 01       	movw	r16, r28
    3864:	0f 5f       	subi	r16, 0xFF	; 255
    3866:	1f 4f       	sbci	r17, 0xFF	; 255
    3868:	c8 01       	movw	r24, r16
    386a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ethGetMacAddress>
	arpSetAddress(&ethaddr, myIp);
    386e:	c8 01       	movw	r24, r16
    3870:	b6 01       	movw	r22, r12
    3872:	a5 01       	movw	r20, r10
    3874:	0e 94 ae 07 	call	0xf5c	; 0xf5c <arpSetAddress>

}
    3878:	26 96       	adiw	r28, 0x06	; 6
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	cf 91       	pop	r28
    3886:	df 91       	pop	r29
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	ff 90       	pop	r15
    388e:	ef 90       	pop	r14
    3890:	df 90       	pop	r13
    3892:	cf 90       	pop	r12
    3894:	bf 90       	pop	r11
    3896:	af 90       	pop	r10
    3898:	08 95       	ret

0000389a <ipGetConfig>:
//Tra lai con tro den struct ipConfig
struct ipConfig* ipGetConfig(void)
{
	return &IpMyConfig;
}
    389a:	8d e1       	ldi	r24, 0x1D	; 29
    389c:	96 e0       	ldi	r25, 0x06	; 6
    389e:	08 95       	ret

000038a0 <ipSend>:

//Ham gui 1 goi IP
void ipSend(unsigned long dstIp, unsigned char protocol, unsigned int len, unsigned char* ipData)
{
    38a0:	6f 92       	push	r6
    38a2:	7f 92       	push	r7
    38a4:	8f 92       	push	r8
    38a6:	9f 92       	push	r9
    38a8:	af 92       	push	r10
    38aa:	bf 92       	push	r11
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	5b 01       	movw	r10, r22
    38be:	6c 01       	movw	r12, r24
    38c0:	e4 2f       	mov	r30, r20
	struct ntEthHeader* ethHeader;
	struct ntIPHeader* ipHeader;
	ipHeader = (struct ntIPHeader*)(ipData - IP_HEADER_LEN);
    38c2:	e8 01       	movw	r28, r16
    38c4:	64 97       	sbiw	r28, 0x14	; 20
	ethHeader = (struct ntEthHeader*)(ipData - IP_HEADER_LEN - ETH_HEADER_LEN);
    38c6:	0f 2e       	mov	r0, r31
    38c8:	fe ed       	ldi	r31, 0xDE	; 222
    38ca:	8f 2e       	mov	r8, r31
    38cc:	ff ef       	ldi	r31, 0xFF	; 255
    38ce:	9f 2e       	mov	r9, r31
    38d0:	f0 2d       	mov	r31, r0
    38d2:	80 0e       	add	r8, r16
    38d4:	91 1e       	adc	r9, r17
	len += IP_HEADER_LEN;
    38d6:	0f 2e       	mov	r0, r31
    38d8:	f4 e1       	ldi	r31, 0x14	; 20
    38da:	6f 2e       	mov	r6, r31
    38dc:	77 24       	eor	r7, r7
    38de:	f0 2d       	mov	r31, r0
    38e0:	62 0e       	add	r6, r18
    38e2:	73 1e       	adc	r7, r19

	ipHeader->desIPAddr = HTONL(dstIp);
    38e4:	29 2f       	mov	r18, r25
    38e6:	33 27       	eor	r19, r19
    38e8:	44 27       	eor	r20, r20
    38ea:	55 27       	eor	r21, r21
    38ec:	b6 2f       	mov	r27, r22
    38ee:	aa 27       	eor	r26, r26
    38f0:	99 27       	eor	r25, r25
    38f2:	88 27       	eor	r24, r24
    38f4:	82 2b       	or	r24, r18
    38f6:	93 2b       	or	r25, r19
    38f8:	a4 2b       	or	r26, r20
    38fa:	b5 2b       	or	r27, r21
    38fc:	b6 01       	movw	r22, r12
    38fe:	a5 01       	movw	r20, r10
    3900:	40 70       	andi	r20, 0x00	; 0
    3902:	50 70       	andi	r21, 0x00	; 0
    3904:	70 70       	andi	r23, 0x00	; 0
    3906:	45 2f       	mov	r20, r21
    3908:	56 2f       	mov	r21, r22
    390a:	67 2f       	mov	r22, r23
    390c:	77 27       	eor	r23, r23
    390e:	9a 01       	movw	r18, r20
    3910:	ab 01       	movw	r20, r22
    3912:	28 2b       	or	r18, r24
    3914:	39 2b       	or	r19, r25
    3916:	4a 2b       	or	r20, r26
    3918:	5b 2b       	or	r21, r27
    391a:	d6 01       	movw	r26, r12
    391c:	c5 01       	movw	r24, r10
    391e:	80 70       	andi	r24, 0x00	; 0
    3920:	a0 70       	andi	r26, 0x00	; 0
    3922:	b0 70       	andi	r27, 0x00	; 0
    3924:	ba 2f       	mov	r27, r26
    3926:	a9 2f       	mov	r26, r25
    3928:	98 2f       	mov	r25, r24
    392a:	88 27       	eor	r24, r24
    392c:	82 2b       	or	r24, r18
    392e:	93 2b       	or	r25, r19
    3930:	a4 2b       	or	r26, r20
    3932:	b5 2b       	or	r27, r21
    3934:	88 8b       	std	Y+16, r24	; 0x10
    3936:	99 8b       	std	Y+17, r25	; 0x11
    3938:	aa 8b       	std	Y+18, r26	; 0x12
    393a:	bb 8b       	std	Y+19, r27	; 0x13
	ipHeader->srcIPAddr = HTONL(IpMyConfig.ip);
    393c:	80 91 1d 06 	lds	r24, 0x061D
    3940:	90 91 1e 06 	lds	r25, 0x061E
    3944:	a0 91 1f 06 	lds	r26, 0x061F
    3948:	b0 91 20 06 	lds	r27, 0x0620
    394c:	eb 2e       	mov	r14, r27
    394e:	ff 24       	eor	r15, r15
    3950:	00 27       	eor	r16, r16
    3952:	11 27       	eor	r17, r17
    3954:	58 2f       	mov	r21, r24
    3956:	44 27       	eor	r20, r20
    3958:	33 27       	eor	r19, r19
    395a:	22 27       	eor	r18, r18
    395c:	e2 2a       	or	r14, r18
    395e:	f3 2a       	or	r15, r19
    3960:	04 2b       	or	r16, r20
    3962:	15 2b       	or	r17, r21
    3964:	9c 01       	movw	r18, r24
    3966:	ad 01       	movw	r20, r26
    3968:	20 70       	andi	r18, 0x00	; 0
    396a:	30 70       	andi	r19, 0x00	; 0
    396c:	50 70       	andi	r21, 0x00	; 0
    396e:	23 2f       	mov	r18, r19
    3970:	34 2f       	mov	r19, r20
    3972:	45 2f       	mov	r20, r21
    3974:	55 27       	eor	r21, r21
    3976:	2e 29       	or	r18, r14
    3978:	3f 29       	or	r19, r15
    397a:	40 2b       	or	r20, r16
    397c:	51 2b       	or	r21, r17
    397e:	80 70       	andi	r24, 0x00	; 0
    3980:	a0 70       	andi	r26, 0x00	; 0
    3982:	b0 70       	andi	r27, 0x00	; 0
    3984:	ee 24       	eor	r14, r14
    3986:	f8 2e       	mov	r15, r24
    3988:	09 2f       	mov	r16, r25
    398a:	1a 2f       	mov	r17, r26
    398c:	2e 29       	or	r18, r14
    398e:	3f 29       	or	r19, r15
    3990:	40 2b       	or	r20, r16
    3992:	51 2b       	or	r21, r17
    3994:	2c 87       	std	Y+12, r18	; 0x0c
    3996:	3d 87       	std	Y+13, r19	; 0x0d
    3998:	4e 87       	std	Y+14, r20	; 0x0e
    399a:	5f 87       	std	Y+15, r21	; 0x0f
	ipHeader->Protocol = protocol;
    399c:	e9 87       	std	Y+9, r30	; 0x09
	ipHeader->Len = HTONS(len);
    399e:	96 2d       	mov	r25, r6
    39a0:	87 2d       	mov	r24, r7
    39a2:	9b 83       	std	Y+3, r25	; 0x03
    39a4:	8a 83       	std	Y+2, r24	; 0x02
	ipHeader->verHdrLen = 0x45;
    39a6:	85 e4       	ldi	r24, 0x45	; 69
    39a8:	88 83       	st	Y, r24
	ipHeader->ToS = 0;
    39aa:	19 82       	std	Y+1, r1	; 0x01
	ipHeader->IDNumber = 0;
    39ac:	1d 82       	std	Y+5, r1	; 0x05
    39ae:	1c 82       	std	Y+4, r1	; 0x04
	ipHeader->Offset = 0;
    39b0:	1f 82       	std	Y+7, r1	; 0x07
    39b2:	1e 82       	std	Y+6, r1	; 0x06
	ipHeader->TTL = IP_TIME_TO_LIVE;
    39b4:	80 e8       	ldi	r24, 0x80	; 128
    39b6:	88 87       	std	Y+8, r24	; 0x08
	ipHeader->Checksum = 0;
    39b8:	1b 86       	std	Y+11, r1	; 0x0b
    39ba:	1a 86       	std	Y+10, r1	; 0x0a

	ipHeader->Checksum = ipChecksum((unsigned char*)ipHeader, IP_HEADER_LEN);
    39bc:	ce 01       	movw	r24, r28
    39be:	64 e1       	ldi	r22, 0x14	; 20
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <ipChecksum>
    39c6:	9b 87       	std	Y+11, r25	; 0x0b
    39c8:	8a 87       	std	Y+10, r24	; 0x0a
	if( (dstIp & IpMyConfig.netmask) == (IpMyConfig.ip & IpMyConfig.netmask) )
    39ca:	80 91 1d 06 	lds	r24, 0x061D
    39ce:	90 91 1e 06 	lds	r25, 0x061E
    39d2:	a0 91 1f 06 	lds	r26, 0x061F
    39d6:	b0 91 20 06 	lds	r27, 0x0620
    39da:	a8 26       	eor	r10, r24
    39dc:	b9 26       	eor	r11, r25
    39de:	ca 26       	eor	r12, r26
    39e0:	db 26       	eor	r13, r27
    39e2:	80 91 21 06 	lds	r24, 0x0621
    39e6:	90 91 22 06 	lds	r25, 0x0622
    39ea:	a0 91 23 06 	lds	r26, 0x0623
    39ee:	b0 91 24 06 	lds	r27, 0x0624
    39f2:	a8 22       	and	r10, r24
    39f4:	b9 22       	and	r11, r25
    39f6:	ca 22       	and	r12, r26
    39f8:	db 22       	and	r13, r27
    39fa:	a1 14       	cp	r10, r1
    39fc:	b1 04       	cpc	r11, r1
    39fe:	c1 04       	cpc	r12, r1
    3a00:	d1 04       	cpc	r13, r1
    3a02:	39 f4       	brne	.+14     	; 0x3a12 <ipSend+0x172>
		arpIpOut((unsigned char*)ethHeader,0);					// local send
    3a04:	c4 01       	movw	r24, r8
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	ba 01       	movw	r22, r20
    3a0c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <arpIpOut>
    3a10:	0b c0       	rjmp	.+22     	; 0x3a28 <ipSend+0x188>
	else
		arpIpOut((unsigned char*)ethHeader,IpMyConfig.gateway);	// gateway send
    3a12:	40 91 25 06 	lds	r20, 0x0625
    3a16:	50 91 26 06 	lds	r21, 0x0626
    3a1a:	60 91 27 06 	lds	r22, 0x0627
    3a1e:	70 91 28 06 	lds	r23, 0x0628
    3a22:	c4 01       	movw	r24, r8
    3a24:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <arpIpOut>
	len += ETH_HEADER_LEN;
	ethSendFrame(len, (unsigned char*)ethHeader);
    3a28:	c3 01       	movw	r24, r6
    3a2a:	0e 96       	adiw	r24, 0x0e	; 14
    3a2c:	b4 01       	movw	r22, r8
    3a2e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ethSendFrame>
}
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	df 90       	pop	r13
    3a40:	cf 90       	pop	r12
    3a42:	bf 90       	pop	r11
    3a44:	af 90       	pop	r10
    3a46:	9f 90       	pop	r9
    3a48:	8f 90       	pop	r8
    3a4a:	7f 90       	pop	r7
    3a4c:	6f 90       	pop	r6
    3a4e:	08 95       	ret

00003a50 <IPProcess>:
//--------------------------------------------------------------------------------------
//Ham x? ly goi IP, duoc goi boi giao thuc ethernet khi paket type duoc xac dinh la IP
void IPProcess(unsigned int len, struct ntIPHeader* packet)
{
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	6c 01       	movw	r12, r24
    3a62:	eb 01       	movw	r28, r22
	// check IP addressing, stop processing if not for me and not a broadcast
	if( (HTONL(packet->desIPAddr) != ipGetConfig()->ip) &&
    3a64:	88 89       	ldd	r24, Y+16	; 0x10
    3a66:	99 89       	ldd	r25, Y+17	; 0x11
    3a68:	aa 89       	ldd	r26, Y+18	; 0x12
    3a6a:	bb 89       	ldd	r27, Y+19	; 0x13
    3a6c:	eb 2e       	mov	r14, r27
    3a6e:	ff 24       	eor	r15, r15
    3a70:	00 27       	eor	r16, r16
    3a72:	11 27       	eor	r17, r17
    3a74:	58 2f       	mov	r21, r24
    3a76:	44 27       	eor	r20, r20
    3a78:	33 27       	eor	r19, r19
    3a7a:	22 27       	eor	r18, r18
    3a7c:	e2 2a       	or	r14, r18
    3a7e:	f3 2a       	or	r15, r19
    3a80:	04 2b       	or	r16, r20
    3a82:	15 2b       	or	r17, r21
    3a84:	9c 01       	movw	r18, r24
    3a86:	ad 01       	movw	r20, r26
    3a88:	20 70       	andi	r18, 0x00	; 0
    3a8a:	30 70       	andi	r19, 0x00	; 0
    3a8c:	50 70       	andi	r21, 0x00	; 0
    3a8e:	23 2f       	mov	r18, r19
    3a90:	34 2f       	mov	r19, r20
    3a92:	45 2f       	mov	r20, r21
    3a94:	55 27       	eor	r21, r21
    3a96:	2e 29       	or	r18, r14
    3a98:	3f 29       	or	r19, r15
    3a9a:	40 2b       	or	r20, r16
    3a9c:	51 2b       	or	r21, r17
    3a9e:	80 70       	andi	r24, 0x00	; 0
    3aa0:	a0 70       	andi	r26, 0x00	; 0
    3aa2:	b0 70       	andi	r27, 0x00	; 0
    3aa4:	ee 24       	eor	r14, r14
    3aa6:	f8 2e       	mov	r15, r24
    3aa8:	09 2f       	mov	r16, r25
    3aaa:	1a 2f       	mov	r17, r26
    3aac:	e2 2a       	or	r14, r18
    3aae:	f3 2a       	or	r15, r19
    3ab0:	04 2b       	or	r16, r20
    3ab2:	15 2b       	or	r17, r21
    3ab4:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    3ab8:	fc 01       	movw	r30, r24
    3aba:	20 81       	ld	r18, Z
    3abc:	31 81       	ldd	r19, Z+1	; 0x01
    3abe:	42 81       	ldd	r20, Z+2	; 0x02
    3ac0:	53 81       	ldd	r21, Z+3	; 0x03
    3ac2:	e2 16       	cp	r14, r18
    3ac4:	f3 06       	cpc	r15, r19
    3ac6:	04 07       	cpc	r16, r20
    3ac8:	15 07       	cpc	r17, r21
    3aca:	d9 f0       	breq	.+54     	; 0x3b02 <IPProcess+0xb2>
		(HTONL(packet->desIPAddr) != (ipGetConfig()->ip|ipGetConfig()->netmask)) &&
    3acc:	84 81       	ldd	r24, Z+4	; 0x04
    3ace:	95 81       	ldd	r25, Z+5	; 0x05
    3ad0:	a6 81       	ldd	r26, Z+6	; 0x06
    3ad2:	b7 81       	ldd	r27, Z+7	; 0x07
    3ad4:	82 2b       	or	r24, r18
    3ad6:	93 2b       	or	r25, r19
    3ad8:	a4 2b       	or	r26, r20
    3ada:	b5 2b       	or	r27, r21
//--------------------------------------------------------------------------------------
//Ham x? ly goi IP, duoc goi boi giao thuc ethernet khi paket type duoc xac dinh la IP
void IPProcess(unsigned int len, struct ntIPHeader* packet)
{
	// check IP addressing, stop processing if not for me and not a broadcast
	if( (HTONL(packet->desIPAddr) != ipGetConfig()->ip) &&
    3adc:	e8 16       	cp	r14, r24
    3ade:	f9 06       	cpc	r15, r25
    3ae0:	0a 07       	cpc	r16, r26
    3ae2:	1b 07       	cpc	r17, r27
    3ae4:	71 f0       	breq	.+28     	; 0x3b02 <IPProcess+0xb2>
		(HTONL(packet->desIPAddr) != (ipGetConfig()->ip|ipGetConfig()->netmask)) &&
    3ae6:	8f ef       	ldi	r24, 0xFF	; 255
    3ae8:	e8 16       	cp	r14, r24
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	f8 06       	cpc	r15, r24
    3aee:	8f ef       	ldi	r24, 0xFF	; 255
    3af0:	08 07       	cpc	r16, r24
    3af2:	8f ef       	ldi	r24, 0xFF	; 255
    3af4:	18 07       	cpc	r17, r24
    3af6:	29 f0       	breq	.+10     	; 0x3b02 <IPProcess+0xb2>
		(HTONL(packet->desIPAddr) != 0xFFFFFFFF) &&
    3af8:	21 15       	cp	r18, r1
    3afa:	31 05       	cpc	r19, r1
    3afc:	41 05       	cpc	r20, r1
    3afe:	51 05       	cpc	r21, r1
    3b00:	f1 f4       	brne	.+60     	; 0x3b3e <IPProcess+0xee>
		(ipGetConfig()->ip != 0x00000000) ) 
		return;

	// handle ICMP packet
	if( packet->Protocol == IP_PROTO_ICMP )
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	81 30       	cpi	r24, 0x01	; 1
    3b06:	21 f4       	brne	.+8      	; 0x3b10 <IPProcess+0xc0>
		icmpIpIn((struct ntIPHeader*)packet);
    3b08:	ce 01       	movw	r24, r28
    3b0a:	0e 94 bd 1b 	call	0x377a	; 0x377a <icmpIpIn>
    3b0e:	17 c0       	rjmp	.+46     	; 0x3b3e <IPProcess+0xee>
	else if( packet->Protocol == IP_PROTO_UDP )
    3b10:	81 31       	cpi	r24, 0x11	; 17
    3b12:	29 f4       	brne	.+10     	; 0x3b1e <IPProcess+0xce>
		UDPProcess(len, ((struct ntIPHeader*)packet) );
    3b14:	c6 01       	movw	r24, r12
    3b16:	be 01       	movw	r22, r28
    3b18:	0e 94 cd 34 	call	0x699a	; 0x699a <UDPProcess>
    3b1c:	10 c0       	rjmp	.+32     	; 0x3b3e <IPProcess+0xee>
	else if( packet->Protocol == IP_PROTO_TCP )
    3b1e:	86 30       	cpi	r24, 0x06	; 6
    3b20:	71 f4       	brne	.+28     	; 0x3b3e <IPProcess+0xee>
		TCPProcess((unsigned char *)packet,len-((packet->verHdrLen & 0x0F)<<2));
    3b22:	88 81       	ld	r24, Y
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	8f 70       	andi	r24, 0x0F	; 15
    3b28:	90 70       	andi	r25, 0x00	; 0
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	b6 01       	movw	r22, r12
    3b34:	68 1b       	sub	r22, r24
    3b36:	79 0b       	sbc	r23, r25
    3b38:	ce 01       	movw	r24, r28
    3b3a:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <TCPProcess>
}
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	08 95       	ret

00003b50 <active_countdown>:
	while(!eeprom_is_ready());
	eeprom_write_byte(device + 22, state);
	_delay_ms(1);
}
void active_countdown()
{
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	ce e3       	ldi	r28, 0x3E	; 62
    3b66:	d6 e0       	ldi	r29, 0x06	; 6
    3b68:	0f 2e       	mov	r0, r31
    3b6a:	f4 e3       	ldi	r31, 0x34	; 52
    3b6c:	ef 2e       	mov	r14, r31
    3b6e:	f6 e0       	ldi	r31, 0x06	; 6
    3b70:	ff 2e       	mov	r15, r31
    3b72:	f0 2d       	mov	r31, r0
    3b74:	00 e0       	ldi	r16, 0x00	; 0
    3b76:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(1);
	while(!eeprom_is_ready());
	eeprom_write_byte(device + 22, state);
	_delay_ms(1);
}
void active_countdown()
    3b78:	0f 5f       	subi	r16, 0xFF	; 255
    3b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7c:	80 2f       	mov	r24, r16
    3b7e:	91 2f       	mov	r25, r17
    3b80:	6e 01       	movw	r12, r28
{
	for(uint8_t i = 1;i <= 4;i++)
	if(state_count[i] == 240 || state_count[i] == 15)
    3b82:	48 81       	ld	r20, Y
    3b84:	40 3f       	cpi	r20, 0xF0	; 240
    3b86:	11 f0       	breq	.+4      	; 0x3b8c <active_countdown+0x3c>
    3b88:	4f 30       	cpi	r20, 0x0F	; 15
    3b8a:	f9 f4       	brne	.+62     	; 0x3bca <active_countdown+0x7a>
	_delay_ms(1);
	while(!eeprom_is_ready());
	eeprom_write_byte(device + 22, state);
	_delay_ms(1);
}
void active_countdown()
    3b8c:	57 01       	movw	r10, r14
{
	for(uint8_t i = 1;i <= 4;i++)
	if(state_count[i] == 240 || state_count[i] == 15)
		if(countdown_min[i] == 1)
    3b8e:	f7 01       	movw	r30, r14
    3b90:	20 81       	ld	r18, Z
    3b92:	31 81       	ldd	r19, Z+1	; 0x01
    3b94:	21 30       	cpi	r18, 0x01	; 1
    3b96:	31 05       	cpc	r19, r1
    3b98:	79 f4       	brne	.+30     	; 0x3bb8 <active_countdown+0x68>
			{
				if(state_count[i] == 240)	on_device(i);
    3b9a:	40 3f       	cpi	r20, 0xF0	; 240
    3b9c:	19 f4       	brne	.+6      	; 0x3ba4 <active_countdown+0x54>
    3b9e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <on_device>
    3ba2:	04 c0       	rjmp	.+8      	; 0x3bac <active_countdown+0x5c>
				else	if(state_count[i] == 15)	off_device(i);
    3ba4:	4f 30       	cpi	r20, 0x0F	; 15
    3ba6:	11 f4       	brne	.+4      	; 0x3bac <active_countdown+0x5c>
    3ba8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <off_device>
				state_count[i] = countdown_min[i] = 0;	
    3bac:	f5 01       	movw	r30, r10
    3bae:	11 82       	std	Z+1, r1	; 0x01
    3bb0:	10 82       	st	Z, r1
    3bb2:	f6 01       	movw	r30, r12
    3bb4:	10 82       	st	Z, r1
    3bb6:	09 c0       	rjmp	.+18     	; 0x3bca <active_countdown+0x7a>
			}							
		else
			if(state_count[i] == 240 || state_count[i] == 15)
    3bb8:	40 3f       	cpi	r20, 0xF0	; 240
    3bba:	11 f0       	breq	.+4      	; 0x3bc0 <active_countdown+0x70>
    3bbc:	4f 30       	cpi	r20, 0x0F	; 15
    3bbe:	29 f4       	brne	.+10     	; 0x3bca <active_countdown+0x7a>
				countdown_min[i]--;					
    3bc0:	21 50       	subi	r18, 0x01	; 1
    3bc2:	30 40       	sbci	r19, 0x00	; 0
    3bc4:	f5 01       	movw	r30, r10
    3bc6:	31 83       	std	Z+1, r19	; 0x01
    3bc8:	20 83       	st	Z, r18
    3bca:	21 96       	adiw	r28, 0x01	; 1
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	e8 0e       	add	r14, r24
    3bd2:	f9 1e       	adc	r15, r25
	eeprom_write_byte(device + 22, state);
	_delay_ms(1);
}
void active_countdown()
{
	for(uint8_t i = 1;i <= 4;i++)
    3bd4:	04 30       	cpi	r16, 0x04	; 4
    3bd6:	11 05       	cpc	r17, r1
    3bd8:	79 f6       	brne	.-98     	; 0x3b78 <active_countdown+0x28>
				state_count[i] = countdown_min[i] = 0;	
			}							
		else
			if(state_count[i] == 240 || state_count[i] == 15)
				countdown_min[i]--;					
}
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	ff 90       	pop	r15
    3be4:	ef 90       	pop	r14
    3be6:	df 90       	pop	r13
    3be8:	cf 90       	pop	r12
    3bea:	bf 90       	pop	r11
    3bec:	af 90       	pop	r10
    3bee:	08 95       	ret

00003bf0 <begin_auto>:
uint8_t high[5], low[5];
void begin_auto(uint8_t device)
{
	high[device] = 0;
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	ee 5b       	subi	r30, 0xBE	; 190
    3bf6:	f9 4f       	sbci	r31, 0xF9	; 249
    3bf8:	10 82       	st	Z, r1
	low[device] = 0;
    3bfa:	89 5b       	subi	r24, 0xB9	; 185
    3bfc:	99 4f       	sbci	r25, 0xF9	; 249
    3bfe:	fc 01       	movw	r30, r24
    3c00:	10 82       	st	Z, r1
}
    3c02:	08 95       	ret

00003c04 <off_device>:
}

//Ham DK TB
void off_device (uint8_t val)
{
	switch (val)
    3c04:	82 30       	cpi	r24, 0x02	; 2
    3c06:	61 f0       	breq	.+24     	; 0x3c20 <off_device+0x1c>
    3c08:	83 30       	cpi	r24, 0x03	; 3
    3c0a:	18 f4       	brcc	.+6      	; 0x3c12 <off_device+0xe>
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	69 f4       	brne	.+26     	; 0x3c2a <off_device+0x26>
    3c10:	05 c0       	rjmp	.+10     	; 0x3c1c <off_device+0x18>
    3c12:	83 30       	cpi	r24, 0x03	; 3
    3c14:	39 f0       	breq	.+14     	; 0x3c24 <off_device+0x20>
    3c16:	84 30       	cpi	r24, 0x04	; 4
    3c18:	41 f4       	brne	.+16     	; 0x3c2a <off_device+0x26>
    3c1a:	06 c0       	rjmp	.+12     	; 0x3c28 <off_device+0x24>
		{
			case 1:		OFF1	break;
    3c1c:	af 9a       	sbi	0x15, 7	; 21
    3c1e:	08 95       	ret
			case 2: 	OFF2	break;
    3c20:	ae 9a       	sbi	0x15, 6	; 21
    3c22:	08 95       	ret
			case 3: 	OFF3	break;
    3c24:	ad 9a       	sbi	0x15, 5	; 21
    3c26:	08 95       	ret
			case 4: 	OFF4	break;
    3c28:	ac 9a       	sbi	0x15, 4	; 21
    3c2a:	08 95       	ret

00003c2c <on_device>:
			default: break;
		}
}
void on_device (uint8_t val)
{
	switch (val)
    3c2c:	82 30       	cpi	r24, 0x02	; 2
    3c2e:	61 f0       	breq	.+24     	; 0x3c48 <on_device+0x1c>
    3c30:	83 30       	cpi	r24, 0x03	; 3
    3c32:	18 f4       	brcc	.+6      	; 0x3c3a <on_device+0xe>
    3c34:	81 30       	cpi	r24, 0x01	; 1
    3c36:	69 f4       	brne	.+26     	; 0x3c52 <on_device+0x26>
    3c38:	05 c0       	rjmp	.+10     	; 0x3c44 <on_device+0x18>
    3c3a:	83 30       	cpi	r24, 0x03	; 3
    3c3c:	39 f0       	breq	.+14     	; 0x3c4c <on_device+0x20>
    3c3e:	84 30       	cpi	r24, 0x04	; 4
    3c40:	41 f4       	brne	.+16     	; 0x3c52 <on_device+0x26>
    3c42:	06 c0       	rjmp	.+12     	; 0x3c50 <on_device+0x24>
		{
			case 1:		ON1		break;
    3c44:	af 98       	cbi	0x15, 7	; 21
    3c46:	08 95       	ret
			case 2: 	ON2		break;
    3c48:	ae 98       	cbi	0x15, 6	; 21
    3c4a:	08 95       	ret
			case 3: 	ON3		break;
    3c4c:	ad 98       	cbi	0x15, 5	; 21
    3c4e:	08 95       	ret
			case 4: 	ON4		break;
    3c50:	ac 98       	cbi	0x15, 4	; 21
    3c52:	08 95       	ret

00003c54 <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(){
	char HNib, LNib;
	DATA_O |=0xF0;
    3c54:	8b b3       	in	r24, 0x1b	; 27
    3c56:	80 6f       	ori	r24, 0xF0	; 240
    3c58:	8b bb       	out	0x1b, r24	; 27

    DDR_DATA &=0x0F;
    3c5a:	8a b3       	in	r24, 0x1a	; 26
    3c5c:	8f 70       	andi	r24, 0x0F	; 15
    3c5e:	8a bb       	out	0x1a, r24	; 26
	sbi(CTRL,EN); //enable
    3c60:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
    3c62:	db 9a       	sbi	0x1b, 3	; 27
	

	HNib=DATA_I & 0xF0;
    3c64:	89 b3       	in	r24, 0x19	; 25
	cbi(CTRL,EN); //disable
    3c66:	db 98       	cbi	0x1b, 3	; 27

	sbi(CTRL,EN); //enable
    3c68:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
    3c6a:	db 9a       	sbi	0x1b, 3	; 27
	LNib = DATA_I & 0xF0;
    3c6c:	99 b3       	in	r25, 0x19	; 25
	cbi(CTRL,EN); //disable
    3c6e:	db 98       	cbi	0x1b, 3	; 27
	LNib>>=4;
    3c70:	92 95       	swap	r25
    3c72:	9f 70       	andi	r25, 0x0F	; 15
    DDR_DATA &=0x0F;
	sbi(CTRL,EN); //enable
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
	

	HNib=DATA_I & 0xF0;
    3c74:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
    3c76:	89 2b       	or	r24, r25
    3c78:	08 95       	ret

00003c7a <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
    3c7a:	9b b3       	in	r25, 0x1b	; 27
    3c7c:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
    3c7e:	28 2f       	mov	r18, r24
    3c80:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
    3c82:	29 2b       	or	r18, r25
    3c84:	2b bb       	out	0x1b, r18	; 27
	sbi(CTRL,EN); //enable
    3c86:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable	
    3c88:	db 98       	cbi	0x1b, 3	; 27

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
    3c8a:	82 95       	swap	r24
    3c8c:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
    3c8e:	98 2b       	or	r25, r24
    3c90:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
    3c92:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
    3c94:	db 98       	cbi	0x1b, 3	; 27
}
    3c96:	08 95       	ret

00003c98 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
    3c98:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
    3c9a:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
    3c9c:	db 98       	cbi	0x1b, 3	; 27
}
    3c9e:	08 95       	ret

00003ca0 <wait_LCD>:

void wait_LCD(){	
    3ca0:	0f 93       	push	r16
    3ca2:	1f 93       	push	r17
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	0f 92       	push	r0
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
    3cae:	8e 01       	movw	r16, r28
    3cb0:	0f 5f       	subi	r16, 0xFF	; 255
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
    3cb4:	d9 98       	cbi	0x1b, 1	; 27
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
    3cb6:	da 9a       	sbi	0x1b, 2	; 27
			temp_val=Read2Nib();
    3cb8:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <Read2Nib>
    3cbc:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	80 81       	ld	r24, Z
    3cc2:	88 23       	and	r24, r24
    3cc4:	bc f3       	brlt	.-18     	; 0x3cb4 <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
    3cc6:	da 98       	cbi	0x1b, 2	; 27
		DDR_DATA=0xFF;//Ready to Out		
    3cc8:	8f ef       	ldi	r24, 0xFF	; 255
    3cca:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	//_delay_ms(1);
	
}
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	08 95       	ret

00003cd8 <init_LCD>:


void init_LCD(){
	DDR_CTRL=0xFF;
    3cd8:	8f ef       	ldi	r24, 0xFF	; 255
    3cda:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
    3cdc:	8a bb       	out	0x1a, r24	; 26
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
    3cde:	d9 98       	cbi	0x1b, 1	; 27
	cbi(CTRL, RW); // AVR->LCD
    3ce0:	da 98       	cbi	0x1b, 2	; 27
	cbi(CTRL, EN);
    3ce2:	db 98       	cbi	0x1b, 3	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
    3ce4:	db 9a       	sbi	0x1b, 3	; 27
		sbi(DATA_O, 5); 
    3ce6:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(CTRL,EN); //disable
    3ce8:	db 98       	cbi	0x1b, 3	; 27
		wait_LCD();		
    3cea:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
		Write2Nib(0x28);//
    3cee:	88 e2       	ldi	r24, 0x28	; 40
    3cf0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();	
    3cf4:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
    3cf8:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0E);
    3cfa:	8e e0       	ldi	r24, 0x0E	; 14
    3cfc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();			
    3d00:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
    3d04:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
    3d06:	86 e0       	ldi	r24, 0x06	; 6
    3d08:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();
    3d0c:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif
}
    3d10:	08 95       	ret

00003d12 <home_LCD>:

void home_LCD(){
	cbi(CTRL,RS); // the following data is COMMAND 
    3d12:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();
    3d1a:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif	
}
    3d1e:	08 95       	ret

00003d20 <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
    3d20:	d9 98       	cbi	0x1b, 1	; 27
		wait_LCD();
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
    3d22:	82 95       	swap	r24
    3d24:	88 0f       	add	r24, r24
    3d26:	88 0f       	add	r24, r24
    3d28:	80 7c       	andi	r24, 0xC0	; 192
    3d2a:	86 0f       	add	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
    3d2c:	81 5c       	subi	r24, 0xC1	; 193
    3d2e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();
    3d32:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif	
}
    3d36:	08 95       	ret

00003d38 <clr_LCD>:

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
    3d38:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();	
    3d40:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
		
	#endif	
}
    3d44:	08 95       	ret

00003d46 <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
    3d46:	d9 9a       	sbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
    3d48:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write2Nib>
		wait_LCD();	
    3d4c:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <wait_LCD>
	#endif		
}
    3d50:	08 95       	ret

00003d52 <lcd_show_number>:
	return 0;		
}

//Xuat 1 so co 3 chu so
void lcd_show_number(uint8_t val)
{
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	18 2f       	mov	r17, r24
	if(val /100 == 0 && (val %100) /10 != 0)	putChar_LCD((val %100) /10+48);
    3d58:	84 36       	cpi	r24, 0x64	; 100
    3d5a:	68 f4       	brcc	.+26     	; 0x3d76 <lcd_show_number+0x24>
    3d5c:	64 e6       	ldi	r22, 0x64	; 100
    3d5e:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3d62:	9a 30       	cpi	r25, 0x0A	; 10
    3d64:	b0 f0       	brcs	.+44     	; 0x3d92 <lcd_show_number+0x40>
    3d66:	89 2f       	mov	r24, r25
    3d68:	6a e0       	ldi	r22, 0x0A	; 10
    3d6a:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3d6e:	80 5d       	subi	r24, 0xD0	; 208
    3d70:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    3d74:	0e c0       	rjmp	.+28     	; 0x3d92 <lcd_show_number+0x40>
	else if(val /100 != 0) {putChar_LCD(val /100+48);	putChar_LCD((val %100) /10+48);}
    3d76:	64 e6       	ldi	r22, 0x64	; 100
    3d78:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3d7c:	09 2f       	mov	r16, r25
    3d7e:	80 5d       	subi	r24, 0xD0	; 208
    3d80:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    3d84:	80 2f       	mov	r24, r16
    3d86:	6a e0       	ldi	r22, 0x0A	; 10
    3d88:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3d8c:	80 5d       	subi	r24, 0xD0	; 208
    3d8e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	putChar_LCD((val %100) %10+48);
    3d92:	81 2f       	mov	r24, r17
    3d94:	64 e6       	ldi	r22, 0x64	; 100
    3d96:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3d9a:	89 2f       	mov	r24, r25
    3d9c:	6a e0       	ldi	r22, 0x0A	; 10
    3d9e:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    3da2:	89 2f       	mov	r24, r25
    3da4:	80 5d       	subi	r24, 0xD0	; 208
    3da6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
}
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	08 95       	ret

00003db0 <print_LCD>:

void print_LCD(char* str){
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
    3db8:	88 81       	ld	r24, Y
    3dba:	88 23       	and	r24, r24
    3dbc:	51 f0       	breq	.+20     	; 0x3dd2 <print_LCD+0x22>
    3dbe:	10 e0       	ldi	r17, 0x00	; 0
    3dc0:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    3dc4:	1f 5f       	subi	r17, 0xFF	; 255
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e1 0f       	add	r30, r17
    3dca:	f1 1d       	adc	r31, r1
    3dcc:	80 81       	ld	r24, Z
    3dce:	88 23       	and	r24, r24
    3dd0:	b9 f7       	brne	.-18     	; 0x3dc0 <print_LCD+0x10>
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	1f 91       	pop	r17
    3dd8:	08 95       	ret

00003dda <TWI_Init>:
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	//TWSR=0x00; //Prescaler=1
	TWSR = 4;
    3dda:	84 e0       	ldi	r24, 0x04	; 4
    3ddc:	81 b9       	out	0x01, r24	; 1
	TWBR = _100K;
    3dde:	80 e2       	ldi	r24, 0x20	; 32
    3de0:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWINT)|(1<<TWEN);
    3de2:	84 e8       	ldi	r24, 0x84	; 132
    3de4:	86 bf       	out	0x36, r24	; 54
}
    3de6:	08 95       	ret

00003de8 <TWI_DS1307_wadr>:

///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						 //goi START condition
    3de8:	94 ea       	ldi	r25, 0xA4	; 164
    3dea:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
    3dec:	06 b6       	in	r0, 0x36	; 54
    3dee:	07 fe       	sbrs	r0, 7
    3df0:	fd cf       	rjmp	.-6      	; 0x3dec <TWI_DS1307_wadr+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
    3df2:	91 b1       	in	r25, 0x01	; 1
    3df4:	98 7f       	andi	r25, 0xF8	; 248
    3df6:	98 30       	cpi	r25, 0x08	; 8
    3df8:	11 f0       	breq	.+4      	; 0x3dfe <TWI_DS1307_wadr+0x16>
    3dfa:	81 b1       	in	r24, 0x01	; 1
    3dfc:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
    3dfe:	90 ed       	ldi	r25, 0xD0	; 208
    3e00:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
    3e02:	94 e8       	ldi	r25, 0x84	; 132
    3e04:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
    3e06:	06 b6       	in	r0, 0x36	; 54
    3e08:	07 fe       	sbrs	r0, 7
    3e0a:	fd cf       	rjmp	.-6      	; 0x3e06 <TWI_DS1307_wadr+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
    3e0c:	91 b1       	in	r25, 0x01	; 1
    3e0e:	98 7f       	andi	r25, 0xF8	; 248
    3e10:	98 31       	cpi	r25, 0x18	; 24
    3e12:	11 f0       	breq	.+4      	; 0x3e18 <TWI_DS1307_wadr+0x30>
    3e14:	81 b1       	in	r24, 0x01	; 1
    3e16:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
    3e18:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
    3e1a:	84 e8       	ldi	r24, 0x84	; 132
    3e1c:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
    3e1e:	06 b6       	in	r0, 0x36	; 54
    3e20:	07 fe       	sbrs	r0, 7
    3e22:	fd cf       	rjmp	.-6      	; 0x3e1e <TWI_DS1307_wadr+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
    3e24:	81 b1       	in	r24, 0x01	; 1
    3e26:	88 7f       	andi	r24, 0xF8	; 248
    3e28:	88 32       	cpi	r24, 0x28	; 40
    3e2a:	11 f0       	breq	.+4      	; 0x3e30 <TWI_DS1307_wadr+0x48>
    3e2c:	81 b1       	in	r24, 0x01	; 1
    3e2e:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
    3e30:	84 e9       	ldi	r24, 0x94	; 148
    3e32:	86 bf       	out	0x36, r24	; 54
	return 0;
    3e34:	80 e0       	ldi	r24, 0x00	; 0
}
    3e36:	08 95       	ret

00003e38 <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
    3e38:	94 ea       	ldi	r25, 0xA4	; 164
    3e3a:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
    3e3c:	06 b6       	in	r0, 0x36	; 54
    3e3e:	07 fe       	sbrs	r0, 7
    3e40:	fd cf       	rjmp	.-6      	; 0x3e3c <TWI_DS1307_wblock+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
    3e42:	91 b1       	in	r25, 0x01	; 1
    3e44:	98 7f       	andi	r25, 0xF8	; 248
    3e46:	98 30       	cpi	r25, 0x08	; 8
    3e48:	11 f0       	breq	.+4      	; 0x3e4e <TWI_DS1307_wblock+0x16>
    3e4a:	81 b1       	in	r24, 0x01	; 1
    3e4c:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
    3e4e:	90 ed       	ldi	r25, 0xD0	; 208
    3e50:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
    3e52:	94 e8       	ldi	r25, 0x84	; 132
    3e54:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
    3e56:	06 b6       	in	r0, 0x36	; 54
    3e58:	07 fe       	sbrs	r0, 7
    3e5a:	fd cf       	rjmp	.-6      	; 0x3e56 <TWI_DS1307_wblock+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
    3e5c:	91 b1       	in	r25, 0x01	; 1
    3e5e:	98 7f       	andi	r25, 0xF8	; 248
    3e60:	98 31       	cpi	r25, 0x18	; 24
    3e62:	11 f0       	breq	.+4      	; 0x3e68 <TWI_DS1307_wblock+0x30>
    3e64:	81 b1       	in	r24, 0x01	; 1
    3e66:	08 95       	ret
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
    3e68:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
    3e6a:	84 e8       	ldi	r24, 0x84	; 132
    3e6c:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
    3e6e:	06 b6       	in	r0, 0x36	; 54
    3e70:	07 fe       	sbrs	r0, 7
    3e72:	fd cf       	rjmp	.-6      	; 0x3e6e <TWI_DS1307_wblock+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; 
    3e74:	81 b1       	in	r24, 0x01	; 1
    3e76:	88 7f       	andi	r24, 0xF8	; 248
    3e78:	88 32       	cpi	r24, 0x28	; 40
    3e7a:	19 f4       	brne	.+6      	; 0x3e82 <TWI_DS1307_wblock+0x4a>

	for (uint8_t i=0; i <len; i++){
    3e7c:	44 23       	and	r20, r20
    3e7e:	19 f4       	brne	.+6      	; 0x3e86 <TWI_DS1307_wblock+0x4e>
    3e80:	16 c0       	rjmp	.+44     	; 0x3eae <TWI_DS1307_wblock+0x76>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 
    3e82:	81 b1       	in	r24, 0x01	; 1
    3e84:	08 95       	ret
    3e86:	26 2f       	mov	r18, r22

	for (uint8_t i=0; i <len; i++){
    3e88:	e6 2f       	mov	r30, r22
    3e8a:	f7 2f       	mov	r31, r23
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
    3e8c:	94 e8       	ldi	r25, 0x84	; 132
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
    3e8e:	81 91       	ld	r24, Z+
    3e90:	83 b9       	out	0x03, r24	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
    3e92:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
    3e94:	06 b6       	in	r0, 0x36	; 54
    3e96:	07 fe       	sbrs	r0, 7
    3e98:	fd cf       	rjmp	.-6      	; 0x3e94 <TWI_DS1307_wblock+0x5c>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
    3e9a:	81 b1       	in	r24, 0x01	; 1
    3e9c:	88 7f       	andi	r24, 0xF8	; 248
    3e9e:	88 32       	cpi	r24, 0x28	; 40
    3ea0:	11 f0       	breq	.+4      	; 0x3ea6 <TWI_DS1307_wblock+0x6e>
    3ea2:	81 b1       	in	r24, 0x01	; 1
    3ea4:	08 95       	ret
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
    3ea6:	8e 2f       	mov	r24, r30
    3ea8:	82 1b       	sub	r24, r18
    3eaa:	84 17       	cp	r24, r20
    3eac:	80 f3       	brcs	.-32     	; 0x3e8e <TWI_DS1307_wblock+0x56>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
    3eae:	84 e9       	ldi	r24, 0x94	; 148
    3eb0:	86 bf       	out	0x36, r24	; 54
	return 0;
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
}
    3eb4:	08 95       	ret

00003eb6 <TWI_DS1307_rblock>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
    3eb6:	24 ea       	ldi	r18, 0xA4	; 164
    3eb8:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
    3eba:	06 b6       	in	r0, 0x36	; 54
    3ebc:	07 fe       	sbrs	r0, 7
    3ebe:	fd cf       	rjmp	.-6      	; 0x3eba <TWI_DS1307_rblock+0x4>
    3ec0:	21 b1       	in	r18, 0x01	; 1
    3ec2:	28 7f       	andi	r18, 0xF8	; 248
    3ec4:	28 30       	cpi	r18, 0x08	; 8
    3ec6:	c9 f7       	brne	.-14     	; 0x3eba <TWI_DS1307_rblock+0x4>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
    3ec8:	21 ed       	ldi	r18, 0xD1	; 209
    3eca:	23 b9       	out	0x03, r18	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
    3ecc:	24 e8       	ldi	r18, 0x84	; 132
    3ece:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
    3ed0:	06 b6       	in	r0, 0x36	; 54
    3ed2:	07 fe       	sbrs	r0, 7
    3ed4:	fd cf       	rjmp	.-6      	; 0x3ed0 <TWI_DS1307_rblock+0x1a>
    3ed6:	21 b1       	in	r18, 0x01	; 1
    3ed8:	28 7f       	andi	r18, 0xF8	; 248
    3eda:	20 34       	cpi	r18, 0x40	; 64
    3edc:	c9 f7       	brne	.-14     	; 0x3ed0 <TWI_DS1307_rblock+0x1a>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
    3ede:	46 2f       	mov	r20, r22
    3ee0:	50 e0       	ldi	r21, 0x00	; 0
    3ee2:	41 50       	subi	r20, 0x01	; 1
    3ee4:	50 40       	sbci	r21, 0x00	; 0
    3ee6:	14 16       	cp	r1, r20
    3ee8:	15 06       	cpc	r1, r21
    3eea:	ac f4       	brge	.+42     	; 0x3f16 <TWI_DS1307_rblock+0x60>
    3eec:	70 e0       	ldi	r23, 0x00	; 0
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
    3eee:	a4 ec       	ldi	r26, 0xC4	; 196
    3ef0:	a6 bf       	out	0x36, r26	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
    3ef2:	06 b6       	in	r0, 0x36	; 54
    3ef4:	07 fe       	sbrs	r0, 7
    3ef6:	fd cf       	rjmp	.-6      	; 0x3ef2 <TWI_DS1307_rblock+0x3c>
    3ef8:	21 b1       	in	r18, 0x01	; 1
    3efa:	28 7f       	andi	r18, 0xF8	; 248
    3efc:	20 35       	cpi	r18, 0x50	; 80
    3efe:	c9 f7       	brne	.-14     	; 0x3ef2 <TWI_DS1307_rblock+0x3c>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    3f00:	23 b1       	in	r18, 0x03	; 3
    3f02:	fc 01       	movw	r30, r24
    3f04:	e7 0f       	add	r30, r23
    3f06:	f1 1d       	adc	r31, r1
    3f08:	20 83       	st	Z, r18
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
    3f0a:	7f 5f       	subi	r23, 0xFF	; 255
    3f0c:	27 2f       	mov	r18, r23
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	24 17       	cp	r18, r20
    3f12:	35 07       	cpc	r19, r21
    3f14:	6c f3       	brlt	.-38     	; 0x3ef0 <TWI_DS1307_rblock+0x3a>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
    3f16:	24 e8       	ldi	r18, 0x84	; 132
    3f18:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
    3f1a:	06 b6       	in	r0, 0x36	; 54
    3f1c:	07 fe       	sbrs	r0, 7
    3f1e:	fd cf       	rjmp	.-6      	; 0x3f1a <TWI_DS1307_rblock+0x64>
    3f20:	21 b1       	in	r18, 0x01	; 1
    3f22:	28 7f       	andi	r18, 0xF8	; 248
    3f24:	28 35       	cpi	r18, 0x58	; 88
    3f26:	c9 f7       	brne	.-14     	; 0x3f1a <TWI_DS1307_rblock+0x64>
	Data[len-1]=TWDR;
    3f28:	23 b1       	in	r18, 0x03	; 3
    3f2a:	86 0f       	add	r24, r22
    3f2c:	91 1d       	adc	r25, r1
    3f2e:	fc 01       	movw	r30, r24
    3f30:	31 97       	sbiw	r30, 0x01	; 1
    3f32:	20 83       	st	Z, r18
	
	TWCR=TWI_STOP;											 //STOP condition
    3f34:	84 e9       	ldi	r24, 0x94	; 148
    3f36:	86 bf       	out	0x36, r24	; 54
	return 0;	
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	08 95       	ret

00003f3c <therm_reset>:
#define THERM_LOW() THERM_PORT&=~(1<<THERM_DQ) 
#define THERM_HIGH() THERM_PORT|=(1<<THERM_DQ)  
uint8_t therm_reset() {
        uint8_t i;
        // Pull line low and wait for 480uS
        THERM_LOW();
    3f3c:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
    3f3e:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f40:	80 ec       	ldi	r24, 0xC0	; 192
    3f42:	93 e0       	ldi	r25, 0x03	; 3
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <therm_reset+0x8>
        _delay_loop_2(960);
		
        //Release line and wait for 60uS
        THERM_INPUT_MODE();
    3f48:	b8 98       	cbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f4a:	80 ea       	ldi	r24, 0xA0	; 160
    3f4c:	8a 95       	dec	r24
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <therm_reset+0x10>
        _delay_loop_1(160);
		
        //Store line value and wait until the completion of 480uS period
        i=(THERM_PIN & (1<<THERM_DQ));
    3f50:	86 b3       	in	r24, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f52:	e8 e4       	ldi	r30, 0x48	; 72
    3f54:	f3 e0       	ldi	r31, 0x03	; 3
    3f56:	31 97       	sbiw	r30, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <therm_reset+0x1a>
        _delay_loop_2(840);
        //Return the value read from the presence pulse (0=OK, 1=WRONG)
        return i;
}
    3f5a:	81 70       	andi	r24, 0x01	; 1
    3f5c:	08 95       	ret

00003f5e <therm_write_bit>:
 
void therm_write_bit(uint8_t bit){
        //Pull line low for 1uS
        THERM_LOW();
    3f5e:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
    3f60:	b8 9a       	sbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f62:	93 e0       	ldi	r25, 0x03	; 3
    3f64:	9a 95       	dec	r25
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <therm_write_bit+0x6>
        _delay_loop_1(3);
		
        //If we want to write 1, release the line (if not will keep low)
        if(bit) THERM_INPUT_MODE();
    3f68:	81 11       	cpse	r24, r1
    3f6a:	b8 98       	cbi	0x17, 0	; 23
    3f6c:	80 ea       	ldi	r24, 0xA0	; 160
    3f6e:	8a 95       	dec	r24
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <therm_write_bit+0x10>
		
        //Wait for 60uS and release the line
        _delay_loop_1(160);
        THERM_INPUT_MODE();
    3f72:	b8 98       	cbi	0x17, 0	; 23
}
    3f74:	08 95       	ret

00003f76 <therm_read_bit>:
 
uint8_t therm_read_bit(void){
        uint8_t bit=0;
		
        //Pull line low for 1uS
        THERM_LOW();
    3f76:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
    3f78:	b8 9a       	sbi	0x17, 0	; 23
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	8a 95       	dec	r24
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <therm_read_bit+0x6>
        _delay_loop_1(3);
 
        //Release line and wait for 14uS
        THERM_INPUT_MODE();
    3f80:	b8 98       	cbi	0x17, 0	; 23
    3f82:	85 e2       	ldi	r24, 0x25	; 37
    3f84:	8a 95       	dec	r24
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <therm_read_bit+0xe>
        _delay_loop_1(37);
 
        //Read line value
        if(THERM_PIN&(1<<THERM_DQ)) bit=1;
    3f88:	96 b3       	in	r25, 0x16	; 22
    3f8a:	88 e7       	ldi	r24, 0x78	; 120
    3f8c:	8a 95       	dec	r24
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <therm_read_bit+0x16>
        _delay_loop_1(160);
        THERM_INPUT_MODE();
}
 
uint8_t therm_read_bit(void){
        uint8_t bit=0;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 ff       	sbrs	r25, 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
        //Read line value
        if(THERM_PIN&(1<<THERM_DQ)) bit=1;
        //Wait for 45uS to end and return read value
        _delay_loop_1(120);
        return bit;
}
    3f96:	08 95       	ret

00003f98 <therm_read_byte>:
 
uint8_t therm_read_byte(void){
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	18 e0       	ldi	r17, 0x08	; 8
        uint8_t i=8, n=0;
    3f9e:	00 e0       	ldi	r16, 0x00	; 0
        while(i--){
                //Shift one position right and store read value
                n>>=1;
                n|=(therm_read_bit()<<7);
    3fa0:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <therm_read_bit>
    3fa4:	87 95       	ror	r24
    3fa6:	88 27       	eor	r24, r24
    3fa8:	87 95       	ror	r24
 
uint8_t therm_read_byte(void){
        uint8_t i=8, n=0;
        while(i--){
                //Shift one position right and store read value
                n>>=1;
    3faa:	06 95       	lsr	r16
                n|=(therm_read_bit()<<7);
    3fac:	08 2b       	or	r16, r24
    3fae:	11 50       	subi	r17, 0x01	; 1
        return bit;
}
 
uint8_t therm_read_byte(void){
        uint8_t i=8, n=0;
        while(i--){
    3fb0:	b9 f7       	brne	.-18     	; 0x3fa0 <therm_read_byte+0x8>
                //Shift one position right and store read value
                n>>=1;
                n|=(therm_read_bit()<<7);
        }
        return n;
}
    3fb2:	80 2f       	mov	r24, r16
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	08 95       	ret

00003fba <therm_write_byte>:
 
void therm_write_byte(uint8_t byte){
    3fba:	0f 93       	push	r16
    3fbc:	1f 93       	push	r17
    3fbe:	08 2f       	mov	r16, r24
    3fc0:	18 e0       	ldi	r17, 0x08	; 8
        uint8_t i=8;
        while(i--){
                //Write actual bit and shift one position right to make the next bit ready
                therm_write_bit(byte&1);
    3fc2:	80 2f       	mov	r24, r16
    3fc4:	81 70       	andi	r24, 0x01	; 1
    3fc6:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <therm_write_bit>
                byte>>=1;
    3fca:	06 95       	lsr	r16
    3fcc:	11 50       	subi	r17, 0x01	; 1
        return n;
}
 
void therm_write_byte(uint8_t byte){
        uint8_t i=8;
        while(i--){
    3fce:	c9 f7       	brne	.-14     	; 0x3fc2 <therm_write_byte+0x8>
                //Write actual bit and shift one position right to make the next bit ready
                therm_write_bit(byte&1);
                byte>>=1;
        }
}
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	08 95       	ret

00003fd6 <therm_read_temperature>:
 
//***********************************************************************************************//
//Do chinh xac 0.0625
//Nhiet do return gap x lan gia tri thuc do duoc
void therm_read_temperature()
{ 
    3fd6:	0f 93       	push	r16
    3fd8:	1f 93       	push	r17
	// Buffer length must be at least 12bytes long! ["+XXX.XXXX C"
	extern uint8_t ds18b20, digit;
	uint8_t temperature[2]; 
	//Reset, skip ROM and start temperature conversion 
	therm_reset(); 
    3fda:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM); 
    3fde:	8c ec       	ldi	r24, 0xCC	; 204
    3fe0:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP); 
    3fe4:	84 e4       	ldi	r24, 0x44	; 68
    3fe6:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	//Wait until conversion is complete 
	while(!therm_read_bit()); 
    3fea:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <therm_read_bit>
    3fee:	88 23       	and	r24, r24
    3ff0:	e1 f3       	breq	.-8      	; 0x3fea <therm_read_temperature+0x14>
	//Reset, skip ROM and send command to read Scratchpad 
	therm_reset(); 
    3ff2:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
    3ff6:	8c ec       	ldi	r24, 0xCC	; 204
    3ff8:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD); 
    3ffc:	8e eb       	ldi	r24, 0xBE	; 190
    3ffe:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	//Read Scratchpad (only 2 first bytes) 
	temperature[0]=therm_read_byte(); 
    4002:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <therm_read_byte>
    4006:	18 2f       	mov	r17, r24
	temperature[1]=therm_read_byte(); 
    4008:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <therm_read_byte>
    400c:	08 2f       	mov	r16, r24
	therm_reset(); 
    400e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <therm_reset>
	//Store temperature integer digits and decimal digits 
	digit  = ((float)(temperature[0]&0x0f))/16*100;
    4012:	61 2f       	mov	r22, r17
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	6f 70       	andi	r22, 0x0F	; 15
    4018:	70 70       	andi	r23, 0x00	; 0
    401a:	88 27       	eor	r24, r24
    401c:	77 fd       	sbrc	r23, 7
    401e:	80 95       	com	r24
    4020:	98 2f       	mov	r25, r24
    4022:	0e 94 66 35 	call	0x6acc	; 0x6acc <__floatsisf>
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e8       	ldi	r20, 0x80	; 128
    402c:	5d e3       	ldi	r21, 0x3D	; 61
    402e:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__mulsf3>
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	48 ec       	ldi	r20, 0xC8	; 200
    4038:	52 e4       	ldi	r21, 0x42	; 66
    403a:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__mulsf3>
    403e:	0e 94 38 35 	call	0x6a70	; 0x6a70 <__fixunssfsi>
    4042:	60 93 2f 06 	sts	0x062F, r22
	ds18b20 = ((temperature[0]&0xf0)>>4)|((temperature[1]&0x0f)<<4);
    4046:	02 95       	swap	r16
    4048:	00 7f       	andi	r16, 0xF0	; 240
    404a:	12 95       	swap	r17
    404c:	1f 70       	andi	r17, 0x0F	; 15
    404e:	10 2b       	or	r17, r16
    4050:	10 93 31 06 	sts	0x0631, r17
}
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	08 95       	ret

0000405a <config_ds18b20>:
	//digit=temperature[0]>>4; 
	//digit|=(temperature[1]&0x7)<<4;
	//return (digit);
//}
uint8_t config_ds18b20(uint8_t H,uint8_t L,uint8_t mode)
{
    405a:	ff 92       	push	r15
    405c:	0f 93       	push	r16
    405e:	1f 93       	push	r17
    4060:	f8 2e       	mov	r15, r24
    4062:	06 2f       	mov	r16, r22
    4064:	14 2f       	mov	r17, r20
	therm_reset(); 
    4066:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <therm_reset>
	therm_write_byte(0x4E);
    406a:	8e e4       	ldi	r24, 0x4E	; 78
    406c:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	//therm_write_byte(0xFF);
	//therm_write_byte(0xFF);
	//therm_write_byte(0x1F);
	therm_write_byte(H);
    4070:	8f 2d       	mov	r24, r15
    4072:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	therm_write_byte(L);
    4076:	80 2f       	mov	r24, r16
    4078:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
	therm_write_byte(mode);	
    407c:	81 2f       	mov	r24, r17
    407e:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <therm_write_byte>
}
    4082:	1f 91       	pop	r17
    4084:	0f 91       	pop	r16
    4086:	ff 90       	pop	r15
    4088:	08 95       	ret

0000408a <alarm>:

//Cac ham DS18B20
unsigned char bao_dong, ngung_bao_dong;
void alarm()
{	
	if(ds18b20 >= ALARM)	{bao_dong++;	ngung_bao_dong=0;}
    408a:	80 91 31 06 	lds	r24, 0x0631
    408e:	80 35       	cpi	r24, 0x50	; 80
    4090:	50 f0       	brcs	.+20     	; 0x40a6 <alarm+0x1c>
    4092:	80 91 3c 06 	lds	r24, 0x063C
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	80 93 3c 06 	sts	0x063C, r24
    409c:	10 92 30 06 	sts	0x0630, r1
	else{ngung_bao_dong++;	bao_dong = 0;}
	if(bao_dong == 2)	{ON_ALARM	bao_dong = 0;}
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	91 f4       	brne	.+36     	; 0x40c8 <alarm+0x3e>
    40a4:	0a c0       	rjmp	.+20     	; 0x40ba <alarm+0x30>
//Cac ham DS18B20
unsigned char bao_dong, ngung_bao_dong;
void alarm()
{	
	if(ds18b20 >= ALARM)	{bao_dong++;	ngung_bao_dong=0;}
	else{ngung_bao_dong++;	bao_dong = 0;}
    40a6:	80 91 30 06 	lds	r24, 0x0630
    40aa:	8f 5f       	subi	r24, 0xFF	; 255
    40ac:	80 93 30 06 	sts	0x0630, r24
    40b0:	10 92 3c 06 	sts	0x063C, r1
	if(bao_dong == 2)	{ON_ALARM	bao_dong = 0;}
	else	if(ngung_bao_dong >= 5)	{OFF_ALARM	ngung_bao_dong = 0;}			
    40b4:	85 30       	cpi	r24, 0x05	; 5
    40b6:	28 f4       	brcc	.+10     	; 0x40c2 <alarm+0x38>
    40b8:	08 95       	ret
unsigned char bao_dong, ngung_bao_dong;
void alarm()
{	
	if(ds18b20 >= ALARM)	{bao_dong++;	ngung_bao_dong=0;}
	else{ngung_bao_dong++;	bao_dong = 0;}
	if(bao_dong == 2)	{ON_ALARM	bao_dong = 0;}
    40ba:	ab 98       	cbi	0x15, 3	; 21
    40bc:	10 92 3c 06 	sts	0x063C, r1
    40c0:	08 95       	ret
	else	if(ngung_bao_dong >= 5)	{OFF_ALARM	ngung_bao_dong = 0;}			
    40c2:	ab 9a       	sbi	0x15, 3	; 21
    40c4:	10 92 30 06 	sts	0x0630, r1
    40c8:	08 95       	ret

000040ca <showtemp>:
}
void showtemp ()
{
    40ca:	1f 93       	push	r17
	move_LCD(1,10);
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	6a e0       	ldi	r22, 0x0A	; 10
    40d0:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
	therm_read_temperature();
    40d4:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <therm_read_temperature>
	lcd_show_number(ds18b20);
    40d8:	80 91 31 06 	lds	r24, 0x0631
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <lcd_show_number>
	print_LCD(".");
    40e2:	8c e6       	ldi	r24, 0x6C	; 108
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	putChar_LCD(digit/10 +48);
    40ea:	80 91 2f 06 	lds	r24, 0x062F
    40ee:	1a e0       	ldi	r17, 0x0A	; 10
    40f0:	61 2f       	mov	r22, r17
    40f2:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    40f6:	80 5d       	subi	r24, 0xD0	; 208
    40f8:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	putChar_LCD(digit%10 +48);
    40fc:	80 91 2f 06 	lds	r24, 0x062F
    4100:	61 2f       	mov	r22, r17
    4102:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    4106:	89 2f       	mov	r24, r25
    4108:	80 5d       	subi	r24, 0xD0	; 208
    410a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	putChar_LCD(0xdf);	print_LCD("C");	print_LCD(" ");
    410e:	8f ed       	ldi	r24, 0xDF	; 223
    4110:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    4114:	8e e6       	ldi	r24, 0x6E	; 110
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    411c:	80 e7       	ldi	r24, 0x70	; 112
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	check_auto();
    4124:	0e 94 a3 28 	call	0x5146	; 0x5146 <check_auto>
	alarm();
    4128:	0e 94 45 20 	call	0x408a	; 0x408a <alarm>
}
    412c:	1f 91       	pop	r17
    412e:	08 95       	ret

00004130 <BCD2Dec>:
//Cac ham theo RTC
uint8_t BCD2Dec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
	H=(BCD>>4)*10;
    4130:	98 2f       	mov	r25, r24
    4132:	92 95       	swap	r25
    4134:	9f 70       	andi	r25, 0x0F	; 15
    4136:	99 0f       	add	r25, r25
    4138:	29 2f       	mov	r18, r25
    413a:	22 0f       	add	r18, r18
    413c:	22 0f       	add	r18, r18
    413e:	92 0f       	add	r25, r18
	alarm();
}
//Cac ham theo RTC
uint8_t BCD2Dec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
    4140:	8f 70       	andi	r24, 0x0F	; 15
	H=(BCD>>4)*10;
	return (H+L);
}
    4142:	89 0f       	add	r24, r25
    4144:	08 95       	ret

00004146 <Dec2BCD>:
uint8_t Dec2BCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
	H=(Dec/10)<<4;
    4146:	6a e0       	ldi	r22, 0x0A	; 10
    4148:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    414c:	82 95       	swap	r24
    414e:	80 7f       	andi	r24, 0xF0	; 240
	return (H+L);
}
    4150:	89 0f       	add	r24, r25
    4152:	08 95       	ret

00004154 <Display>:
void	Display	()
{ 
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
	Second 	= BCD2Dec(tData[0] & 0x7F);
    4158:	80 91 4c 06 	lds	r24, 0x064C
    415c:	8f 77       	andi	r24, 0x7F	; 127
    415e:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4162:	80 93 a5 00 	sts	0x00A5, r24
	Minute 	= BCD2Dec(tData[1]);
    4166:	80 91 4d 06 	lds	r24, 0x064D
    416a:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    416e:	80 93 a6 00 	sts	0x00A6, r24
	
	if (Mode !=0) 	Hour = BCD2Dec(tData[2] & 0x1F); //mode 12h
    4172:	80 91 b5 00 	lds	r24, 0x00B5
    4176:	88 23       	and	r24, r24
    4178:	41 f0       	breq	.+16     	; 0x418a <Display+0x36>
    417a:	80 91 4e 06 	lds	r24, 0x064E
    417e:	8f 71       	andi	r24, 0x1F	; 31
    4180:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4184:	80 93 a7 00 	sts	0x00A7, r24
    4188:	07 c0       	rjmp	.+14     	; 0x4198 <Display+0x44>
	else 		  	Hour = BCD2Dec(tData[2] & 0x3F); //mode 24h	
    418a:	80 91 4e 06 	lds	r24, 0x064E
    418e:	8f 73       	andi	r24, 0x3F	; 63
    4190:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4194:	80 93 a7 00 	sts	0x00A7, r24
	Day		= BCD2Dec(tData[3]);
    4198:	80 91 4f 06 	lds	r24, 0x064F
    419c:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    41a0:	80 93 a8 00 	sts	0x00A8, r24
	Date   	= BCD2Dec(tData[4]);
    41a4:	80 91 50 06 	lds	r24, 0x0650
    41a8:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    41ac:	80 93 a9 00 	sts	0x00A9, r24
	Month	= BCD2Dec(tData[5]);
    41b0:	80 91 51 06 	lds	r24, 0x0651
    41b4:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    41b8:	80 93 aa 00 	sts	0x00AA, r24
	Year	= BCD2Dec(tData[6]);
    41bc:	80 91 52 06 	lds	r24, 0x0652
    41c0:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    41c4:	80 93 ab 00 	sts	0x00AB, r24
	
	clr_LCD();		//xoa LCD
    41c8:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <clr_LCD>
	//Xuat gio:phut:giay
	//Xuat Hour
	sprintf(dis, "%i",Hour);
    41cc:	20 91 a7 00 	lds	r18, 0x00A7
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <Display+0x7e>
    41d2:	00 d0       	rcall	.+0      	; 0x41d4 <Display+0x80>
    41d4:	00 d0       	rcall	.+0      	; 0x41d6 <Display+0x82>
    41d6:	ed b7       	in	r30, 0x3d	; 61
    41d8:	fe b7       	in	r31, 0x3e	; 62
    41da:	31 96       	adiw	r30, 0x01	; 1
    41dc:	83 e5       	ldi	r24, 0x53	; 83
    41de:	96 e0       	ldi	r25, 0x06	; 6
    41e0:	ad b7       	in	r26, 0x3d	; 61
    41e2:	be b7       	in	r27, 0x3e	; 62
    41e4:	12 96       	adiw	r26, 0x02	; 2
    41e6:	9c 93       	st	X, r25
    41e8:	8e 93       	st	-X, r24
    41ea:	11 97       	sbiw	r26, 0x01	; 1
    41ec:	82 e7       	ldi	r24, 0x72	; 114
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	93 83       	std	Z+3, r25	; 0x03
    41f2:	82 83       	std	Z+2, r24	; 0x02
    41f4:	24 83       	std	Z+4, r18	; 0x04
    41f6:	15 82       	std	Z+5, r1	; 0x05
    41f8:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	move_LCD(1,1);  if (Hour < 10) putChar_LCD(' ');print_LCD(dis); 
    41fc:	2d b7       	in	r18, 0x3d	; 61
    41fe:	3e b7       	in	r19, 0x3e	; 62
    4200:	2a 5f       	subi	r18, 0xFA	; 250
    4202:	3f 4f       	sbci	r19, 0xFF	; 255
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	3e bf       	out	0x3e, r19	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	2d bf       	out	0x3d, r18	; 61
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	61 e0       	ldi	r22, 0x01	; 1
    4212:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    4216:	80 91 a7 00 	lds	r24, 0x00A7
    421a:	8a 30       	cpi	r24, 0x0A	; 10
    421c:	18 f4       	brcc	.+6      	; 0x4224 <Display+0xd0>
    421e:	80 e2       	ldi	r24, 0x20	; 32
    4220:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    4224:	c3 e5       	ldi	r28, 0x53	; 83
    4226:	d6 e0       	ldi	r29, 0x06	; 6
    4228:	ce 01       	movw	r24, r28
    422a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	move_LCD(1,3); putChar_LCD(':');
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	63 e0       	ldi	r22, 0x03	; 3
    4232:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    4236:	8a e3       	ldi	r24, 0x3A	; 58
    4238:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	//Xuat Minute
	sprintf(dis, "%i",Minute); 
    423c:	20 91 a6 00 	lds	r18, 0x00A6
    4240:	00 d0       	rcall	.+0      	; 0x4242 <Display+0xee>
    4242:	00 d0       	rcall	.+0      	; 0x4244 <Display+0xf0>
    4244:	00 d0       	rcall	.+0      	; 0x4246 <Display+0xf2>
    4246:	ed b7       	in	r30, 0x3d	; 61
    4248:	fe b7       	in	r31, 0x3e	; 62
    424a:	31 96       	adiw	r30, 0x01	; 1
    424c:	ad b7       	in	r26, 0x3d	; 61
    424e:	be b7       	in	r27, 0x3e	; 62
    4250:	12 96       	adiw	r26, 0x02	; 2
    4252:	dc 93       	st	X, r29
    4254:	ce 93       	st	-X, r28
    4256:	11 97       	sbiw	r26, 0x01	; 1
    4258:	82 e7       	ldi	r24, 0x72	; 114
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	93 83       	std	Z+3, r25	; 0x03
    425e:	82 83       	std	Z+2, r24	; 0x02
    4260:	24 83       	std	Z+4, r18	; 0x04
    4262:	15 82       	std	Z+5, r1	; 0x05
    4264:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	move_LCD(1,4); if (Minute < 10) putChar_LCD('0');		print_LCD(dis); 
    4268:	2d b7       	in	r18, 0x3d	; 61
    426a:	3e b7       	in	r19, 0x3e	; 62
    426c:	2a 5f       	subi	r18, 0xFA	; 250
    426e:	3f 4f       	sbci	r19, 0xFF	; 255
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	3e bf       	out	0x3e, r19	; 62
    4276:	0f be       	out	0x3f, r0	; 63
    4278:	2d bf       	out	0x3d, r18	; 61
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	64 e0       	ldi	r22, 0x04	; 4
    427e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    4282:	80 91 a6 00 	lds	r24, 0x00A6
    4286:	8a 30       	cpi	r24, 0x0A	; 10
    4288:	18 f4       	brcc	.+6      	; 0x4290 <Display+0x13c>
    428a:	80 e3       	ldi	r24, 0x30	; 48
    428c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    4290:	c3 e5       	ldi	r28, 0x53	; 83
    4292:	d6 e0       	ldi	r29, 0x06	; 6
    4294:	ce 01       	movw	r24, r28
    4296:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	move_LCD(1,6);	putChar_LCD(':');
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	66 e0       	ldi	r22, 0x06	; 6
    429e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    42a2:	8a e3       	ldi	r24, 0x3A	; 58
    42a4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	//Xuat Second
	sprintf(dis, "%i",Second); 
    42a8:	20 91 a5 00 	lds	r18, 0x00A5
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <Display+0x15a>
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <Display+0x15c>
    42b0:	00 d0       	rcall	.+0      	; 0x42b2 <Display+0x15e>
    42b2:	ed b7       	in	r30, 0x3d	; 61
    42b4:	fe b7       	in	r31, 0x3e	; 62
    42b6:	31 96       	adiw	r30, 0x01	; 1
    42b8:	ad b7       	in	r26, 0x3d	; 61
    42ba:	be b7       	in	r27, 0x3e	; 62
    42bc:	12 96       	adiw	r26, 0x02	; 2
    42be:	dc 93       	st	X, r29
    42c0:	ce 93       	st	-X, r28
    42c2:	11 97       	sbiw	r26, 0x01	; 1
    42c4:	82 e7       	ldi	r24, 0x72	; 114
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	93 83       	std	Z+3, r25	; 0x03
    42ca:	82 83       	std	Z+2, r24	; 0x02
    42cc:	24 83       	std	Z+4, r18	; 0x04
    42ce:	15 82       	std	Z+5, r1	; 0x05
    42d0:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	move_LCD(1,7); if (Second<10) putChar_LCD('0');		print_LCD(dis); 
    42d4:	2d b7       	in	r18, 0x3d	; 61
    42d6:	3e b7       	in	r19, 0x3e	; 62
    42d8:	2a 5f       	subi	r18, 0xFA	; 250
    42da:	3f 4f       	sbci	r19, 0xFF	; 255
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	3e bf       	out	0x3e, r19	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	2d bf       	out	0x3d, r18	; 61
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	67 e0       	ldi	r22, 0x07	; 7
    42ea:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    42ee:	80 91 a5 00 	lds	r24, 0x00A5
    42f2:	8a 30       	cpi	r24, 0x0A	; 10
    42f4:	18 f4       	brcc	.+6      	; 0x42fc <Display+0x1a8>
    42f6:	80 e3       	ldi	r24, 0x30	; 48
    42f8:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    42fc:	83 e5       	ldi	r24, 0x53	; 83
    42fe:	96 e0       	ldi	r25, 0x06	; 6
    4300:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	if (Mode != 0)
    4304:	80 91 b5 00 	lds	r24, 0x00B5
    4308:	88 23       	and	r24, r24
    430a:	79 f0       	breq	.+30     	; 0x432a <Display+0x1d6>
	{ 
		//mode 12h
		move_LCD(1,1);
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	61 e0       	ldi	r22, 0x01	; 1
    4310:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
		if (bit_is_set(tData[2],5))  putChar_LCD('P'); //kiem tra bit AP, if AP=1
    4314:	80 91 4e 06 	lds	r24, 0x064E
    4318:	85 ff       	sbrs	r24, 5
    431a:	04 c0       	rjmp	.+8      	; 0x4324 <Display+0x1d0>
    431c:	80 e5       	ldi	r24, 0x50	; 80
    431e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    4322:	03 c0       	rjmp	.+6      	; 0x432a <Display+0x1d6>
		else putChar_LCD('A');
    4324:	81 e4       	ldi	r24, 0x41	; 65
    4326:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	}
	//Xuat nam-thang-ngay
	move_LCD(2,1);
    432a:	82 e0       	ldi	r24, 0x02	; 2
    432c:	61 e0       	ldi	r22, 0x01	; 1
    432e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
	switch (Day)
    4332:	80 91 a8 00 	lds	r24, 0x00A8
    4336:	84 30       	cpi	r24, 0x04	; 4
    4338:	f9 f0       	breq	.+62     	; 0x4378 <Display+0x224>
    433a:	85 30       	cpi	r24, 0x05	; 5
    433c:	38 f4       	brcc	.+14     	; 0x434c <Display+0x1f8>
    433e:	82 30       	cpi	r24, 0x02	; 2
    4340:	89 f0       	breq	.+34     	; 0x4364 <Display+0x210>
    4342:	83 30       	cpi	r24, 0x03	; 3
    4344:	a0 f4       	brcc	.+40     	; 0x436e <Display+0x21a>
    4346:	81 30       	cpi	r24, 0x01	; 1
    4348:	51 f5       	brne	.+84     	; 0x439e <Display+0x24a>
    434a:	07 c0       	rjmp	.+14     	; 0x435a <Display+0x206>
    434c:	86 30       	cpi	r24, 0x06	; 6
    434e:	f1 f0       	breq	.+60     	; 0x438c <Display+0x238>
    4350:	86 30       	cpi	r24, 0x06	; 6
    4352:	b8 f0       	brcs	.+46     	; 0x4382 <Display+0x22e>
    4354:	87 30       	cpi	r24, 0x07	; 7
    4356:	19 f5       	brne	.+70     	; 0x439e <Display+0x24a>
    4358:	1e c0       	rjmp	.+60     	; 0x4396 <Display+0x242>
		{
		case 1:		print_LCD("Sun");	break;
    435a:	85 e7       	ldi	r24, 0x75	; 117
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    4362:	1d c0       	rjmp	.+58     	; 0x439e <Display+0x24a>
		case 2:		print_LCD("Mon");	break;
    4364:	89 e7       	ldi	r24, 0x79	; 121
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    436c:	18 c0       	rjmp	.+48     	; 0x439e <Display+0x24a>
		case 3:		print_LCD("Tue");	break;
    436e:	8d e7       	ldi	r24, 0x7D	; 125
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    4376:	13 c0       	rjmp	.+38     	; 0x439e <Display+0x24a>
		case 4:		print_LCD("Wed");	break;
    4378:	81 e8       	ldi	r24, 0x81	; 129
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    4380:	0e c0       	rjmp	.+28     	; 0x439e <Display+0x24a>
		case 5:		print_LCD("Thu");	break;
    4382:	85 e8       	ldi	r24, 0x85	; 133
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    438a:	09 c0       	rjmp	.+18     	; 0x439e <Display+0x24a>
		case 6:		print_LCD("Fri");	break;
    438c:	89 e8       	ldi	r24, 0x89	; 137
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    4394:	04 c0       	rjmp	.+8      	; 0x439e <Display+0x24a>
		case 7:		print_LCD("Sat");	break;
    4396:	8d e8       	ldi	r24, 0x8D	; 141
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
		}
	
	//Xuat Date
	sprintf(dis, "%i",Date);  
    439e:	20 91 a9 00 	lds	r18, 0x00A9
    43a2:	00 d0       	rcall	.+0      	; 0x43a4 <Display+0x250>
    43a4:	00 d0       	rcall	.+0      	; 0x43a6 <Display+0x252>
    43a6:	00 d0       	rcall	.+0      	; 0x43a8 <Display+0x254>
    43a8:	ed b7       	in	r30, 0x3d	; 61
    43aa:	fe b7       	in	r31, 0x3e	; 62
    43ac:	31 96       	adiw	r30, 0x01	; 1
    43ae:	83 e5       	ldi	r24, 0x53	; 83
    43b0:	96 e0       	ldi	r25, 0x06	; 6
    43b2:	ad b7       	in	r26, 0x3d	; 61
    43b4:	be b7       	in	r27, 0x3e	; 62
    43b6:	12 96       	adiw	r26, 0x02	; 2
    43b8:	9c 93       	st	X, r25
    43ba:	8e 93       	st	-X, r24
    43bc:	11 97       	sbiw	r26, 0x01	; 1
    43be:	82 e7       	ldi	r24, 0x72	; 114
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	93 83       	std	Z+3, r25	; 0x03
    43c4:	82 83       	std	Z+2, r24	; 0x02
    43c6:	24 83       	std	Z+4, r18	; 0x04
    43c8:	15 82       	std	Z+5, r1	; 0x05
    43ca:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	move_LCD(2,5); 
    43ce:	2d b7       	in	r18, 0x3d	; 61
    43d0:	3e b7       	in	r19, 0x3e	; 62
    43d2:	2a 5f       	subi	r18, 0xFA	; 250
    43d4:	3f 4f       	sbci	r19, 0xFF	; 255
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	3e bf       	out	0x3e, r19	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	2d bf       	out	0x3d, r18	; 61
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	65 e0       	ldi	r22, 0x05	; 5
    43e4:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
	if (Date<10)	putChar_LCD(' '); 
    43e8:	80 91 a9 00 	lds	r24, 0x00A9
    43ec:	8a 30       	cpi	r24, 0x0A	; 10
    43ee:	18 f4       	brcc	.+6      	; 0x43f6 <Display+0x2a2>
    43f0:	80 e2       	ldi	r24, 0x20	; 32
    43f2:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	print_LCD(dis);
    43f6:	c3 e5       	ldi	r28, 0x53	; 83
    43f8:	d6 e0       	ldi	r29, 0x06	; 6
    43fa:	ce 01       	movw	r24, r28
    43fc:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	move_LCD(2,7);	putChar_LCD('/');//dau cach 1
    4400:	82 e0       	ldi	r24, 0x02	; 2
    4402:	67 e0       	ldi	r22, 0x07	; 7
    4404:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    4408:	8f e2       	ldi	r24, 0x2F	; 47
    440a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	
	//Xuat Month
	sprintf(dis, "%i",Month);  
    440e:	20 91 aa 00 	lds	r18, 0x00AA
    4412:	00 d0       	rcall	.+0      	; 0x4414 <Display+0x2c0>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <Display+0x2c2>
    4416:	00 d0       	rcall	.+0      	; 0x4418 <Display+0x2c4>
    4418:	ed b7       	in	r30, 0x3d	; 61
    441a:	fe b7       	in	r31, 0x3e	; 62
    441c:	31 96       	adiw	r30, 0x01	; 1
    441e:	ad b7       	in	r26, 0x3d	; 61
    4420:	be b7       	in	r27, 0x3e	; 62
    4422:	12 96       	adiw	r26, 0x02	; 2
    4424:	dc 93       	st	X, r29
    4426:	ce 93       	st	-X, r28
    4428:	11 97       	sbiw	r26, 0x01	; 1
    442a:	82 e7       	ldi	r24, 0x72	; 114
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	93 83       	std	Z+3, r25	; 0x03
    4430:	82 83       	std	Z+2, r24	; 0x02
    4432:	24 83       	std	Z+4, r18	; 0x04
    4434:	15 82       	std	Z+5, r1	; 0x05
    4436:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	if (Month<10)	putChar_LCD('0'); 
    443a:	80 91 aa 00 	lds	r24, 0x00AA
    443e:	2d b7       	in	r18, 0x3d	; 61
    4440:	3e b7       	in	r19, 0x3e	; 62
    4442:	2a 5f       	subi	r18, 0xFA	; 250
    4444:	3f 4f       	sbci	r19, 0xFF	; 255
    4446:	0f b6       	in	r0, 0x3f	; 63
    4448:	f8 94       	cli
    444a:	3e bf       	out	0x3e, r19	; 62
    444c:	0f be       	out	0x3f, r0	; 63
    444e:	2d bf       	out	0x3d, r18	; 61
    4450:	8a 30       	cpi	r24, 0x0A	; 10
    4452:	18 f4       	brcc	.+6      	; 0x445a <Display+0x306>
    4454:	80 e3       	ldi	r24, 0x30	; 48
    4456:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	print_LCD(dis); 
    445a:	c3 e5       	ldi	r28, 0x53	; 83
    445c:	d6 e0       	ldi	r29, 0x06	; 6
    445e:	ce 01       	movw	r24, r28
    4460:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
	move_LCD(2,10); putChar_LCD('/');//dau cach 2
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	6a e0       	ldi	r22, 0x0A	; 10
    4468:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    446c:	8f e2       	ldi	r24, 0x2F	; 47
    446e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>

	//Xuat Year
	putChar_LCD('2'); putChar_LCD('0');//xuat so '20'
    4472:	82 e3       	ldi	r24, 0x32	; 50
    4474:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    4478:	80 e3       	ldi	r24, 0x30	; 48
    447a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	sprintf(dis, "%i",Year);	
    447e:	20 91 ab 00 	lds	r18, 0x00AB
    4482:	00 d0       	rcall	.+0      	; 0x4484 <Display+0x330>
    4484:	00 d0       	rcall	.+0      	; 0x4486 <Display+0x332>
    4486:	00 d0       	rcall	.+0      	; 0x4488 <Display+0x334>
    4488:	ed b7       	in	r30, 0x3d	; 61
    448a:	fe b7       	in	r31, 0x3e	; 62
    448c:	31 96       	adiw	r30, 0x01	; 1
    448e:	ad b7       	in	r26, 0x3d	; 61
    4490:	be b7       	in	r27, 0x3e	; 62
    4492:	12 96       	adiw	r26, 0x02	; 2
    4494:	dc 93       	st	X, r29
    4496:	ce 93       	st	-X, r28
    4498:	11 97       	sbiw	r26, 0x01	; 1
    449a:	82 e7       	ldi	r24, 0x72	; 114
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	93 83       	std	Z+3, r25	; 0x03
    44a0:	82 83       	std	Z+2, r24	; 0x02
    44a2:	24 83       	std	Z+4, r18	; 0x04
    44a4:	15 82       	std	Z+5, r1	; 0x05
    44a6:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
	move_LCD(2,13);
    44aa:	2d b7       	in	r18, 0x3d	; 61
    44ac:	3e b7       	in	r19, 0x3e	; 62
    44ae:	2a 5f       	subi	r18, 0xFA	; 250
    44b0:	3f 4f       	sbci	r19, 0xFF	; 255
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	3e bf       	out	0x3e, r19	; 62
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	2d bf       	out	0x3d, r18	; 61
    44bc:	82 e0       	ldi	r24, 0x02	; 2
    44be:	6d e0       	ldi	r22, 0x0D	; 13
    44c0:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
	if (Year < 10) putChar_LCD('0'); // neu nam <10, in them so 0 ben trai, vi du 09 
    44c4:	80 91 ab 00 	lds	r24, 0x00AB
    44c8:	8a 30       	cpi	r24, 0x0A	; 10
    44ca:	18 f4       	brcc	.+6      	; 0x44d2 <Display+0x37e>
    44cc:	80 e3       	ldi	r24, 0x30	; 48
    44ce:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
	print_LCD(dis);	
    44d2:	83 e5       	ldi	r24, 0x53	; 83
    44d4:	96 e0       	ldi	r25, 0x06	; 6
    44d6:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
}
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	08 95       	ret

000044e0 <set_clock>:
void set_clock()
{
	unsigned char temp, flag = 1;// mac dinh la cho phep ghi gia tri thoi gian vao ds1307
	//Kiem tra first time qua byte 0x00 trong eeprom da duoc ghi gia tri bao gio chua
	while(!eeprom_is_ready());
    44e0:	e1 99       	sbic	0x1c, 1	; 28
    44e2:	fe cf       	rjmp	.-4      	; 0x44e0 <set_clock>
	temp = eeprom_read_byte(0); // gia tri mac dinh ban dau cua byte 0 trong eeprom la 0xff = 255
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__eerd_byte_m32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    44ec:	e9 ef       	ldi	r30, 0xF9	; 249
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	31 97       	sbiw	r30, 0x01	; 1
    44f2:	f1 f7       	brne	.-4      	; 0x44f0 <set_clock+0x10>
    44f4:	00 c0       	rjmp	.+0      	; 0x44f6 <set_clock+0x16>
    44f6:	00 00       	nop
	_delay_ms(1);
	if(temp != 240)
    44f8:	80 3f       	cpi	r24, 0xF0	; 240
    44fa:	09 f4       	brne	.+2      	; 0x44fe <set_clock+0x1e>
    44fc:	5d c0       	rjmp	.+186    	; 0x45b8 <set_clock+0xd8>
		{
			while(!eeprom_is_ready());
    44fe:	e1 99       	sbic	0x1c, 1	; 28
    4500:	fe cf       	rjmp	.-4      	; 0x44fe <set_clock+0x1e>
			eeprom_write_byte(0,240); // danh dau lan ghi dau tien 0xf0
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	60 ef       	ldi	r22, 0xF0	; 240
    4508:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    450c:	89 ef       	ldi	r24, 0xF9	; 249
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <set_clock+0x30>
    4514:	00 c0       	rjmp	.+0      	; 0x4516 <set_clock+0x36>
    4516:	00 00       	nop
			flag = 0;
	//Ghi tri ghi vao DS1307
	if(flag)
	{
		//must_edit = 0; // Su dung de tinh chinh thoi gian sau nay
		tData[0] = Dec2BCD(Second); 
    4518:	80 91 a5 00 	lds	r24, 0x00A5
    451c:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4520:	80 93 4c 06 	sts	0x064C, r24
		tData[1] = Dec2BCD(Minute); 
    4524:	80 91 a6 00 	lds	r24, 0x00A6
    4528:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    452c:	80 93 4d 06 	sts	0x064D, r24
		if (Mode != 0) 
    4530:	80 91 b5 00 	lds	r24, 0x00B5
    4534:	88 23       	and	r24, r24
    4536:	a1 f0       	breq	.+40     	; 0x4560 <set_clock+0x80>
			tData[2] = Dec2BCD(Hour)|(Mode<<6)|(AP<<5); //mode 12h
    4538:	80 91 a7 00 	lds	r24, 0x00A7
    453c:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4540:	90 91 b5 00 	lds	r25, 0x00B5
    4544:	20 91 ac 00 	lds	r18, 0x00AC
    4548:	22 95       	swap	r18
    454a:	22 0f       	add	r18, r18
    454c:	20 7e       	andi	r18, 0xE0	; 224
    454e:	92 95       	swap	r25
    4550:	99 0f       	add	r25, r25
    4552:	99 0f       	add	r25, r25
    4554:	90 7c       	andi	r25, 0xC0	; 192
    4556:	92 2b       	or	r25, r18
    4558:	89 2b       	or	r24, r25
    455a:	80 93 4e 06 	sts	0x064E, r24
    455e:	06 c0       	rjmp	.+12     	; 0x456c <set_clock+0x8c>
		else 
			tData[2] = Dec2BCD(Hour);
    4560:	80 91 a7 00 	lds	r24, 0x00A7
    4564:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4568:	80 93 4e 06 	sts	0x064E, r24
		tData[3] = Dec2BCD(Day);
    456c:	80 91 a8 00 	lds	r24, 0x00A8
    4570:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4574:	80 93 4f 06 	sts	0x064F, r24
		tData[4] = Dec2BCD(Date);
    4578:	80 91 a9 00 	lds	r24, 0x00A9
    457c:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4580:	80 93 50 06 	sts	0x0650, r24
		tData[5] = Dec2BCD(Month); 
    4584:	80 91 aa 00 	lds	r24, 0x00AA
    4588:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    458c:	80 93 51 06 	sts	0x0651, r24
		tData[6] = Dec2BCD(Year); 		
    4590:	80 91 ab 00 	lds	r24, 0x00AB
    4594:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4598:	80 93 52 06 	sts	0x0652, r24
		TWI_Init(); //khoi dong TWI		
    459c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_Init>
		TWI_DS1307_wblock(0x00, tData, 7); //ghi lien tiep cac bien thoi gian vao DS1307
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	6c e4       	ldi	r22, 0x4C	; 76
    45a4:	76 e0       	ldi	r23, 0x06	; 6
    45a6:	47 e0       	ldi	r20, 0x07	; 7
    45a8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <TWI_DS1307_wblock>
    45ac:	e9 ef       	ldi	r30, 0xF9	; 249
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	31 97       	sbiw	r30, 0x01	; 1
    45b2:	f1 f7       	brne	.-4      	; 0x45b0 <set_clock+0xd0>
    45b4:	00 c0       	rjmp	.+0      	; 0x45b6 <set_clock+0xd6>
    45b6:	00 00       	nop
    45b8:	08 95       	ret

000045ba <showclock>:
		_delay_ms(1);	//cho DS1307 xu li 
	}
}
void showclock()
{
	TWI_DS1307_wadr(0x00); 				//set dia chi ve 0
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <TWI_DS1307_wadr>
    45c0:	89 ef       	ldi	r24, 0xF9	; 249
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <showclock+0xa>
    45c8:	00 c0       	rjmp	.+0      	; 0x45ca <showclock+0x10>
    45ca:	00 00       	nop
	_delay_ms(1);		   				//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,1); 	//doc ca khoi thoi gian (7 bytes)		
    45cc:	8c e4       	ldi	r24, 0x4C	; 76
    45ce:	96 e0       	ldi	r25, 0x06	; 6
    45d0:	61 e0       	ldi	r22, 0x01	; 1
    45d2:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <TWI_DS1307_rblock>
	//hien thi ket qua len LCD
	if(BCD2Dec(tData[0]) !=Second)
    45d6:	80 91 4c 06 	lds	r24, 0x064C
    45da:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    45de:	90 91 a5 00 	lds	r25, 0x00A5
    45e2:	89 17       	cp	r24, r25
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <showclock+0x2e>
    45e6:	5a c0       	rjmp	.+180    	; 0x469c <showclock+0xe2>
	{ 	
		//chi hien thi ket qua khi da qua 1s
		Second=BCD2Dec(tData[0] & 0x7F);
    45e8:	80 91 4c 06 	lds	r24, 0x064C
    45ec:	8f 77       	andi	r24, 0x7F	; 127
    45ee:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    45f2:	80 93 a5 00 	sts	0x00A5, r24
		sprintf(dis, "%i",Second); 
    45f6:	20 91 a5 00 	lds	r18, 0x00A5
    45fa:	00 d0       	rcall	.+0      	; 0x45fc <showclock+0x42>
    45fc:	00 d0       	rcall	.+0      	; 0x45fe <showclock+0x44>
    45fe:	00 d0       	rcall	.+0      	; 0x4600 <showclock+0x46>
    4600:	ed b7       	in	r30, 0x3d	; 61
    4602:	fe b7       	in	r31, 0x3e	; 62
    4604:	31 96       	adiw	r30, 0x01	; 1
    4606:	83 e5       	ldi	r24, 0x53	; 83
    4608:	96 e0       	ldi	r25, 0x06	; 6
    460a:	ad b7       	in	r26, 0x3d	; 61
    460c:	be b7       	in	r27, 0x3e	; 62
    460e:	12 96       	adiw	r26, 0x02	; 2
    4610:	9c 93       	st	X, r25
    4612:	8e 93       	st	-X, r24
    4614:	11 97       	sbiw	r26, 0x01	; 1
    4616:	82 e7       	ldi	r24, 0x72	; 114
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	93 83       	std	Z+3, r25	; 0x03
    461c:	82 83       	std	Z+2, r24	; 0x02
    461e:	24 83       	std	Z+4, r18	; 0x04
    4620:	15 82       	std	Z+5, r1	; 0x05
    4622:	0e 94 42 38 	call	0x7084	; 0x7084 <sprintf>
		move_LCD(1,7); 
    4626:	8d b7       	in	r24, 0x3d	; 61
    4628:	9e b7       	in	r25, 0x3e	; 62
    462a:	06 96       	adiw	r24, 0x06	; 6
    462c:	0f b6       	in	r0, 0x3f	; 63
    462e:	f8 94       	cli
    4630:	9e bf       	out	0x3e, r25	; 62
    4632:	0f be       	out	0x3f, r0	; 63
    4634:	8d bf       	out	0x3d, r24	; 61
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	67 e0       	ldi	r22, 0x07	; 7
    463a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
		if (Second < 10)	putChar_LCD('0');	print_LCD(dis);
    463e:	80 91 a5 00 	lds	r24, 0x00A5
    4642:	8a 30       	cpi	r24, 0x0A	; 10
    4644:	18 f4       	brcc	.+6      	; 0x464c <showclock+0x92>
    4646:	80 e3       	ldi	r24, 0x30	; 48
    4648:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    464c:	83 e5       	ldi	r24, 0x53	; 83
    464e:	96 e0       	ldi	r25, 0x06	; 6
    4650:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
		if (Second == 0) 
    4654:	80 91 a5 00 	lds	r24, 0x00A5
    4658:	88 23       	and	r24, r24
    465a:	79 f4       	brne	.+30     	; 0x467a <showclock+0xc0>
		{
			TWI_DS1307_wadr(0x00); 				//set dia chi ve 0
    465c:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <TWI_DS1307_wadr>
    4660:	a9 ef       	ldi	r26, 0xF9	; 249
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	11 97       	sbiw	r26, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <showclock+0xaa>
    4668:	00 c0       	rjmp	.+0      	; 0x466a <showclock+0xb0>
    466a:	00 00       	nop
			_delay_ms(1);		   				//cho DS1307 xu li 
			TWI_DS1307_rblock(tData,7); 	//doc ca khoi thoi gian (7 bytes)	
    466c:	8c e4       	ldi	r24, 0x4C	; 76
    466e:	96 e0       	ldi	r25, 0x06	; 6
    4670:	67 e0       	ldi	r22, 0x07	; 7
    4672:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <TWI_DS1307_rblock>
			Display(); 		//moi phut cap nhat 1 lan		
    4676:	0e 94 aa 20 	call	0x4154	; 0x4154 <Display>
		}
		if(Second == 1)	active_countdown();	
    467a:	80 91 a5 00 	lds	r24, 0x00A5
    467e:	81 30       	cpi	r24, 0x01	; 1
    4680:	11 f4       	brne	.+4      	; 0x4686 <showclock+0xcc>
    4682:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <active_countdown>
		if(Second %5 == 0) showip();
    4686:	80 91 a5 00 	lds	r24, 0x00A5
    468a:	65 e0       	ldi	r22, 0x05	; 5
    468c:	0e 94 22 38 	call	0x7044	; 0x7044 <__udivmodqi4>
    4690:	99 23       	and	r25, r25
    4692:	11 f4       	brne	.+4      	; 0x4698 <showclock+0xde>
    4694:	0e 94 c2 29 	call	0x5384	; 0x5384 <showip>
		showtemp();		
    4698:	0e 94 65 20 	call	0x40ca	; 0x40ca <showtemp>
    469c:	08 95       	ret

0000469e <edit_day>:
//Cac ham set Auto
uint16_t countdown_min[5];
uint8_t  state_count[5];
uint8_t auto_off[5], auto_state[5];
void edit_day(uint8_t day)
{
    469e:	cf 93       	push	r28
    46a0:	df 93       	push	r29
	//cli();
	tData[3] = Dec2BCD(day);
    46a2:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    46a6:	80 93 4f 06 	sts	0x064F, r24
	TWI_Init();	
    46aa:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_Init>
	TWI_DS1307_wblock(0x00, tData, 7);
    46ae:	cc e4       	ldi	r28, 0x4C	; 76
    46b0:	d6 e0       	ldi	r29, 0x06	; 6
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	be 01       	movw	r22, r28
    46b6:	47 e0       	ldi	r20, 0x07	; 7
    46b8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <TWI_DS1307_wblock>
    46bc:	89 ef       	ldi	r24, 0xF9	; 249
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <edit_day+0x22>
    46c4:	00 c0       	rjmp	.+0      	; 0x46c6 <edit_day+0x28>
    46c6:	00 00       	nop
	_delay_ms(1);	
	//Xuat lai gia tri time
	TWI_DS1307_wadr(0x00);
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <TWI_DS1307_wadr>
    46ce:	89 ef       	ldi	r24, 0xF9	; 249
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <edit_day+0x34>
    46d6:	00 c0       	rjmp	.+0      	; 0x46d8 <edit_day+0x3a>
    46d8:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_rblock(tData,7);
    46da:	ce 01       	movw	r24, r28
    46dc:	67 e0       	ldi	r22, 0x07	; 7
    46de:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <TWI_DS1307_rblock>
	Display();
    46e2:	0e 94 aa 20 	call	0x4154	; 0x4154 <Display>
	//sei();
}
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	08 95       	ret

000046ec <edit_clock>:
void edit_clock(uint8_t type, uint8_t val1, uint8_t val2, uint8_t val3)
{
    46ec:	6f 92       	push	r6
    46ee:	7f 92       	push	r7
    46f0:	8f 92       	push	r8
    46f2:	9f 92       	push	r9
    46f4:	af 92       	push	r10
    46f6:	bf 92       	push	r11
    46f8:	cf 92       	push	r12
    46fa:	df 92       	push	r13
    46fc:	ef 92       	push	r14
    46fe:	ff 92       	push	r15
    4700:	0f 93       	push	r16
    4702:	1f 93       	push	r17
    4704:	df 93       	push	r29
    4706:	cf 93       	push	r28
    4708:	cd b7       	in	r28, 0x3d	; 61
    470a:	de b7       	in	r29, 0x3e	; 62
    470c:	66 97       	sbiw	r28, 0x16	; 22
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	de bf       	out	0x3e, r29	; 62
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	cd bf       	out	0x3d, r28	; 61
    4718:	c6 2e       	mov	r12, r22
    471a:	e4 2e       	mov	r14, r20
    471c:	02 2f       	mov	r16, r18
	//cli();
	uint16_t new_count[5];
	uint8_t new_state[5];
	uint8_t copy_tData[7];
	//Case HMS:  Thay doi gio phut giay
	if(type == 1)
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	81 f4       	brne	.+32     	; 0x4742 <edit_clock+0x56>
	{
		tData[0] = Dec2BCD(val3); //Giay
    4722:	82 2f       	mov	r24, r18
    4724:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4728:	80 93 4c 06 	sts	0x064C, r24
		tData[1] = Dec2BCD(val2); //Phut
    472c:	8e 2d       	mov	r24, r14
    472e:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4732:	80 93 4d 06 	sts	0x064D, r24
		tData[2] = Dec2BCD(val1); //Gio
    4736:	8c 2d       	mov	r24, r12
    4738:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    473c:	80 93 4e 06 	sts	0x064E, r24
    4740:	11 c0       	rjmp	.+34     	; 0x4764 <edit_clock+0x78>
	}
	//Case DMY:  Thay doi ngay thang nam
	else
	if(type == 2)
    4742:	82 30       	cpi	r24, 0x02	; 2
    4744:	79 f4       	brne	.+30     	; 0x4764 <edit_clock+0x78>
	{
		tData[4] = Dec2BCD(val1); //Ngay
    4746:	86 2f       	mov	r24, r22
    4748:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    474c:	80 93 50 06 	sts	0x0650, r24
		tData[5] = Dec2BCD(val2); //Thang
    4750:	8e 2d       	mov	r24, r14
    4752:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4756:	80 93 51 06 	sts	0x0651, r24
		tData[6] = Dec2BCD(val3); //Nam		
    475a:	80 2f       	mov	r24, r16
    475c:	0e 94 a3 20 	call	0x4146	; 0x4146 <Dec2BCD>
    4760:	80 93 52 06 	sts	0x0652, r24
	}
	TWI_Init();	
    4764:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_Init>
	TWI_DS1307_wblock(0x00, tData, 7);
    4768:	0c e4       	ldi	r16, 0x4C	; 76
    476a:	16 e0       	ldi	r17, 0x06	; 6
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	b8 01       	movw	r22, r16
    4770:	47 e0       	ldi	r20, 0x07	; 7
    4772:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <TWI_DS1307_wblock>
    4776:	89 ef       	ldi	r24, 0xF9	; 249
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <edit_clock+0x8e>
    477e:	00 c0       	rjmp	.+0      	; 0x4780 <edit_clock+0x94>
    4780:	00 00       	nop
	_delay_ms(1);	
	//Xuat lai gia tri time
	TWI_DS1307_wadr(0x00); //set dia chi ve 0
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <TWI_DS1307_wadr>
    4788:	a9 ef       	ldi	r26, 0xF9	; 249
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	11 97       	sbiw	r26, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <edit_clock+0xa0>
    4790:	00 c0       	rjmp	.+0      	; 0x4792 <edit_clock+0xa6>
    4792:	00 00       	nop
	_delay_ms(1);			//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7); //doc ca khoi thoi gian (7 bytes)	
    4794:	c8 01       	movw	r24, r16
    4796:	67 e0       	ldi	r22, 0x07	; 7
    4798:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <TWI_DS1307_rblock>
	Display(); // hien thi ket qua len LCD		
    479c:	0e 94 aa 20 	call	0x4154	; 0x4154 <Display>
	uint8_t flag = 0;
	for(uint8_t i = 1; i<4; i++)
		if(state_count[i] == 15 || state_count[i] == 240)
    47a0:	80 91 3e 06 	lds	r24, 0x063E
    47a4:	8f 30       	cpi	r24, 0x0F	; 15
    47a6:	11 f0       	breq	.+4      	; 0x47ac <edit_clock+0xc0>
    47a8:	80 3f       	cpi	r24, 0xF0	; 240
    47aa:	e1 f4       	brne	.+56     	; 0x47e4 <edit_clock+0xf8>
    47ac:	ee e3       	ldi	r30, 0x3E	; 62
    47ae:	f6 e0       	ldi	r31, 0x06	; 6
    47b0:	24 e3       	ldi	r18, 0x34	; 52
    47b2:	36 e0       	ldi	r19, 0x06	; 6
    47b4:	0f 2e       	mov	r0, r31
    47b6:	f3 e0       	ldi	r31, 0x03	; 3
    47b8:	af 2e       	mov	r10, r31
    47ba:	bb 24       	eor	r11, r11
    47bc:	f0 2d       	mov	r31, r0
    47be:	ac 0e       	add	r10, r28
    47c0:	bd 1e       	adc	r11, r29
    47c2:	0f 2e       	mov	r0, r31
    47c4:	fc e0       	ldi	r31, 0x0C	; 12
    47c6:	cf 2e       	mov	r12, r31
    47c8:	dd 24       	eor	r13, r13
    47ca:	f0 2d       	mov	r31, r0
    47cc:	cc 0e       	add	r12, r28
    47ce:	dd 1e       	adc	r13, r29
	_delay_ms(1);
	TWI_DS1307_rblock(tData,7);
	Display();
	//sei();
}
void edit_clock(uint8_t type, uint8_t val1, uint8_t val2, uint8_t val3)
    47d0:	af 01       	movw	r20, r30
    47d2:	4c 5f       	subi	r20, 0xFC	; 252
    47d4:	5f 4f       	sbci	r21, 0xFF	; 255
    47d6:	c6 01       	movw	r24, r12
    47d8:	35 01       	movw	r6, r10
		//Update EEPROM: Cac gia tri lien quan den hen gio
		for(uint8_t i = 1; i<=4; i++)
			if(state_count[i] == 240 || state_count[i] == 15)
				{	new_count[i] = countdown_min[i];	new_state[i] = state_count[i]; }
			else
				{	new_count[i] = 0xffff;	new_state[i] = 0xff; }	
    47da:	0f ef       	ldi	r16, 0xFF	; 255
    47dc:	1f ef       	ldi	r17, 0xFF	; 255
    47de:	88 24       	eor	r8, r8
    47e0:	8a 94       	dec	r8
    47e2:	0e c0       	rjmp	.+28     	; 0x4800 <edit_clock+0x114>
	_delay_ms(1);			//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7); //doc ca khoi thoi gian (7 bytes)	
	Display(); // hien thi ket qua len LCD		
	uint8_t flag = 0;
	for(uint8_t i = 1; i<4; i++)
		if(state_count[i] == 15 || state_count[i] == 240)
    47e4:	80 91 3f 06 	lds	r24, 0x063F
    47e8:	8f 30       	cpi	r24, 0x0F	; 15
    47ea:	01 f3       	breq	.-64     	; 0x47ac <edit_clock+0xc0>
    47ec:	80 3f       	cpi	r24, 0xF0	; 240
    47ee:	f1 f2       	breq	.-68     	; 0x47ac <edit_clock+0xc0>
    47f0:	80 91 40 06 	lds	r24, 0x0640
    47f4:	8f 30       	cpi	r24, 0x0F	; 15
    47f6:	d1 f2       	breq	.-76     	; 0x47ac <edit_clock+0xc0>
    47f8:	80 3f       	cpi	r24, 0xF0	; 240
    47fa:	09 f0       	breq	.+2      	; 0x47fe <edit_clock+0x112>
    47fc:	7f c0       	rjmp	.+254    	; 0x48fc <edit_clock+0x210>
    47fe:	d6 cf       	rjmp	.-84     	; 0x47ac <edit_clock+0xc0>
			{	flag = 1;	break;}
	if(flag)
		{
		//Update EEPROM: Cac gia tri lien quan den hen gio
		for(uint8_t i = 1; i<=4; i++)
			if(state_count[i] == 240 || state_count[i] == 15)
    4800:	e1 90       	ld	r14, Z+
    4802:	be 2d       	mov	r27, r14
    4804:	b0 3f       	cpi	r27, 0xF0	; 240
    4806:	11 f0       	breq	.+4      	; 0x480c <edit_clock+0x120>
    4808:	bf 30       	cpi	r27, 0x0F	; 15
    480a:	49 f4       	brne	.+18     	; 0x481e <edit_clock+0x132>
				{	new_count[i] = countdown_min[i];	new_state[i] = state_count[i]; }
    480c:	d9 01       	movw	r26, r18
    480e:	6d 91       	ld	r22, X+
    4810:	7c 91       	ld	r23, X
    4812:	d3 01       	movw	r26, r6
    4814:	6d 93       	st	X+, r22
    4816:	7c 93       	st	X, r23
    4818:	dc 01       	movw	r26, r24
    481a:	ec 92       	st	X, r14
    481c:	05 c0       	rjmp	.+10     	; 0x4828 <edit_clock+0x13c>
			else
				{	new_count[i] = 0xffff;	new_state[i] = 0xff; }	
    481e:	d3 01       	movw	r26, r6
    4820:	0d 93       	st	X+, r16
    4822:	1c 93       	st	X, r17
    4824:	dc 01       	movw	r26, r24
    4826:	8c 92       	st	X, r8
    4828:	2e 5f       	subi	r18, 0xFE	; 254
    482a:	3f 4f       	sbci	r19, 0xFF	; 255
    482c:	62 e0       	ldi	r22, 0x02	; 2
    482e:	70 e0       	ldi	r23, 0x00	; 0
    4830:	66 0e       	add	r6, r22
    4832:	77 1e       	adc	r7, r23
    4834:	01 96       	adiw	r24, 0x01	; 1
		if(state_count[i] == 15 || state_count[i] == 240)
			{	flag = 1;	break;}
	if(flag)
		{
		//Update EEPROM: Cac gia tri lien quan den hen gio
		for(uint8_t i = 1; i<=4; i++)
    4836:	e4 17       	cp	r30, r20
    4838:	f5 07       	cpc	r31, r21
    483a:	11 f7       	brne	.-60     	; 0x4800 <edit_clock+0x114>
				{	new_count[i] = countdown_min[i];	new_state[i] = state_count[i]; }
			else
				{	new_count[i] = 0xffff;	new_state[i] = 0xff; }	
	
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
    483c:	80 91 4e 06 	lds	r24, 0x064E
    4840:	8f 73       	andi	r24, 0x3F	; 63
    4842:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4846:	8a 8b       	std	Y+18, r24	; 0x12
    4848:	0f 2e       	mov	r0, r31
    484a:	f1 e1       	ldi	r31, 0x11	; 17
    484c:	ef 2e       	mov	r14, r31
    484e:	ff 24       	eor	r15, r15
    4850:	f0 2d       	mov	r31, r0
    4852:	ec 0e       	add	r14, r28
    4854:	fd 1e       	adc	r15, r29
    4856:	00 e0       	ldi	r16, 0x00	; 0
    4858:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t i = 1; i <= 6; i++)
			{
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);
    485a:	0f 2e       	mov	r0, r31
    485c:	fc e4       	ldi	r31, 0x4C	; 76
    485e:	8f 2e       	mov	r8, r31
    4860:	f6 e0       	ldi	r31, 0x06	; 6
    4862:	9f 2e       	mov	r9, r31
    4864:	f0 2d       	mov	r31, r0
	
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
		for (uint8_t i = 1; i <= 6; i++)
			{
			if(i != 2)
    4866:	01 30       	cpi	r16, 0x01	; 1
    4868:	49 f0       	breq	.+18     	; 0x487c <edit_clock+0x190>
	_delay_ms(1);
	TWI_DS1307_rblock(tData,7);
	Display();
	//sei();
}
void edit_clock(uint8_t type, uint8_t val1, uint8_t val2, uint8_t val3)
    486a:	f8 01       	movw	r30, r16
    486c:	31 96       	adiw	r30, 0x01	; 1
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
		for (uint8_t i = 1; i <= 6; i++)
			{
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);
    486e:	e8 0d       	add	r30, r8
    4870:	f9 1d       	adc	r31, r9
    4872:	80 81       	ld	r24, Z
    4874:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4878:	d7 01       	movw	r26, r14
    487a:	8c 93       	st	X, r24
			while(!eeprom_is_ready());
    487c:	e1 99       	sbic	0x1c, 1	; 28
    487e:	fe cf       	rjmp	.-4      	; 0x487c <edit_clock+0x190>
	_delay_ms(1);
	TWI_DS1307_rblock(tData,7);
	Display();
	//sei();
}
void edit_clock(uint8_t type, uint8_t val1, uint8_t val2, uint8_t val3)
    4880:	0f 5f       	subi	r16, 0xFF	; 255
    4882:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i = 1; i <= 6; i++)
			{
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);
			while(!eeprom_is_ready());
			eeprom_write_byte(i,copy_tData[i]);
    4884:	f7 01       	movw	r30, r14
    4886:	61 91       	ld	r22, Z+
    4888:	7f 01       	movw	r14, r30
    488a:	c8 01       	movw	r24, r16
    488c:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4890:	89 ef       	ldi	r24, 0xF9	; 249
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	f1 f7       	brne	.-4      	; 0x4894 <edit_clock+0x1a8>
    4898:	00 c0       	rjmp	.+0      	; 0x489a <edit_clock+0x1ae>
    489a:	00 00       	nop
			else
				{	new_count[i] = 0xffff;	new_state[i] = 0xff; }	
	
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
		for (uint8_t i = 1; i <= 6; i++)
    489c:	06 30       	cpi	r16, 0x06	; 6
    489e:	11 05       	cpc	r17, r1
    48a0:	11 f7       	brne	.-60     	; 0x4866 <edit_clock+0x17a>
    48a2:	0f 2e       	mov	r0, r31
    48a4:	f7 e0       	ldi	r31, 0x07	; 7
    48a6:	ef 2e       	mov	r14, r31
    48a8:	ff 24       	eor	r15, r15
    48aa:	f0 2d       	mov	r31, r0
    48ac:	0f e0       	ldi	r16, 0x0F	; 15
    48ae:	10 e0       	ldi	r17, 0x00	; 0
			}
	
		//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
		for (uint8_t i = 1; i <= 4; i++)
			{
			while(!eeprom_is_ready());
    48b0:	e1 99       	sbic	0x1c, 1	; 28
    48b2:	fe cf       	rjmp	.-4      	; 0x48b0 <edit_clock+0x1c4>
			eeprom_write_word(5+i*2,new_count[i]);
    48b4:	d5 01       	movw	r26, r10
    48b6:	6d 91       	ld	r22, X+
    48b8:	7d 91       	ld	r23, X+
    48ba:	5d 01       	movw	r10, r26
    48bc:	c7 01       	movw	r24, r14
    48be:	0e 94 67 3a 	call	0x74ce	; 0x74ce <__eewr_word_m32>
    48c2:	e9 ef       	ldi	r30, 0xF9	; 249
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	31 97       	sbiw	r30, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <edit_clock+0x1da>
    48ca:	00 c0       	rjmp	.+0      	; 0x48cc <edit_clock+0x1e0>
    48cc:	00 00       	nop
			_delay_ms(1);
			while(!eeprom_is_ready());
    48ce:	e1 99       	sbic	0x1c, 1	; 28
    48d0:	fe cf       	rjmp	.-4      	; 0x48ce <edit_clock+0x1e2>
			eeprom_write_byte(14+i,new_state[i]);
    48d2:	d6 01       	movw	r26, r12
    48d4:	6d 91       	ld	r22, X+
    48d6:	6d 01       	movw	r12, r26
    48d8:	c8 01       	movw	r24, r16
    48da:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    48de:	e9 ef       	ldi	r30, 0xF9	; 249
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	31 97       	sbiw	r30, 0x01	; 1
    48e4:	f1 f7       	brne	.-4      	; 0x48e2 <edit_clock+0x1f6>
    48e6:	00 c0       	rjmp	.+0      	; 0x48e8 <edit_clock+0x1fc>
    48e8:	00 00       	nop
    48ea:	0f 5f       	subi	r16, 0xFF	; 255
    48ec:	1f 4f       	sbci	r17, 0xFF	; 255
    48ee:	62 e0       	ldi	r22, 0x02	; 2
    48f0:	70 e0       	ldi	r23, 0x00	; 0
    48f2:	e6 0e       	add	r14, r22
    48f4:	f7 1e       	adc	r15, r23
			eeprom_write_byte(i,copy_tData[i]);
			_delay_ms(1);
			}
	
		//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
		for (uint8_t i = 1; i <= 4; i++)
    48f6:	03 31       	cpi	r16, 0x13	; 19
    48f8:	11 05       	cpc	r17, r1
    48fa:	d1 f6       	brne	.-76     	; 0x48b0 <edit_clock+0x1c4>
			eeprom_write_byte(14+i,new_state[i]);
			_delay_ms(1);
			}	
		}
	//sei();
}
    48fc:	66 96       	adiw	r28, 0x16	; 22
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	f8 94       	cli
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	cf 91       	pop	r28
    490a:	df 91       	pop	r29
    490c:	1f 91       	pop	r17
    490e:	0f 91       	pop	r16
    4910:	ff 90       	pop	r15
    4912:	ef 90       	pop	r14
    4914:	df 90       	pop	r13
    4916:	cf 90       	pop	r12
    4918:	bf 90       	pop	r11
    491a:	af 90       	pop	r10
    491c:	9f 90       	pop	r9
    491e:	8f 90       	pop	r8
    4920:	7f 90       	pop	r7
    4922:	6f 90       	pop	r6
    4924:	08 95       	ret

00004926 <set_time_count>:
void set_time_count(uint8_t device, uint8_t state, uint16_t time)
{
    4926:	6f 92       	push	r6
    4928:	7f 92       	push	r7
    492a:	8f 92       	push	r8
    492c:	9f 92       	push	r9
    492e:	af 92       	push	r10
    4930:	bf 92       	push	r11
    4932:	cf 92       	push	r12
    4934:	df 92       	push	r13
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	66 97       	sbiw	r28, 0x16	; 22
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	de bf       	out	0x3e, r29	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	cd bf       	out	0x3d, r28	; 61
    4952:	f8 2e       	mov	r15, r24
    4954:	d6 2e       	mov	r13, r22
    4956:	3a 01       	movw	r6, r20
	//Lay moc thoi gian moi
	uint8_t new_clock[7];
	new_clock[2] = BCD2Dec(tData[2] & 0x3F);
    4958:	80 91 4e 06 	lds	r24, 0x064E
    495c:	8f 73       	andi	r24, 0x3F	; 63
    495e:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4962:	8b 83       	std	Y+3, r24	; 0x03
    4964:	cc 24       	eor	r12, r12
    4966:	68 94       	set
    4968:	c1 f8       	bld	r12, 1
    496a:	ee 24       	eor	r14, r14
    496c:	e3 94       	inc	r14
	for(uint8_t i = 1; i <= 6; i++)		if(i != 2)	new_clock[i] = BCD2Dec(tData[i]);
    496e:	0f 2e       	mov	r0, r31
    4970:	fc e4       	ldi	r31, 0x4C	; 76
    4972:	af 2e       	mov	r10, r31
    4974:	f6 e0       	ldi	r31, 0x06	; 6
    4976:	bf 2e       	mov	r11, r31
    4978:	f0 2d       	mov	r31, r0
    497a:	4e 01       	movw	r8, r28
    497c:	08 94       	sec
    497e:	81 1c       	adc	r8, r1
    4980:	91 1c       	adc	r9, r1
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <set_time_count+0x62>
}
void set_time_count(uint8_t device, uint8_t state, uint16_t time)
{
	//Lay moc thoi gian moi
	uint8_t new_clock[7];
	new_clock[2] = BCD2Dec(tData[2] & 0x3F);
    4984:	e3 94       	inc	r14
    4986:	c3 94       	inc	r12
	for(uint8_t i = 1; i <= 6; i++)		if(i != 2)	new_clock[i] = BCD2Dec(tData[i]);
    4988:	4e 2d       	mov	r20, r14
    498a:	42 30       	cpi	r20, 0x02	; 2
    498c:	d9 f3       	breq	.-10     	; 0x4984 <set_time_count+0x5e>
    498e:	0e 2d       	mov	r16, r14
    4990:	10 e0       	ldi	r17, 0x00	; 0
    4992:	f5 01       	movw	r30, r10
    4994:	e0 0f       	add	r30, r16
    4996:	f1 1f       	adc	r31, r17
    4998:	80 81       	ld	r24, Z
    499a:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    499e:	f4 01       	movw	r30, r8
    49a0:	e0 0f       	add	r30, r16
    49a2:	f1 1f       	adc	r31, r17
    49a4:	80 83       	st	Z, r24
    49a6:	5c 2d       	mov	r21, r12
    49a8:	57 30       	cpi	r21, 0x07	; 7
    49aa:	60 f3       	brcs	.-40     	; 0x4984 <set_time_count+0x5e>
	
	//Tao chuoi gia tri moi
	uint16_t new_count[5];
	uint8_t new_state[5];
	countdown_min[device] = new_count[device] = time;
    49ac:	8f 2d       	mov	r24, r15
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	9c 01       	movw	r18, r24
    49b2:	22 0f       	add	r18, r18
    49b4:	33 1f       	adc	r19, r19
    49b6:	fe 01       	movw	r30, r28
    49b8:	e2 0f       	add	r30, r18
    49ba:	f3 1f       	adc	r31, r19
    49bc:	71 86       	std	Z+9, r7	; 0x09
    49be:	60 86       	std	Z+8, r6	; 0x08
    49c0:	e2 e3       	ldi	r30, 0x32	; 50
    49c2:	f6 e0       	ldi	r31, 0x06	; 6
    49c4:	2e 0f       	add	r18, r30
    49c6:	3f 1f       	adc	r19, r31
    49c8:	d9 01       	movw	r26, r18
    49ca:	6d 92       	st	X+, r6
    49cc:	7c 92       	st	X, r7
	state_count[device] = new_state[device] = state;
    49ce:	de 01       	movw	r26, r28
    49d0:	a8 0f       	add	r26, r24
    49d2:	b9 1f       	adc	r27, r25
    49d4:	52 96       	adiw	r26, 0x12	; 18
    49d6:	dc 92       	st	X, r13
    49d8:	2d e3       	ldi	r18, 0x3D	; 61
    49da:	36 e0       	ldi	r19, 0x06	; 6
    49dc:	82 0f       	add	r24, r18
    49de:	93 1f       	adc	r25, r19
    49e0:	dc 01       	movw	r26, r24
    49e2:	dc 92       	st	X, r13
    49e4:	0f 2e       	mov	r0, r31
    49e6:	fa e0       	ldi	r31, 0x0A	; 10
    49e8:	af 2e       	mov	r10, r31
    49ea:	bb 24       	eor	r11, r11
    49ec:	f0 2d       	mov	r31, r0
    49ee:	ac 0e       	add	r10, r28
    49f0:	bd 1e       	adc	r11, r29
    49f2:	2f 5f       	subi	r18, 0xFF	; 255
    49f4:	3f 4f       	sbci	r19, 0xFF	; 255
    49f6:	0f 2e       	mov	r0, r31
    49f8:	f3 e1       	ldi	r31, 0x13	; 19
    49fa:	cf 2e       	mov	r12, r31
    49fc:	dd 24       	eor	r13, r13
    49fe:	f0 2d       	mov	r31, r0
    4a00:	cc 0e       	add	r12, r28
    4a02:	dd 1e       	adc	r13, r29
    4a04:	32 96       	adiw	r30, 0x02	; 2
    4a06:	c6 01       	movw	r24, r12
    4a08:	45 01       	movw	r8, r10
	for(uint8_t i = 1; i <= 4; i++)
    4a0a:	01 e0       	ldi	r16, 0x01	; 1
		if(i != device)
			if(countdown_min[i] != 0)	{new_count[i] = countdown_min[i];	new_state[i] = state_count[i];}
			else	{new_count[i] = 0xffff;	new_state[i] = 255;}
    4a0c:	6f ef       	ldi	r22, 0xFF	; 255
    4a0e:	7f ef       	ldi	r23, 0xFF	; 255
    4a10:	1f ef       	ldi	r17, 0xFF	; 255
	uint16_t new_count[5];
	uint8_t new_state[5];
	countdown_min[device] = new_count[device] = time;
	state_count[device] = new_state[device] = state;
	for(uint8_t i = 1; i <= 4; i++)
		if(i != device)
    4a12:	0f 15       	cp	r16, r15
    4a14:	91 f0       	breq	.+36     	; 0x4a3a <set_time_count+0x114>
			if(countdown_min[i] != 0)	{new_count[i] = countdown_min[i];	new_state[i] = state_count[i];}
    4a16:	40 81       	ld	r20, Z
    4a18:	51 81       	ldd	r21, Z+1	; 0x01
    4a1a:	41 15       	cp	r20, r1
    4a1c:	51 05       	cpc	r21, r1
    4a1e:	41 f0       	breq	.+16     	; 0x4a30 <set_time_count+0x10a>
    4a20:	d4 01       	movw	r26, r8
    4a22:	4d 93       	st	X+, r20
    4a24:	5c 93       	st	X, r21
    4a26:	d9 01       	movw	r26, r18
    4a28:	4c 91       	ld	r20, X
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	4c 93       	st	X, r20
    4a2e:	05 c0       	rjmp	.+10     	; 0x4a3a <set_time_count+0x114>
			else	{new_count[i] = 0xffff;	new_state[i] = 255;}
    4a30:	d4 01       	movw	r26, r8
    4a32:	6d 93       	st	X+, r22
    4a34:	7c 93       	st	X, r23
    4a36:	dc 01       	movw	r26, r24
    4a38:	1c 93       	st	X, r17
	//Tao chuoi gia tri moi
	uint16_t new_count[5];
	uint8_t new_state[5];
	countdown_min[device] = new_count[device] = time;
	state_count[device] = new_state[device] = state;
	for(uint8_t i = 1; i <= 4; i++)
    4a3a:	0f 5f       	subi	r16, 0xFF	; 255
    4a3c:	42 e0       	ldi	r20, 0x02	; 2
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	84 0e       	add	r8, r20
    4a42:	95 1e       	adc	r9, r21
    4a44:	2f 5f       	subi	r18, 0xFF	; 255
    4a46:	3f 4f       	sbci	r19, 0xFF	; 255
    4a48:	01 96       	adiw	r24, 0x01	; 1
    4a4a:	32 96       	adiw	r30, 0x02	; 2
    4a4c:	05 30       	cpi	r16, 0x05	; 5
    4a4e:	09 f7       	brne	.-62     	; 0x4a12 <set_time_count+0xec>
    4a50:	ee 24       	eor	r14, r14
    4a52:	ff 24       	eor	r15, r15
    4a54:	68 94       	set
    4a56:	e1 f8       	bld	r14, 1
    4a58:	ec 0e       	add	r14, r28
    4a5a:	fd 1e       	adc	r15, r29
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	10 e0       	ldi	r17, 0x00	; 0
			if(countdown_min[i] != 0)	{new_count[i] = countdown_min[i];	new_state[i] = state_count[i];}
			else	{new_count[i] = 0xffff;	new_state[i] = 255;}
	//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte		
	for (uint8_t i = 1; i <= 6; i++)
		{
			while(!eeprom_is_ready());
    4a60:	e1 99       	sbic	0x1c, 1	; 28
    4a62:	fe cf       	rjmp	.-4      	; 0x4a60 <set_time_count+0x13a>
			_delay_ms(1);
			}	
		}
	//sei();
}
void set_time_count(uint8_t device, uint8_t state, uint16_t time)
    4a64:	0f 5f       	subi	r16, 0xFF	; 255
    4a66:	1f 4f       	sbci	r17, 0xFF	; 255
			else	{new_count[i] = 0xffff;	new_state[i] = 255;}
	//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte		
	for (uint8_t i = 1; i <= 6; i++)
		{
			while(!eeprom_is_ready());
			eeprom_write_byte(i,new_clock[i]);
    4a68:	d7 01       	movw	r26, r14
    4a6a:	6d 91       	ld	r22, X+
    4a6c:	7d 01       	movw	r14, r26
    4a6e:	c8 01       	movw	r24, r16
    4a70:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4a74:	e9 ef       	ldi	r30, 0xF9	; 249
    4a76:	f0 e0       	ldi	r31, 0x00	; 0
    4a78:	31 97       	sbiw	r30, 0x01	; 1
    4a7a:	f1 f7       	brne	.-4      	; 0x4a78 <set_time_count+0x152>
    4a7c:	00 c0       	rjmp	.+0      	; 0x4a7e <set_time_count+0x158>
    4a7e:	00 00       	nop
	for(uint8_t i = 1; i <= 4; i++)
		if(i != device)
			if(countdown_min[i] != 0)	{new_count[i] = countdown_min[i];	new_state[i] = state_count[i];}
			else	{new_count[i] = 0xffff;	new_state[i] = 255;}
	//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte		
	for (uint8_t i = 1; i <= 6; i++)
    4a80:	06 30       	cpi	r16, 0x06	; 6
    4a82:	11 05       	cpc	r17, r1
    4a84:	69 f7       	brne	.-38     	; 0x4a60 <set_time_count+0x13a>
    4a86:	0f 2e       	mov	r0, r31
    4a88:	f7 e0       	ldi	r31, 0x07	; 7
    4a8a:	ef 2e       	mov	r14, r31
    4a8c:	ff 24       	eor	r15, r15
    4a8e:	f0 2d       	mov	r31, r0
    4a90:	0f e0       	ldi	r16, 0x0F	; 15
    4a92:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(1);
		}		
	//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
	for (uint8_t i = 1; i <= 4; i++)
		{
			while(!eeprom_is_ready());
    4a94:	e1 99       	sbic	0x1c, 1	; 28
    4a96:	fe cf       	rjmp	.-4      	; 0x4a94 <set_time_count+0x16e>
			eeprom_write_word(5+i*2,new_count[i]);
    4a98:	d5 01       	movw	r26, r10
    4a9a:	6d 91       	ld	r22, X+
    4a9c:	7d 91       	ld	r23, X+
    4a9e:	5d 01       	movw	r10, r26
    4aa0:	c7 01       	movw	r24, r14
    4aa2:	0e 94 67 3a 	call	0x74ce	; 0x74ce <__eewr_word_m32>
    4aa6:	e9 ef       	ldi	r30, 0xF9	; 249
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	31 97       	sbiw	r30, 0x01	; 1
    4aac:	f1 f7       	brne	.-4      	; 0x4aaa <set_time_count+0x184>
    4aae:	00 c0       	rjmp	.+0      	; 0x4ab0 <set_time_count+0x18a>
    4ab0:	00 00       	nop
			_delay_ms(1);
			while(!eeprom_is_ready());
    4ab2:	e1 99       	sbic	0x1c, 1	; 28
    4ab4:	fe cf       	rjmp	.-4      	; 0x4ab2 <set_time_count+0x18c>
			eeprom_write_byte(14+i,new_state[i]);
    4ab6:	d6 01       	movw	r26, r12
    4ab8:	6d 91       	ld	r22, X+
    4aba:	6d 01       	movw	r12, r26
    4abc:	c8 01       	movw	r24, r16
    4abe:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4ac2:	e9 ef       	ldi	r30, 0xF9	; 249
    4ac4:	f0 e0       	ldi	r31, 0x00	; 0
    4ac6:	31 97       	sbiw	r30, 0x01	; 1
    4ac8:	f1 f7       	brne	.-4      	; 0x4ac6 <set_time_count+0x1a0>
    4aca:	00 c0       	rjmp	.+0      	; 0x4acc <set_time_count+0x1a6>
    4acc:	00 00       	nop
    4ace:	0f 5f       	subi	r16, 0xFF	; 255
    4ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad2:	42 e0       	ldi	r20, 0x02	; 2
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	e4 0e       	add	r14, r20
    4ad8:	f5 1e       	adc	r15, r21
			while(!eeprom_is_ready());
			eeprom_write_byte(i,new_clock[i]);
			_delay_ms(1);
		}		
	//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
	for (uint8_t i = 1; i <= 4; i++)
    4ada:	03 31       	cpi	r16, 0x13	; 19
    4adc:	11 05       	cpc	r17, r1
    4ade:	d1 f6       	brne	.-76     	; 0x4a94 <set_time_count+0x16e>
			_delay_ms(1);
			while(!eeprom_is_ready());
			eeprom_write_byte(14+i,new_state[i]);
			_delay_ms(1);
		}
}
    4ae0:	66 96       	adiw	r28, 0x16	; 22
    4ae2:	0f b6       	in	r0, 0x3f	; 63
    4ae4:	f8 94       	cli
    4ae6:	de bf       	out	0x3e, r29	; 62
    4ae8:	0f be       	out	0x3f, r0	; 63
    4aea:	cd bf       	out	0x3d, r28	; 61
    4aec:	cf 91       	pop	r28
    4aee:	df 91       	pop	r29
    4af0:	1f 91       	pop	r17
    4af2:	0f 91       	pop	r16
    4af4:	ff 90       	pop	r15
    4af6:	ef 90       	pop	r14
    4af8:	df 90       	pop	r13
    4afa:	cf 90       	pop	r12
    4afc:	bf 90       	pop	r11
    4afe:	af 90       	pop	r10
    4b00:	9f 90       	pop	r9
    4b02:	8f 90       	pop	r8
    4b04:	7f 90       	pop	r7
    4b06:	6f 90       	pop	r6
    4b08:	08 95       	ret

00004b0a <set_temp_val>:

void set_temp_val(unsigned char temp, unsigned char state, unsigned char device)
{
    4b0a:	0f 93       	push	r16
    4b0c:	1f 93       	push	r17
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
    4b12:	08 2f       	mov	r16, r24
    4b14:	16 2f       	mov	r17, r22
	begin_auto(device);
    4b16:	c4 2f       	mov	r28, r20
    4b18:	d0 e0       	ldi	r29, 0x00	; 0
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <begin_auto>
	auto_off[device] = temp;
    4b20:	fe 01       	movw	r30, r28
    4b22:	e8 5a       	subi	r30, 0xA8	; 168
    4b24:	f9 4f       	sbci	r31, 0xF9	; 249
    4b26:	00 83       	st	Z, r16
	auto_state[device] = state;	
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e3 5a       	subi	r30, 0xA3	; 163
    4b2c:	f9 4f       	sbci	r31, 0xF9	; 249
    4b2e:	10 83       	st	Z, r17
	while(!eeprom_is_ready());
    4b30:	e1 99       	sbic	0x1c, 1	; 28
    4b32:	fe cf       	rjmp	.-4      	; 0x4b30 <set_temp_val+0x26>
	eeprom_write_byte(device + 18, temp);
    4b34:	ce 01       	movw	r24, r28
    4b36:	42 96       	adiw	r24, 0x12	; 18
    4b38:	60 2f       	mov	r22, r16
    4b3a:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4b3e:	89 ef       	ldi	r24, 0xF9	; 249
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	f1 f7       	brne	.-4      	; 0x4b42 <set_temp_val+0x38>
    4b46:	00 c0       	rjmp	.+0      	; 0x4b48 <set_temp_val+0x3e>
    4b48:	00 00       	nop
	_delay_ms(1);
	while(!eeprom_is_ready());
    4b4a:	e1 99       	sbic	0x1c, 1	; 28
    4b4c:	fe cf       	rjmp	.-4      	; 0x4b4a <set_temp_val+0x40>
	eeprom_write_byte(device + 22, state);
    4b4e:	ce 01       	movw	r24, r28
    4b50:	46 96       	adiw	r24, 0x16	; 22
    4b52:	61 2f       	mov	r22, r17
    4b54:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4b58:	89 ef       	ldi	r24, 0xF9	; 249
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	01 97       	sbiw	r24, 0x01	; 1
    4b5e:	f1 f7       	brne	.-4      	; 0x4b5c <set_temp_val+0x52>
    4b60:	00 c0       	rjmp	.+0      	; 0x4b62 <set_temp_val+0x58>
    4b62:	00 00       	nop
	_delay_ms(1);
}
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	0f 91       	pop	r16
    4b6c:	08 95       	ret

00004b6e <reset_eeprom>:
	}
}

//Nhom ham backup
void reset_eeprom( uint8_t begin, uint8_t end)
{
    4b6e:	0f 93       	push	r16
    4b70:	1f 93       	push	r17
    4b72:	06 2f       	mov	r16, r22
	for (unsigned char i = begin; i <= end; i++)
    4b74:	68 17       	cp	r22, r24
    4b76:	88 f0       	brcs	.+34     	; 0x4b9a <reset_eeprom+0x2c>
    4b78:	18 2f       	mov	r17, r24
		{
			while(!eeprom_is_ready());	
    4b7a:	e1 99       	sbic	0x1c, 1	; 28
    4b7c:	fe cf       	rjmp	.-4      	; 0x4b7a <reset_eeprom+0xc>
			eeprom_write_byte(i,255);
    4b7e:	81 2f       	mov	r24, r17
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	6f ef       	ldi	r22, 0xFF	; 255
    4b84:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4b88:	89 ef       	ldi	r24, 0xF9	; 249
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	f1 f7       	brne	.-4      	; 0x4b8c <reset_eeprom+0x1e>
    4b90:	00 c0       	rjmp	.+0      	; 0x4b92 <reset_eeprom+0x24>
    4b92:	00 00       	nop
}

//Nhom ham backup
void reset_eeprom( uint8_t begin, uint8_t end)
{
	for (unsigned char i = begin; i <= end; i++)
    4b94:	1f 5f       	subi	r17, 0xFF	; 255
    4b96:	01 17       	cp	r16, r17
    4b98:	80 f7       	brcc	.-32     	; 0x4b7a <reset_eeprom+0xc>
		{
			while(!eeprom_is_ready());	
			eeprom_write_byte(i,255);
			_delay_ms(1);
		}
}
    4b9a:	1f 91       	pop	r17
    4b9c:	0f 91       	pop	r16
    4b9e:	08 95       	ret

00004ba0 <reset_one_device>:
void reset_one_device(uint8_t device)
{	
    4ba0:	cf 93       	push	r28
    4ba2:	df 93       	push	r29
	countdown_min[device] = state_count[device] = auto_off[device] = auto_state[device] = 0;
    4ba4:	c8 2f       	mov	r28, r24
    4ba6:	d0 e0       	ldi	r29, 0x00	; 0
    4ba8:	fe 01       	movw	r30, r28
    4baa:	e3 5a       	subi	r30, 0xA3	; 163
    4bac:	f9 4f       	sbci	r31, 0xF9	; 249
    4bae:	10 82       	st	Z, r1
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e8 5a       	subi	r30, 0xA8	; 168
    4bb4:	f9 4f       	sbci	r31, 0xF9	; 249
    4bb6:	10 82       	st	Z, r1
    4bb8:	fe 01       	movw	r30, r28
    4bba:	e3 5c       	subi	r30, 0xC3	; 195
    4bbc:	f9 4f       	sbci	r31, 0xF9	; 249
    4bbe:	10 82       	st	Z, r1
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ee 0f       	add	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	ee 5c       	subi	r30, 0xCE	; 206
    4bc8:	f9 4f       	sbci	r31, 0xF9	; 249
    4bca:	11 82       	std	Z+1, r1	; 0x01
    4bcc:	10 82       	st	Z, r1
	while(!eeprom_is_ready());	eeprom_write_word(5+device*2,255);		_delay_ms(1);
    4bce:	e1 99       	sbic	0x1c, 1	; 28
    4bd0:	fe cf       	rjmp	.-4      	; 0x4bce <reset_one_device+0x2e>
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	05 96       	adiw	r24, 0x05	; 5
    4bda:	6f ef       	ldi	r22, 0xFF	; 255
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	0e 94 67 3a 	call	0x74ce	; 0x74ce <__eewr_word_m32>
    4be2:	89 ef       	ldi	r24, 0xF9	; 249
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	01 97       	sbiw	r24, 0x01	; 1
    4be8:	f1 f7       	brne	.-4      	; 0x4be6 <reset_one_device+0x46>
    4bea:	00 c0       	rjmp	.+0      	; 0x4bec <reset_one_device+0x4c>
    4bec:	00 00       	nop
	while(!eeprom_is_ready());	eeprom_write_byte(14+device,255);		_delay_ms(1);
    4bee:	e1 99       	sbic	0x1c, 1	; 28
    4bf0:	fe cf       	rjmp	.-4      	; 0x4bee <reset_one_device+0x4e>
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	0e 96       	adiw	r24, 0x0e	; 14
    4bf6:	6f ef       	ldi	r22, 0xFF	; 255
    4bf8:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4bfc:	89 ef       	ldi	r24, 0xF9	; 249
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	01 97       	sbiw	r24, 0x01	; 1
    4c02:	f1 f7       	brne	.-4      	; 0x4c00 <reset_one_device+0x60>
    4c04:	00 c0       	rjmp	.+0      	; 0x4c06 <reset_one_device+0x66>
    4c06:	00 00       	nop
	while(!eeprom_is_ready());	eeprom_write_byte(device+18,255);		_delay_ms(1);
    4c08:	e1 99       	sbic	0x1c, 1	; 28
    4c0a:	fe cf       	rjmp	.-4      	; 0x4c08 <reset_one_device+0x68>
    4c0c:	ce 01       	movw	r24, r28
    4c0e:	42 96       	adiw	r24, 0x12	; 18
    4c10:	6f ef       	ldi	r22, 0xFF	; 255
    4c12:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4c16:	89 ef       	ldi	r24, 0xF9	; 249
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	01 97       	sbiw	r24, 0x01	; 1
    4c1c:	f1 f7       	brne	.-4      	; 0x4c1a <reset_one_device+0x7a>
    4c1e:	00 c0       	rjmp	.+0      	; 0x4c20 <reset_one_device+0x80>
    4c20:	00 00       	nop
	while(!eeprom_is_ready());	eeprom_write_byte(device+22,255);		_delay_ms(1);
    4c22:	e1 99       	sbic	0x1c, 1	; 28
    4c24:	fe cf       	rjmp	.-4      	; 0x4c22 <reset_one_device+0x82>
    4c26:	ce 01       	movw	r24, r28
    4c28:	46 96       	adiw	r24, 0x16	; 22
    4c2a:	6f ef       	ldi	r22, 0xFF	; 255
    4c2c:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    4c30:	89 ef       	ldi	r24, 0xF9	; 249
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	f1 f7       	brne	.-4      	; 0x4c34 <reset_one_device+0x94>
    4c38:	00 c0       	rjmp	.+0      	; 0x4c3a <reset_one_device+0x9a>
    4c3a:	00 00       	nop
}
    4c3c:	df 91       	pop	r29
    4c3e:	cf 91       	pop	r28
    4c40:	08 95       	ret

00004c42 <reset_all>:
void reset_all()
{
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
	reset_eeprom(1,26);
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	6a e1       	ldi	r22, 0x1A	; 26
    4c4a:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <reset_eeprom>
    4c4e:	ee e5       	ldi	r30, 0x5E	; 94
    4c50:	f6 e0       	ldi	r31, 0x06	; 6
    4c52:	89 e5       	ldi	r24, 0x59	; 89
    4c54:	96 e0       	ldi	r25, 0x06	; 6
    4c56:	ce e3       	ldi	r28, 0x3E	; 62
    4c58:	d6 e0       	ldi	r29, 0x06	; 6
    4c5a:	44 e3       	ldi	r20, 0x34	; 52
    4c5c:	56 e0       	ldi	r21, 0x06	; 6
	while(!eeprom_is_ready());	eeprom_write_word(5+device*2,255);		_delay_ms(1);
	while(!eeprom_is_ready());	eeprom_write_byte(14+device,255);		_delay_ms(1);
	while(!eeprom_is_ready());	eeprom_write_byte(device+18,255);		_delay_ms(1);
	while(!eeprom_is_ready());	eeprom_write_byte(device+22,255);		_delay_ms(1);
}
void reset_all()
    4c5e:	9f 01       	movw	r18, r30
    4c60:	2c 5f       	subi	r18, 0xFC	; 252
    4c62:	3f 4f       	sbci	r19, 0xFF	; 255
{
	reset_eeprom(1,26);
	for(uint8_t i = 1; i<=4; i++)
		countdown_min[i] = state_count[i] = auto_off[i] = auto_state[i] = 0; 
    4c64:	11 92       	st	Z+, r1
    4c66:	dc 01       	movw	r26, r24
    4c68:	1d 92       	st	X+, r1
    4c6a:	cd 01       	movw	r24, r26
    4c6c:	19 92       	st	Y+, r1
    4c6e:	da 01       	movw	r26, r20
    4c70:	1d 92       	st	X+, r1
    4c72:	1d 92       	st	X+, r1
    4c74:	ad 01       	movw	r20, r26
	while(!eeprom_is_ready());	eeprom_write_byte(device+22,255);		_delay_ms(1);
}
void reset_all()
{
	reset_eeprom(1,26);
	for(uint8_t i = 1; i<=4; i++)
    4c76:	e2 17       	cp	r30, r18
    4c78:	f3 07       	cpc	r31, r19
    4c7a:	a1 f7       	brne	.-24     	; 0x4c64 <reset_all+0x22>
		countdown_min[i] = state_count[i] = auto_off[i] = auto_state[i] = 0; 
}
    4c7c:	df 91       	pop	r29
    4c7e:	cf 91       	pop	r28
    4c80:	08 95       	ret

00004c82 <max_date>:
unsigned char max_date(unsigned char val_month, unsigned char val_year)
{
	val_year += 2000;
	if(val_month == 2)	{if(val_year % 4 == 0)	return 29;	else	return 28;}
    4c82:	82 30       	cpi	r24, 0x02	; 2
    4c84:	21 f4       	brne	.+8      	; 0x4c8e <max_date+0xc>
    4c86:	63 70       	andi	r22, 0x03	; 3
    4c88:	61 f4       	brne	.+24     	; 0x4ca2 <max_date+0x20>
    4c8a:	8d e1       	ldi	r24, 0x1D	; 29
    4c8c:	08 95       	ret
	else	{if(val_month == 4 || val_month == 6 || val_month == 9 || val_month == 11)	return 30;	else	return 31;}	
    4c8e:	84 30       	cpi	r24, 0x04	; 4
    4c90:	51 f0       	breq	.+20     	; 0x4ca6 <max_date+0x24>
    4c92:	86 30       	cpi	r24, 0x06	; 6
    4c94:	51 f0       	breq	.+20     	; 0x4caa <max_date+0x28>
    4c96:	89 30       	cpi	r24, 0x09	; 9
    4c98:	51 f0       	breq	.+20     	; 0x4cae <max_date+0x2c>
    4c9a:	8b 30       	cpi	r24, 0x0B	; 11
    4c9c:	51 f4       	brne	.+20     	; 0x4cb2 <max_date+0x30>
    4c9e:	8e e1       	ldi	r24, 0x1E	; 30
    4ca0:	08 95       	ret
		countdown_min[i] = state_count[i] = auto_off[i] = auto_state[i] = 0; 
}
unsigned char max_date(unsigned char val_month, unsigned char val_year)
{
	val_year += 2000;
	if(val_month == 2)	{if(val_year % 4 == 0)	return 29;	else	return 28;}
    4ca2:	8c e1       	ldi	r24, 0x1C	; 28
    4ca4:	08 95       	ret
	else	{if(val_month == 4 || val_month == 6 || val_month == 9 || val_month == 11)	return 30;	else	return 31;}	
    4ca6:	8e e1       	ldi	r24, 0x1E	; 30
    4ca8:	08 95       	ret
    4caa:	8e e1       	ldi	r24, 0x1E	; 30
    4cac:	08 95       	ret
    4cae:	8e e1       	ldi	r24, 0x1E	; 30
    4cb0:	08 95       	ret
    4cb2:	8f e1       	ldi	r24, 0x1F	; 31
}
    4cb4:	08 95       	ret

00004cb6 <conver2date>:
uint16_t conver2date(unsigned int val_date,unsigned int val_month,unsigned int val_year)
{
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29
    4cc2:	8b 01       	movw	r16, r22
	unsigned int kqua;
	kqua = (val_year - 13)*365;	// Tinh so ngay tu nam 2013
    4cc4:	ec 01       	movw	r28, r24
    4cc6:	c9 58       	subi	r28, 0x89	; 137
    4cc8:	d2 41       	sbci	r29, 0x12	; 18
    4cca:	2d e6       	ldi	r18, 0x6D	; 109
    4ccc:	31 e0       	ldi	r19, 0x01	; 1
    4cce:	42 9f       	mul	r20, r18
    4cd0:	c0 01       	movw	r24, r0
    4cd2:	43 9f       	mul	r20, r19
    4cd4:	90 0d       	add	r25, r0
    4cd6:	52 9f       	mul	r21, r18
    4cd8:	90 0d       	add	r25, r0
    4cda:	11 24       	eor	r1, r1
	kqua += val_date;
    4cdc:	c8 0f       	add	r28, r24
    4cde:	d9 1f       	adc	r29, r25
	if(val_month > 1)
    4ce0:	62 30       	cpi	r22, 0x02	; 2
    4ce2:	71 05       	cpc	r23, r1
    4ce4:	70 f0       	brcs	.+28     	; 0x4d02 <conver2date+0x4c>
		for (uint8_t i = 1;i < val_month;i++)
		{
			kqua += max_date(val_month,val_year);
    4ce6:	86 2f       	mov	r24, r22
    4ce8:	64 2f       	mov	r22, r20
    4cea:	0e 94 41 26 	call	0x4c82	; 0x4c82 <max_date>
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	41 e0       	ldi	r20, 0x01	; 1
    4cf2:	c8 0f       	add	r28, r24
    4cf4:	d9 1f       	adc	r29, r25
{
	unsigned int kqua;
	kqua = (val_year - 13)*365;	// Tinh so ngay tu nam 2013
	kqua += val_date;
	if(val_month > 1)
		for (uint8_t i = 1;i < val_month;i++)
    4cf6:	4f 5f       	subi	r20, 0xFF	; 255
    4cf8:	24 2f       	mov	r18, r20
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	20 17       	cp	r18, r16
    4cfe:	31 07       	cpc	r19, r17
    4d00:	c0 f3       	brcs	.-16     	; 0x4cf2 <conver2date+0x3c>
			kqua += max_date(val_month,val_year);
		}
	if((val_year + 2000) % 4 == 0)
		return kqua++;
	return kqua;
}
    4d02:	7e 01       	movw	r14, r28
    4d04:	8c 2f       	mov	r24, r28
    4d06:	9f 2d       	mov	r25, r15
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	1f 91       	pop	r17
    4d0e:	0f 91       	pop	r16
    4d10:	ff 90       	pop	r15
    4d12:	ef 90       	pop	r14
    4d14:	08 95       	ret

00004d16 <convert2minute>:
uint16_t convert2minute(uint8_t val_min, uint8_t val_hour)
{
	return (val_hour*60 + val_min);
    4d16:	9c e3       	ldi	r25, 0x3C	; 60
    4d18:	69 9f       	mul	r22, r25
    4d1a:	b0 01       	movw	r22, r0
    4d1c:	11 24       	eor	r1, r1
    4d1e:	68 0f       	add	r22, r24
    4d20:	71 1d       	adc	r23, r1
}
    4d22:	86 2f       	mov	r24, r22
    4d24:	97 2f       	mov	r25, r23
    4d26:	08 95       	ret

00004d28 <update_auto>:
void update_auto()
{
    4d28:	cf 92       	push	r12
    4d2a:	df 92       	push	r13
    4d2c:	ef 92       	push	r14
    4d2e:	ff 92       	push	r15
    4d30:	0f 93       	push	r16
    4d32:	1f 93       	push	r17
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	0f 2e       	mov	r0, r31
    4d3a:	fe e5       	ldi	r31, 0x5E	; 94
    4d3c:	cf 2e       	mov	r12, r31
    4d3e:	f6 e0       	ldi	r31, 0x06	; 6
    4d40:	df 2e       	mov	r13, r31
    4d42:	f0 2d       	mov	r31, r0
    4d44:	09 e5       	ldi	r16, 0x59	; 89
    4d46:	16 e0       	ldi	r17, 0x06	; 6
    4d48:	c7 e1       	ldi	r28, 0x17	; 23
    4d4a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 1; i <= 4; i++)
	{
		while(!eeprom_is_ready());		
    4d4c:	e1 99       	sbic	0x1c, 1	; 28
    4d4e:	fe cf       	rjmp	.-4      	; 0x4d4c <update_auto+0x24>
		auto_off[i] = eeprom_read_byte(i + 18);
    4d50:	ce 01       	movw	r24, r28
    4d52:	04 97       	sbiw	r24, 0x04	; 4
    4d54:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__eerd_byte_m32>
}
uint16_t convert2minute(uint8_t val_min, uint8_t val_hour)
{
	return (val_hour*60 + val_min);
}
void update_auto()
    4d58:	78 01       	movw	r14, r16
{
	for(uint8_t i = 1; i <= 4; i++)
	{
		while(!eeprom_is_ready());		
		auto_off[i] = eeprom_read_byte(i + 18);
    4d5a:	f8 01       	movw	r30, r16
    4d5c:	80 83       	st	Z, r24
    4d5e:	89 ef       	ldi	r24, 0xF9	; 249
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	01 97       	sbiw	r24, 0x01	; 1
    4d64:	f1 f7       	brne	.-4      	; 0x4d62 <update_auto+0x3a>
    4d66:	00 c0       	rjmp	.+0      	; 0x4d68 <update_auto+0x40>
    4d68:	00 00       	nop
		_delay_ms(1);	
		while(!eeprom_is_ready());
    4d6a:	e1 99       	sbic	0x1c, 1	; 28
    4d6c:	fe cf       	rjmp	.-4      	; 0x4d6a <update_auto+0x42>
		auto_state[i] = eeprom_read_byte(i + 22);
    4d6e:	ce 01       	movw	r24, r28
    4d70:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__eerd_byte_m32>
    4d74:	f6 01       	movw	r30, r12
    4d76:	81 93       	st	Z+, r24
    4d78:	6f 01       	movw	r12, r30
    4d7a:	89 ef       	ldi	r24, 0xF9	; 249
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	f1 f7       	brne	.-4      	; 0x4d7e <update_auto+0x56>
    4d82:	00 c0       	rjmp	.+0      	; 0x4d84 <update_auto+0x5c>
    4d84:	00 00       	nop
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
    4d86:	f7 01       	movw	r30, r14
    4d88:	80 81       	ld	r24, Z
    4d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8c:	09 f4       	brne	.+2      	; 0x4d90 <update_auto+0x68>
    4d8e:	10 82       	st	Z, r1
    4d90:	21 96       	adiw	r28, 0x01	; 1
    4d92:	0f 5f       	subi	r16, 0xFF	; 255
    4d94:	1f 4f       	sbci	r17, 0xFF	; 255
{
	return (val_hour*60 + val_min);
}
void update_auto()
{
	for(uint8_t i = 1; i <= 4; i++)
    4d96:	cb 31       	cpi	r28, 0x1B	; 27
    4d98:	d1 05       	cpc	r29, r1
    4d9a:	c1 f6       	brne	.-80     	; 0x4d4c <update_auto+0x24>
		while(!eeprom_is_ready());
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	df 90       	pop	r13
    4daa:	cf 90       	pop	r12
    4dac:	08 95       	ret

00004dae <update_count>:
void update_count()
{
    4dae:	2f 92       	push	r2
    4db0:	3f 92       	push	r3
    4db2:	4f 92       	push	r4
    4db4:	5f 92       	push	r5
    4db6:	6f 92       	push	r6
    4db8:	7f 92       	push	r7
    4dba:	8f 92       	push	r8
    4dbc:	9f 92       	push	r9
    4dbe:	af 92       	push	r10
    4dc0:	bf 92       	push	r11
    4dc2:	cf 92       	push	r12
    4dc4:	df 92       	push	r13
    4dc6:	ef 92       	push	r14
    4dc8:	ff 92       	push	r15
    4dca:	0f 93       	push	r16
    4dcc:	1f 93       	push	r17
    4dce:	df 93       	push	r29
    4dd0:	cf 93       	push	r28
    4dd2:	cd b7       	in	r28, 0x3d	; 61
    4dd4:	de b7       	in	r29, 0x3e	; 62
    4dd6:	6d 97       	sbiw	r28, 0x1d	; 29
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
				{
				countdown_min[i] = new_count[i];
				state_count[i] = new_state[i];						
				}						
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		for (uint8_t i = 1; i <= 6; i++)
    4de2:	8e 01       	movw	r16, r28
    4de4:	0e 5f       	subi	r16, 0xFE	; 254
    4de6:	1f 4f       	sbci	r17, 0xFF	; 255
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
{
    4de8:	ee 24       	eor	r14, r14
    4dea:	ff 24       	eor	r15, r15
	uint8_t new_state[5];
	
	//Lay data tu eeprom
	for(uint8_t i = 1; i <= 6; i++)
		{
		while(!eeprom_is_ready());		
    4dec:	e1 99       	sbic	0x1c, 1	; 28
    4dee:	fe cf       	rjmp	.-4      	; 0x4dec <update_count+0x3e>
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
    4df0:	08 94       	sec
    4df2:	e1 1c       	adc	r14, r1
    4df4:	f1 1c       	adc	r15, r1
	
	//Lay data tu eeprom
	for(uint8_t i = 1; i <= 6; i++)
		{
		while(!eeprom_is_ready());		
		time_eeprom[i] = eeprom_read_byte(i);	
    4df6:	c7 01       	movw	r24, r14
    4df8:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__eerd_byte_m32>
    4dfc:	d8 01       	movw	r26, r16
    4dfe:	8d 93       	st	X+, r24
    4e00:	8d 01       	movw	r16, r26
    4e02:	e9 ef       	ldi	r30, 0xF9	; 249
    4e04:	f0 e0       	ldi	r31, 0x00	; 0
    4e06:	31 97       	sbiw	r30, 0x01	; 1
    4e08:	f1 f7       	brne	.-4      	; 0x4e06 <update_count+0x58>
    4e0a:	00 c0       	rjmp	.+0      	; 0x4e0c <update_count+0x5e>
    4e0c:	00 00       	nop
	uint16_t temp_date, temp_min, temp_val, flag=0;
	uint16_t new_count[5];
	uint8_t new_state[5];
	
	//Lay data tu eeprom
	for(uint8_t i = 1; i <= 6; i++)
    4e0e:	f6 e0       	ldi	r31, 0x06	; 6
    4e10:	ef 16       	cp	r14, r31
    4e12:	f1 04       	cpc	r15, r1
    4e14:	59 f7       	brne	.-42     	; 0x4dec <update_count+0x3e>
    4e16:	0f 2e       	mov	r0, r31
    4e18:	fa e1       	ldi	r31, 0x1A	; 26
    4e1a:	8f 2e       	mov	r8, r31
    4e1c:	99 24       	eor	r9, r9
    4e1e:	f0 2d       	mov	r31, r0
    4e20:	8c 0e       	add	r8, r28
    4e22:	9d 1e       	adc	r9, r29
    4e24:	0f 2e       	mov	r0, r31
    4e26:	f1 e1       	ldi	r31, 0x11	; 17
    4e28:	6f 2e       	mov	r6, r31
    4e2a:	77 24       	eor	r7, r7
    4e2c:	f0 2d       	mov	r31, r0
    4e2e:	6c 0e       	add	r6, r28
    4e30:	7d 1e       	adc	r7, r29
    4e32:	63 01       	movw	r12, r6
    4e34:	54 01       	movw	r10, r8
    4e36:	0f 2e       	mov	r0, r31
    4e38:	f7 e0       	ldi	r31, 0x07	; 7
    4e3a:	ef 2e       	mov	r14, r31
    4e3c:	ff 24       	eor	r15, r15
    4e3e:	f0 2d       	mov	r31, r0
    4e40:	0f e0       	ldi	r16, 0x0F	; 15
    4e42:	10 e0       	ldi	r17, 0x00	; 0
		time_eeprom[i] = eeprom_read_byte(i);	
		_delay_ms(1);
		}
	for (uint8_t i = 1; i <= 4; i++)
		{
		while(!eeprom_is_ready());		new_count[i] = eeprom_read_word(5+i*2);		_delay_ms(1);
    4e44:	e1 99       	sbic	0x1c, 1	; 28
    4e46:	fe cf       	rjmp	.-4      	; 0x4e44 <update_count+0x96>
    4e48:	c7 01       	movw	r24, r14
    4e4a:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__eerd_word_m32>
    4e4e:	d6 01       	movw	r26, r12
    4e50:	8d 93       	st	X+, r24
    4e52:	9d 93       	st	X+, r25
    4e54:	6d 01       	movw	r12, r26
    4e56:	e9 ef       	ldi	r30, 0xF9	; 249
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	31 97       	sbiw	r30, 0x01	; 1
    4e5c:	f1 f7       	brne	.-4      	; 0x4e5a <update_count+0xac>
    4e5e:	00 c0       	rjmp	.+0      	; 0x4e60 <update_count+0xb2>
    4e60:	00 00       	nop
		while(!eeprom_is_ready());		new_state[i] = eeprom_read_byte(14+i);		_delay_ms(1);
    4e62:	e1 99       	sbic	0x1c, 1	; 28
    4e64:	fe cf       	rjmp	.-4      	; 0x4e62 <update_count+0xb4>
    4e66:	c8 01       	movw	r24, r16
    4e68:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__eerd_byte_m32>
    4e6c:	d5 01       	movw	r26, r10
    4e6e:	8d 93       	st	X+, r24
    4e70:	5d 01       	movw	r10, r26
    4e72:	e9 ef       	ldi	r30, 0xF9	; 249
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	31 97       	sbiw	r30, 0x01	; 1
    4e78:	f1 f7       	brne	.-4      	; 0x4e76 <update_count+0xc8>
    4e7a:	00 c0       	rjmp	.+0      	; 0x4e7c <update_count+0xce>
    4e7c:	00 00       	nop
    4e7e:	0f 5f       	subi	r16, 0xFF	; 255
    4e80:	1f 4f       	sbci	r17, 0xFF	; 255
    4e82:	62 e0       	ldi	r22, 0x02	; 2
    4e84:	70 e0       	ldi	r23, 0x00	; 0
    4e86:	e6 0e       	add	r14, r22
    4e88:	f7 1e       	adc	r15, r23
		{
		while(!eeprom_is_ready());		
		time_eeprom[i] = eeprom_read_byte(i);	
		_delay_ms(1);
		}
	for (uint8_t i = 1; i <= 4; i++)
    4e8a:	03 31       	cpi	r16, 0x13	; 19
    4e8c:	11 05       	cpc	r17, r1
    4e8e:	d1 f6       	brne	.-76     	; 0x4e44 <update_count+0x96>
		while(!eeprom_is_ready());		new_state[i] = eeprom_read_byte(14+i);		_delay_ms(1);
		}
	
	//Kiem tra xem truoc do co hen gio hay khong
	for(uint8_t i = 1;i <= 4; i++)
		if(new_state[i] == 0x0f || new_state[i] == 0xf0)
    4e90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4e92:	8f 30       	cpi	r24, 0x0F	; 15
    4e94:	79 f0       	breq	.+30     	; 0x4eb4 <update_count+0x106>
    4e96:	80 3f       	cpi	r24, 0xF0	; 240
    4e98:	69 f0       	breq	.+26     	; 0x4eb4 <update_count+0x106>
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	7b 96       	adiw	r30, 0x1b	; 27
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
    4e9e:	ce 01       	movw	r24, r28
    4ea0:	4e 96       	adiw	r24, 0x1e	; 30
		while(!eeprom_is_ready());		new_state[i] = eeprom_read_byte(14+i);		_delay_ms(1);
		}
	
	//Kiem tra xem truoc do co hen gio hay khong
	for(uint8_t i = 1;i <= 4; i++)
		if(new_state[i] == 0x0f || new_state[i] == 0xf0)
    4ea2:	21 91       	ld	r18, Z+
    4ea4:	2f 30       	cpi	r18, 0x0F	; 15
    4ea6:	31 f0       	breq	.+12     	; 0x4eb4 <update_count+0x106>
    4ea8:	20 3f       	cpi	r18, 0xF0	; 240
    4eaa:	21 f0       	breq	.+8      	; 0x4eb4 <update_count+0x106>
		while(!eeprom_is_ready());		new_count[i] = eeprom_read_word(5+i*2);		_delay_ms(1);
		while(!eeprom_is_ready());		new_state[i] = eeprom_read_byte(14+i);		_delay_ms(1);
		}
	
	//Kiem tra xem truoc do co hen gio hay khong
	for(uint8_t i = 1;i <= 4; i++)
    4eac:	e8 17       	cp	r30, r24
    4eae:	f9 07       	cpc	r31, r25
    4eb0:	c1 f7       	brne	.-16     	; 0x4ea2 <update_count+0xf4>
    4eb2:	02 c1       	rjmp	.+516    	; 0x50b8 <update_count+0x30a>
				break;
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
    4eb4:	80 91 4e 06 	lds	r24, 0x064E
    4eb8:	8f 73       	andi	r24, 0x3F	; 63
    4eba:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4ebe:	8a 87       	std	Y+10, r24	; 0x0a
    4ec0:	cc 24       	eor	r12, r12
    4ec2:	68 94       	set
    4ec4:	c1 f8       	bld	r12, 1
    4ec6:	ee 24       	eor	r14, r14
    4ec8:	e3 94       	inc	r14
		for(uint8_t i = 1;i <= 6;i++)
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);
    4eca:	0f 2e       	mov	r0, r31
    4ecc:	fc e4       	ldi	r31, 0x4C	; 76
    4ece:	af 2e       	mov	r10, r31
    4ed0:	f6 e0       	ldi	r31, 0x06	; 6
    4ed2:	bf 2e       	mov	r11, r31
    4ed4:	f0 2d       	mov	r31, r0
    4ed6:	44 24       	eor	r4, r4
    4ed8:	55 24       	eor	r5, r5
    4eda:	68 94       	set
    4edc:	43 f8       	bld	r4, 3
    4ede:	4c 0e       	add	r4, r28
    4ee0:	5d 1e       	adc	r5, r29
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <update_count+0x13a>
				break;
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
    4ee4:	e3 94       	inc	r14
    4ee6:	c3 94       	inc	r12
		for(uint8_t i = 1;i <= 6;i++)
			if(i != 2)
    4ee8:	7e 2d       	mov	r23, r14
    4eea:	72 30       	cpi	r23, 0x02	; 2
    4eec:	d9 f3       	breq	.-10     	; 0x4ee4 <update_count+0x136>
				copy_tData[i] = BCD2Dec(tData[i]);
    4eee:	0e 2d       	mov	r16, r14
    4ef0:	10 e0       	ldi	r17, 0x00	; 0
    4ef2:	f5 01       	movw	r30, r10
    4ef4:	e0 0f       	add	r30, r16
    4ef6:	f1 1f       	adc	r31, r17
    4ef8:	80 81       	ld	r24, Z
    4efa:	0e 94 98 20 	call	0x4130	; 0x4130 <BCD2Dec>
    4efe:	f2 01       	movw	r30, r4
    4f00:	e0 0f       	add	r30, r16
    4f02:	f1 1f       	adc	r31, r17
    4f04:	80 83       	st	Z, r24
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2] = BCD2Dec(tData[2] & 0x3F);
		for(uint8_t i = 1;i <= 6;i++)
    4f06:	8c 2d       	mov	r24, r12
    4f08:	87 30       	cpi	r24, 0x07	; 7
    4f0a:	60 f3       	brcs	.-40     	; 0x4ee4 <update_count+0x136>
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);

		//Tinh khoang lech thoi gian thuc so voi gia tri trong eeprom
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(time_eeprom[4],time_eeprom[5],time_eeprom[6]);
    4f0c:	6d 85       	ldd	r22, Y+13	; 0x0d
    4f0e:	4e 85       	ldd	r20, Y+14	; 0x0e
    4f10:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	70 e0       	ldi	r23, 0x00	; 0
    4f16:	50 e0       	ldi	r21, 0x00	; 0
    4f18:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <conver2date>
    4f1c:	7c 01       	movw	r14, r24
    4f1e:	6e 81       	ldd	r22, Y+6	; 0x06
    4f20:	4f 81       	ldd	r20, Y+7	; 0x07
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	70 e0       	ldi	r23, 0x00	; 0
    4f28:	50 e0       	ldi	r21, 0x00	; 0
    4f2a:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <conver2date>
    4f2e:	6c 01       	movw	r12, r24
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(time_eeprom[1],time_eeprom[2]);
    4f30:	89 85       	ldd	r24, Y+9	; 0x09
    4f32:	6a 85       	ldd	r22, Y+10	; 0x0a
    4f34:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <convert2minute>
    4f38:	8c 01       	movw	r16, r24
    4f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3c:	6b 81       	ldd	r22, Y+3	; 0x03
    4f3e:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <convert2minute>
    4f42:	08 1b       	sub	r16, r24
    4f44:	19 0b       	sbc	r17, r25
		for(uint8_t i = 1;i <= 6;i++)
			if(i != 2)
				copy_tData[i] = BCD2Dec(tData[i]);

		//Tinh khoang lech thoi gian thuc so voi gia tri trong eeprom
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(time_eeprom[4],time_eeprom[5],time_eeprom[6]);
    4f46:	ec 18       	sub	r14, r12
    4f48:	fd 08       	sbc	r15, r13
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(time_eeprom[1],time_eeprom[2]);
		temp_val = temp_date*1440 + temp_min;
    4f4a:	20 ea       	ldi	r18, 0xA0	; 160
    4f4c:	35 e0       	ldi	r19, 0x05	; 5
    4f4e:	e2 9e       	mul	r14, r18
    4f50:	c0 01       	movw	r24, r0
    4f52:	e3 9e       	mul	r14, r19
    4f54:	90 0d       	add	r25, r0
    4f56:	f2 9e       	mul	r15, r18
    4f58:	90 0d       	add	r25, r0
    4f5a:	11 24       	eor	r1, r1
    4f5c:	58 01       	movw	r10, r16
    4f5e:	a8 0e       	add	r10, r24
    4f60:	b9 1e       	adc	r11, r25

		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val > 0)
    4f62:	a1 14       	cp	r10, r1
    4f64:	b1 04       	cpc	r11, r1
    4f66:	51 f4       	brne	.+20     	; 0x4f7c <update_count+0x1ce>
    4f68:	24 e3       	ldi	r18, 0x34	; 52
    4f6a:	36 e0       	ldi	r19, 0x06	; 6
    4f6c:	8e e3       	ldi	r24, 0x3E	; 62
    4f6e:	96 e0       	ldi	r25, 0x06	; 6
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
    4f70:	ae 01       	movw	r20, r28
    4f72:	42 5e       	subi	r20, 0xE2	; 226
    4f74:	5f 4f       	sbci	r21, 0xFF	; 255
    4f76:	73 01       	movw	r14, r6
    4f78:	f4 01       	movw	r30, r8
    4f7a:	3d c0       	rjmp	.+122    	; 0x4ff6 <update_count+0x248>
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(time_eeprom[4],time_eeprom[5],time_eeprom[6]);
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(time_eeprom[1],time_eeprom[2]);
		temp_val = temp_date*1440 + temp_min;

		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val > 0)
    4f7c:	64 01       	movw	r12, r8
    4f7e:	83 01       	movw	r16, r6
    4f80:	ee 24       	eor	r14, r14
    4f82:	ff 24       	eor	r15, r15
						if(new_count[i] <= temp_val)
							if(new_state[i] == 0xf0)
								on_device(i);
							else	if(new_state[i] == 0x0f)
									off_device(i);
						new_count[i] = 0xffff;
    4f84:	22 24       	eor	r2, r2
    4f86:	2a 94       	dec	r2
    4f88:	32 2c       	mov	r3, r2
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
    4f8a:	08 94       	sec
    4f8c:	e1 1c       	adc	r14, r1
    4f8e:	f1 1c       	adc	r15, r1
    4f90:	8e 2d       	mov	r24, r14
    4f92:	9f 2d       	mov	r25, r15
    4f94:	28 01       	movw	r4, r16
		temp_val = temp_date*1440 + temp_min;

		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val > 0)
			for(uint8_t i = 1;i <= 4; i++)
				if(new_count[i] > temp_val &&(new_state[i] == 0x0f || new_state[i] == 0xf0))
    4f96:	d8 01       	movw	r26, r16
    4f98:	2d 91       	ld	r18, X+
    4f9a:	3c 91       	ld	r19, X
    4f9c:	11 97       	sbiw	r26, 0x01	; 1
    4f9e:	a2 16       	cp	r10, r18
    4fa0:	b3 06       	cpc	r11, r19
    4fa2:	68 f4       	brcc	.+26     	; 0x4fbe <update_count+0x210>
    4fa4:	f6 01       	movw	r30, r12
    4fa6:	80 81       	ld	r24, Z
    4fa8:	8f 30       	cpi	r24, 0x0F	; 15
    4faa:	11 f0       	breq	.+4      	; 0x4fb0 <update_count+0x202>
    4fac:	80 3f       	cpi	r24, 0xF0	; 240
    4fae:	91 f4       	brne	.+36     	; 0x4fd4 <update_count+0x226>
					new_count[i]-=temp_val;
    4fb0:	2a 19       	sub	r18, r10
    4fb2:	3b 09       	sbc	r19, r11
    4fb4:	d2 01       	movw	r26, r4
    4fb6:	11 96       	adiw	r26, 0x01	; 1
    4fb8:	3c 93       	st	X, r19
    4fba:	2e 93       	st	-X, r18
    4fbc:	12 c0       	rjmp	.+36     	; 0x4fe2 <update_count+0x234>
				else
					{
						if(new_count[i] <= temp_val)
							if(new_state[i] == 0xf0)
    4fbe:	f6 01       	movw	r30, r12
    4fc0:	20 81       	ld	r18, Z
    4fc2:	20 3f       	cpi	r18, 0xF0	; 240
    4fc4:	19 f4       	brne	.+6      	; 0x4fcc <update_count+0x21e>
								on_device(i);
    4fc6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <on_device>
    4fca:	04 c0       	rjmp	.+8      	; 0x4fd4 <update_count+0x226>
							else	if(new_state[i] == 0x0f)
    4fcc:	2f 30       	cpi	r18, 0x0F	; 15
    4fce:	11 f4       	brne	.+4      	; 0x4fd4 <update_count+0x226>
									off_device(i);
    4fd0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <off_device>
						new_count[i] = 0xffff;
    4fd4:	d2 01       	movw	r26, r4
    4fd6:	11 96       	adiw	r26, 0x01	; 1
    4fd8:	3c 92       	st	X, r3
    4fda:	2e 92       	st	-X, r2
						new_state[i] = 0xff;
    4fdc:	6f ef       	ldi	r22, 0xFF	; 255
    4fde:	f6 01       	movw	r30, r12
    4fe0:	60 83       	st	Z, r22
    4fe2:	0e 5f       	subi	r16, 0xFE	; 254
    4fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe6:	08 94       	sec
    4fe8:	c1 1c       	adc	r12, r1
    4fea:	d1 1c       	adc	r13, r1
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(time_eeprom[1],time_eeprom[2]);
		temp_val = temp_date*1440 + temp_min;

		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val > 0)
			for(uint8_t i = 1;i <= 4; i++)
    4fec:	74 e0       	ldi	r23, 0x04	; 4
    4fee:	e7 16       	cp	r14, r23
    4ff0:	f1 04       	cpc	r15, r1
    4ff2:	59 f6       	brne	.-106    	; 0x4f8a <update_count+0x1dc>
    4ff4:	b9 cf       	rjmp	.-142    	; 0x4f68 <update_count+0x1ba>
						new_count[i] = 0xffff;
						new_state[i] = 0xff;
					}
		//Cap nhat gia tri time
		for(uint8_t i=1;i<=4;i++)
			if(new_state[i] == 240 || new_state[i] == 15)
    4ff6:	01 91       	ld	r16, Z+
    4ff8:	00 3f       	cpi	r16, 0xF0	; 240
    4ffa:	11 f0       	breq	.+4      	; 0x5000 <update_count+0x252>
    4ffc:	0f 30       	cpi	r16, 0x0F	; 15
    4ffe:	41 f4       	brne	.+16     	; 0x5010 <update_count+0x262>
				{
				countdown_min[i] = new_count[i];
    5000:	d7 01       	movw	r26, r14
    5002:	6d 91       	ld	r22, X+
    5004:	7c 91       	ld	r23, X
    5006:	d9 01       	movw	r26, r18
    5008:	6d 93       	st	X+, r22
    500a:	7c 93       	st	X, r23
				state_count[i] = new_state[i];						
    500c:	dc 01       	movw	r26, r24
    500e:	0c 93       	st	X, r16
    5010:	62 e0       	ldi	r22, 0x02	; 2
    5012:	70 e0       	ldi	r23, 0x00	; 0
    5014:	e6 0e       	add	r14, r22
    5016:	f7 1e       	adc	r15, r23
    5018:	2e 5f       	subi	r18, 0xFE	; 254
    501a:	3f 4f       	sbci	r19, 0xFF	; 255
    501c:	01 96       	adiw	r24, 0x01	; 1
									off_device(i);
						new_count[i] = 0xffff;
						new_state[i] = 0xff;
					}
		//Cap nhat gia tri time
		for(uint8_t i=1;i<=4;i++)
    501e:	e4 17       	cp	r30, r20
    5020:	f5 07       	cpc	r31, r21
    5022:	49 f7       	brne	.-46     	; 0x4ff6 <update_count+0x248>
    5024:	0f 2e       	mov	r0, r31
    5026:	f9 e0       	ldi	r31, 0x09	; 9
    5028:	ef 2e       	mov	r14, r31
    502a:	ff 24       	eor	r15, r15
    502c:	f0 2d       	mov	r31, r0
    502e:	ec 0e       	add	r14, r28
    5030:	fd 1e       	adc	r15, r29
    5032:	00 e0       	ldi	r16, 0x00	; 0
    5034:	10 e0       	ldi	r17, 0x00	; 0
				state_count[i] = new_state[i];						
				}						
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		for (uint8_t i = 1; i <= 6; i++)
			{
			while(!eeprom_is_ready());
    5036:	e1 99       	sbic	0x1c, 1	; 28
    5038:	fe cf       	rjmp	.-4      	; 0x5036 <update_count+0x288>
		auto_state[i] = eeprom_read_byte(i + 22);
		_delay_ms(1);	
		if(auto_off[i] == 255)	auto_off[i] = 0;	
	}
}
void update_count()
    503a:	0f 5f       	subi	r16, 0xFF	; 255
    503c:	1f 4f       	sbci	r17, 0xFF	; 255
				}						
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		for (uint8_t i = 1; i <= 6; i++)
			{
			while(!eeprom_is_ready());
			eeprom_write_byte(i,copy_tData[i]);
    503e:	d7 01       	movw	r26, r14
    5040:	6d 91       	ld	r22, X+
    5042:	7d 01       	movw	r14, r26
    5044:	c8 01       	movw	r24, r16
    5046:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    504a:	e9 ef       	ldi	r30, 0xF9	; 249
    504c:	f0 e0       	ldi	r31, 0x00	; 0
    504e:	31 97       	sbiw	r30, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <update_count+0x2a0>
    5052:	00 c0       	rjmp	.+0      	; 0x5054 <update_count+0x2a6>
    5054:	00 00       	nop
				{
				countdown_min[i] = new_count[i];
				state_count[i] = new_state[i];						
				}						
		//Ghi thoi gian vao eeprom vi tri tu 1 - 6, moi lan 1 byte	
		for (uint8_t i = 1; i <= 6; i++)
    5056:	06 30       	cpi	r16, 0x06	; 6
    5058:	11 05       	cpc	r17, r1
    505a:	69 f7       	brne	.-38     	; 0x5036 <update_count+0x288>
    505c:	0f 2e       	mov	r0, r31
    505e:	f7 e0       	ldi	r31, 0x07	; 7
    5060:	ef 2e       	mov	r14, r31
    5062:	ff 24       	eor	r15, r15
    5064:	f0 2d       	mov	r31, r0
    5066:	0f e0       	ldi	r16, 0x0F	; 15
    5068:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(1);
			}		
		//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
		for (uint8_t i = 1; i <= 4; i++)
			{
			while(!eeprom_is_ready());
    506a:	e1 99       	sbic	0x1c, 1	; 28
    506c:	fe cf       	rjmp	.-4      	; 0x506a <update_count+0x2bc>
			eeprom_write_word(5+i*2,new_count[i]);
    506e:	d3 01       	movw	r26, r6
    5070:	6d 91       	ld	r22, X+
    5072:	7d 91       	ld	r23, X+
    5074:	3d 01       	movw	r6, r26
    5076:	c7 01       	movw	r24, r14
    5078:	0e 94 67 3a 	call	0x74ce	; 0x74ce <__eewr_word_m32>
    507c:	e9 ef       	ldi	r30, 0xF9	; 249
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	31 97       	sbiw	r30, 0x01	; 1
    5082:	f1 f7       	brne	.-4      	; 0x5080 <update_count+0x2d2>
    5084:	00 c0       	rjmp	.+0      	; 0x5086 <update_count+0x2d8>
    5086:	00 00       	nop
			_delay_ms(1);
			while(!eeprom_is_ready());
    5088:	e1 99       	sbic	0x1c, 1	; 28
    508a:	fe cf       	rjmp	.-4      	; 0x5088 <update_count+0x2da>
			eeprom_write_byte(14+i,new_state[i]);
    508c:	d4 01       	movw	r26, r8
    508e:	6d 91       	ld	r22, X+
    5090:	4d 01       	movw	r8, r26
    5092:	c8 01       	movw	r24, r16
    5094:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    5098:	e9 ef       	ldi	r30, 0xF9	; 249
    509a:	f0 e0       	ldi	r31, 0x00	; 0
    509c:	31 97       	sbiw	r30, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <update_count+0x2ee>
    50a0:	00 c0       	rjmp	.+0      	; 0x50a2 <update_count+0x2f4>
    50a2:	00 00       	nop
    50a4:	0f 5f       	subi	r16, 0xFF	; 255
    50a6:	1f 4f       	sbci	r17, 0xFF	; 255
    50a8:	62 e0       	ldi	r22, 0x02	; 2
    50aa:	70 e0       	ldi	r23, 0x00	; 0
    50ac:	e6 0e       	add	r14, r22
    50ae:	f7 1e       	adc	r15, r23
			while(!eeprom_is_ready());
			eeprom_write_byte(i,copy_tData[i]);
			_delay_ms(1);
			}		
		//Ghi count vao eeprom vi tri tu 7 - 14, moi lan 2 byte
		for (uint8_t i = 1; i <= 4; i++)
    50b0:	03 31       	cpi	r16, 0x13	; 19
    50b2:	11 05       	cpc	r17, r1
    50b4:	d1 f6       	brne	.-76     	; 0x506a <update_count+0x2bc>
    50b6:	04 c0       	rjmp	.+8      	; 0x50c0 <update_count+0x312>
			_delay_ms(1);
			}
		}
	else
		if(flag == 0)
			reset_eeprom(1,18);	// Khong co hen gio xoa vung eeprom muc dich hen gio
    50b8:	81 e0       	ldi	r24, 0x01	; 1
    50ba:	62 e1       	ldi	r22, 0x12	; 18
    50bc:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <reset_eeprom>
}
    50c0:	6d 96       	adiw	r28, 0x1d	; 29
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	de bf       	out	0x3e, r29	; 62
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	cd bf       	out	0x3d, r28	; 61
    50cc:	cf 91       	pop	r28
    50ce:	df 91       	pop	r29
    50d0:	1f 91       	pop	r17
    50d2:	0f 91       	pop	r16
    50d4:	ff 90       	pop	r15
    50d6:	ef 90       	pop	r14
    50d8:	df 90       	pop	r13
    50da:	cf 90       	pop	r12
    50dc:	bf 90       	pop	r11
    50de:	af 90       	pop	r10
    50e0:	9f 90       	pop	r9
    50e2:	8f 90       	pop	r8
    50e4:	7f 90       	pop	r7
    50e6:	6f 90       	pop	r6
    50e8:	5f 90       	pop	r5
    50ea:	4f 90       	pop	r4
    50ec:	3f 90       	pop	r3
    50ee:	2f 90       	pop	r2
    50f0:	08 95       	ret

000050f2 <Backup_System>:
void Backup_System()
{
	update_auto();
    50f2:	0e 94 94 26 	call	0x4d28	; 0x4d28 <update_auto>
	update_count();
    50f6:	0e 94 d7 26 	call	0x4dae	; 0x4dae <update_count>
}
    50fa:	08 95       	ret

000050fc <GetState>:
			default: break;
		}
}
uint8_t GetState(uint8_t val) // =240 ON =15 OFF
{
	switch (val)
    50fc:	82 30       	cpi	r24, 0x02	; 2
    50fe:	71 f0       	breq	.+28     	; 0x511c <GetState+0x20>
    5100:	83 30       	cpi	r24, 0x03	; 3
    5102:	18 f4       	brcc	.+6      	; 0x510a <GetState+0xe>
    5104:	81 30       	cpi	r24, 0x01	; 1
    5106:	b1 f4       	brne	.+44     	; 0x5134 <GetState+0x38>
    5108:	05 c0       	rjmp	.+10     	; 0x5114 <GetState+0x18>
    510a:	83 30       	cpi	r24, 0x03	; 3
    510c:	59 f0       	breq	.+22     	; 0x5124 <GetState+0x28>
    510e:	84 30       	cpi	r24, 0x04	; 4
    5110:	89 f4       	brne	.+34     	; 0x5134 <GetState+0x38>
    5112:	0c c0       	rjmp	.+24     	; 0x512c <GetState+0x30>
	{
			case 1: 	if(bit_is_clear(PORTC,PINC7))	return 240;	else	return 15;		break;
    5114:	af 9b       	sbis	0x15, 7	; 21
    5116:	0f c0       	rjmp	.+30     	; 0x5136 <GetState+0x3a>
    5118:	8f e0       	ldi	r24, 0x0F	; 15
    511a:	08 95       	ret
			case 2: 	if(bit_is_clear(PORTC,PINC6))	return 240;	else	return 15;		break;
    511c:	ae 99       	sbic	0x15, 6	; 21
    511e:	0d c0       	rjmp	.+26     	; 0x513a <GetState+0x3e>
    5120:	80 ef       	ldi	r24, 0xF0	; 240
    5122:	08 95       	ret
			case 3: 	if(bit_is_clear(PORTC,PINC5))	return 240;	else	return 15;		break;
    5124:	ad 99       	sbic	0x15, 5	; 21
    5126:	0b c0       	rjmp	.+22     	; 0x513e <GetState+0x42>
    5128:	80 ef       	ldi	r24, 0xF0	; 240
    512a:	08 95       	ret
			case 4: 	if(bit_is_clear(PORTC,PINC4))	return 240;	else	return 15;		break;
    512c:	ac 99       	sbic	0x15, 4	; 21
    512e:	09 c0       	rjmp	.+18     	; 0x5142 <GetState+0x46>
    5130:	80 ef       	ldi	r24, 0xF0	; 240
    5132:	08 95       	ret
    5134:	08 95       	ret
}
uint8_t GetState(uint8_t val) // =240 ON =15 OFF
{
	switch (val)
	{
			case 1: 	if(bit_is_clear(PORTC,PINC7))	return 240;	else	return 15;		break;
    5136:	80 ef       	ldi	r24, 0xF0	; 240
    5138:	08 95       	ret
			case 2: 	if(bit_is_clear(PORTC,PINC6))	return 240;	else	return 15;		break;
    513a:	8f e0       	ldi	r24, 0x0F	; 15
    513c:	08 95       	ret
			case 3: 	if(bit_is_clear(PORTC,PINC5))	return 240;	else	return 15;		break;
    513e:	8f e0       	ldi	r24, 0x0F	; 15
    5140:	08 95       	ret
			case 4: 	if(bit_is_clear(PORTC,PINC4))	return 240;	else	return 15;		break;
    5142:	8f e0       	ldi	r24, 0x0F	; 15
			default: break;
	}
}
    5144:	08 95       	ret

00005146 <check_auto>:
{
	high[device] = 0;
	low[device] = 0;
}
void check_auto()
{
    5146:	4f 92       	push	r4
    5148:	5f 92       	push	r5
    514a:	6f 92       	push	r6
    514c:	7f 92       	push	r7
    514e:	8f 92       	push	r8
    5150:	9f 92       	push	r9
    5152:	af 92       	push	r10
    5154:	bf 92       	push	r11
    5156:	cf 92       	push	r12
    5158:	df 92       	push	r13
    515a:	ef 92       	push	r14
    515c:	ff 92       	push	r15
    515e:	0f 93       	push	r16
    5160:	1f 93       	push	r17
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	0f 2e       	mov	r0, r31
    5168:	f9 e5       	ldi	r31, 0x59	; 89
    516a:	8f 2e       	mov	r8, r31
    516c:	f6 e0       	ldi	r31, 0x06	; 6
    516e:	9f 2e       	mov	r9, r31
    5170:	f0 2d       	mov	r31, r0
    5172:	04 e3       	ldi	r16, 0x34	; 52
    5174:	16 e0       	ldi	r17, 0x06	; 6
    5176:	0f 2e       	mov	r0, r31
    5178:	f3 e4       	ldi	r31, 0x43	; 67
    517a:	ef 2e       	mov	r14, r31
    517c:	f6 e0       	ldi	r31, 0x06	; 6
    517e:	ff 2e       	mov	r15, r31
    5180:	f0 2d       	mov	r31, r0
    5182:	0f 2e       	mov	r0, r31
    5184:	f8 e4       	ldi	r31, 0x48	; 72
    5186:	cf 2e       	mov	r12, r31
    5188:	f6 e0       	ldi	r31, 0x06	; 6
    518a:	df 2e       	mov	r13, r31
    518c:	f0 2d       	mov	r31, r0
    518e:	0f 2e       	mov	r0, r31
    5190:	fe e5       	ldi	r31, 0x5E	; 94
    5192:	af 2e       	mov	r10, r31
    5194:	f6 e0       	ldi	r31, 0x06	; 6
    5196:	bf 2e       	mov	r11, r31
    5198:	f0 2d       	mov	r31, r0
    519a:	c0 e0       	ldi	r28, 0x00	; 0
    519c:	d0 e0       	ldi	r29, 0x00	; 0
    519e:	9e 01       	movw	r18, r28
    51a0:	2f 5f       	subi	r18, 0xFF	; 255
    51a2:	82 2f       	mov	r24, r18
void begin_auto(uint8_t device)
{
	high[device] = 0;
	low[device] = 0;
}
void check_auto()
    51a4:	21 96       	adiw	r28, 0x01	; 1
    51a6:	fe 01       	movw	r30, r28
    51a8:	7c 2e       	mov	r7, r28
    51aa:	6f 2e       	mov	r6, r31
	//EX: 100OFF: ON<100 OFF>100
	//unsigned char GetState(uint8_t val) // =240 ON =15 OFF
	//Ham Auto ON
	for(uint8_t i = 1; i <= 4; i++)
	{
	if(auto_off[i] != 0 && countdown_min[i] == 0 )
    51ac:	f4 01       	movw	r30, r8
    51ae:	91 91       	ld	r25, Z+
    51b0:	4f 01       	movw	r8, r30
    51b2:	99 23       	and	r25, r25
    51b4:	09 f4       	brne	.+2      	; 0x51b8 <check_auto+0x72>
    51b6:	5f c0       	rjmp	.+190    	; 0x5276 <check_auto+0x130>
    51b8:	f8 01       	movw	r30, r16
    51ba:	20 81       	ld	r18, Z
    51bc:	31 81       	ldd	r19, Z+1	; 0x01
    51be:	21 15       	cp	r18, r1
    51c0:	31 05       	cpc	r19, r1
    51c2:	09 f0       	breq	.+2      	; 0x51c6 <check_auto+0x80>
    51c4:	58 c0       	rjmp	.+176    	; 0x5276 <check_auto+0x130>
		{	
		if((ds18b20 > auto_off[i]) || (ds18b20 == auto_off[i] && digit > 0))
    51c6:	40 91 31 06 	lds	r20, 0x0631
    51ca:	94 17       	cp	r25, r20
    51cc:	30 f0       	brcs	.+12     	; 0x51da <check_auto+0x94>
    51ce:	94 17       	cp	r25, r20
    51d0:	31 f5       	brne	.+76     	; 0x521e <check_auto+0xd8>
    51d2:	20 91 2f 06 	lds	r18, 0x062F
    51d6:	22 23       	and	r18, r18
    51d8:	21 f1       	breq	.+72     	; 0x5222 <check_auto+0xdc>
void begin_auto(uint8_t device)
{
	high[device] = 0;
	low[device] = 0;
}
void check_auto()
    51da:	27 01       	movw	r4, r14
	{
	if(auto_off[i] != 0 && countdown_min[i] == 0 )
		{	
		if((ds18b20 > auto_off[i]) || (ds18b20 == auto_off[i] && digit > 0))
			{
			high[i]++;
    51dc:	f7 01       	movw	r30, r14
    51de:	90 81       	ld	r25, Z
    51e0:	9f 5f       	subi	r25, 0xFF	; 255
    51e2:	90 83       	st	Z, r25
			low[i] = 0;
    51e4:	f6 01       	movw	r30, r12
    51e6:	10 82       	st	Z, r1
			if(GetState(i) != auto_state[i] && high[i] >= 10) 
    51e8:	0e 94 7e 28 	call	0x50fc	; 0x50fc <GetState>
    51ec:	f5 01       	movw	r30, r10
    51ee:	90 81       	ld	r25, Z
    51f0:	89 17       	cp	r24, r25
    51f2:	09 f4       	brne	.+2      	; 0x51f6 <check_auto+0xb0>
    51f4:	40 c0       	rjmp	.+128    	; 0x5276 <check_auto+0x130>
    51f6:	f7 01       	movw	r30, r14
    51f8:	80 81       	ld	r24, Z
    51fa:	8a 30       	cpi	r24, 0x0A	; 10
    51fc:	e0 f1       	brcs	.+120    	; 0x5276 <check_auto+0x130>
				{
					if (auto_state[i] == 15)	off_device(i);
    51fe:	9f 30       	cpi	r25, 0x0F	; 15
    5200:	29 f4       	brne	.+10     	; 0x520c <check_auto+0xc6>
    5202:	87 2d       	mov	r24, r7
    5204:	96 2d       	mov	r25, r6
    5206:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <off_device>
    520a:	06 c0       	rjmp	.+12     	; 0x5218 <check_auto+0xd2>
					else	if (auto_state[i] == 240) on_device(i);
    520c:	90 3f       	cpi	r25, 0xF0	; 240
    520e:	21 f4       	brne	.+8      	; 0x5218 <check_auto+0xd2>
    5210:	87 2d       	mov	r24, r7
    5212:	96 2d       	mov	r25, r6
    5214:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <on_device>
					high[i] = 0;
    5218:	f2 01       	movw	r30, r4
    521a:	10 82       	st	Z, r1
    521c:	2c c0       	rjmp	.+88     	; 0x5276 <check_auto+0x130>
				}				
			}
		else
		if( ds18b20 < auto_off[i] ||(ds18b20 + digit == auto_off[i]) )
    521e:	49 17       	cp	r20, r25
    5220:	50 f0       	brcs	.+20     	; 0x5236 <check_auto+0xf0>
    5222:	20 91 2f 06 	lds	r18, 0x062F
    5226:	50 e0       	ldi	r21, 0x00	; 0
    5228:	42 0f       	add	r20, r18
    522a:	51 1d       	adc	r21, r1
    522c:	29 2f       	mov	r18, r25
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	42 17       	cp	r20, r18
    5232:	53 07       	cpc	r21, r19
    5234:	01 f5       	brne	.+64     	; 0x5276 <check_auto+0x130>
			{
			high[i] = 0;
    5236:	f7 01       	movw	r30, r14
    5238:	10 82       	st	Z, r1
void begin_auto(uint8_t device)
{
	high[device] = 0;
	low[device] = 0;
}
void check_auto()
    523a:	26 01       	movw	r4, r12
			}
		else
		if( ds18b20 < auto_off[i] ||(ds18b20 + digit == auto_off[i]) )
			{
			high[i] = 0;
			low[i]++;				
    523c:	f6 01       	movw	r30, r12
    523e:	90 81       	ld	r25, Z
    5240:	9f 5f       	subi	r25, 0xFF	; 255
    5242:	90 83       	st	Z, r25
			if(GetState(i) == auto_state[i] && low[i] >= 10)
    5244:	0e 94 7e 28 	call	0x50fc	; 0x50fc <GetState>
    5248:	f5 01       	movw	r30, r10
    524a:	90 81       	ld	r25, Z
    524c:	89 17       	cp	r24, r25
    524e:	99 f4       	brne	.+38     	; 0x5276 <check_auto+0x130>
    5250:	f6 01       	movw	r30, r12
    5252:	90 81       	ld	r25, Z
    5254:	9a 30       	cpi	r25, 0x0A	; 10
    5256:	78 f0       	brcs	.+30     	; 0x5276 <check_auto+0x130>
				{
					if (auto_state[i] == 15)	on_device(i);
    5258:	8f 30       	cpi	r24, 0x0F	; 15
    525a:	29 f4       	brne	.+10     	; 0x5266 <check_auto+0x120>
    525c:	87 2d       	mov	r24, r7
    525e:	96 2d       	mov	r25, r6
    5260:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <on_device>
    5264:	06 c0       	rjmp	.+12     	; 0x5272 <check_auto+0x12c>
					else	if (auto_state[i] == 240) off_device(i);
    5266:	80 3f       	cpi	r24, 0xF0	; 240
    5268:	21 f4       	brne	.+8      	; 0x5272 <check_auto+0x12c>
    526a:	87 2d       	mov	r24, r7
    526c:	96 2d       	mov	r25, r6
    526e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <off_device>
					low[i] = 0;
    5272:	f2 01       	movw	r30, r4
    5274:	10 82       	st	Z, r1
    5276:	0e 5f       	subi	r16, 0xFE	; 254
    5278:	1f 4f       	sbci	r17, 0xFF	; 255
    527a:	08 94       	sec
    527c:	e1 1c       	adc	r14, r1
    527e:	f1 1c       	adc	r15, r1
    5280:	08 94       	sec
    5282:	c1 1c       	adc	r12, r1
    5284:	d1 1c       	adc	r13, r1
    5286:	08 94       	sec
    5288:	a1 1c       	adc	r10, r1
    528a:	b1 1c       	adc	r11, r1
{
	//EX: 100ON: ON>100 OFF<100
	//EX: 100OFF: ON<100 OFF>100
	//unsigned char GetState(uint8_t val) // =240 ON =15 OFF
	//Ham Auto ON
	for(uint8_t i = 1; i <= 4; i++)
    528c:	c4 30       	cpi	r28, 0x04	; 4
    528e:	d1 05       	cpc	r29, r1
    5290:	09 f0       	breq	.+2      	; 0x5294 <check_auto+0x14e>
    5292:	85 cf       	rjmp	.-246    	; 0x519e <check_auto+0x58>
					low[i] = 0;
				}				
			}
		}			
	}
}
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	ff 90       	pop	r15
    529e:	ef 90       	pop	r14
    52a0:	df 90       	pop	r13
    52a2:	cf 90       	pop	r12
    52a4:	bf 90       	pop	r11
    52a6:	af 90       	pop	r10
    52a8:	9f 90       	pop	r9
    52aa:	8f 90       	pop	r8
    52ac:	7f 90       	pop	r7
    52ae:	6f 90       	pop	r6
    52b0:	5f 90       	pop	r5
    52b2:	4f 90       	pop	r4
    52b4:	08 95       	ret

000052b6 <clrline2lcd>:
			case 4: 	if(bit_is_clear(PORTC,PINC4))	return 240;	else	return 15;		break;
			default: break;
	}
}
void clrline2lcd(void)
{
    52b6:	1f 93       	push	r17
	move_LCD(2,1);	for(uint8_t i = 1; i <= 16 ;i++)	putChar_LCD(' ');
    52b8:	82 e0       	ldi	r24, 0x02	; 2
    52ba:	61 e0       	ldi	r22, 0x01	; 1
    52bc:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    52c0:	10 e1       	ldi	r17, 0x10	; 16
    52c2:	80 e2       	ldi	r24, 0x20	; 32
    52c4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
    52c8:	11 50       	subi	r17, 0x01	; 1
    52ca:	d9 f7       	brne	.-10     	; 0x52c2 <clrline2lcd+0xc>
}
    52cc:	1f 91       	pop	r17
    52ce:	08 95       	ret

000052d0 <test_out_state>:
unsigned char test_out_state(unsigned char device)
{
	if(state_count[device] == 240)
    52d0:	2d e3       	ldi	r18, 0x3D	; 61
    52d2:	36 e0       	ldi	r19, 0x06	; 6
    52d4:	28 0f       	add	r18, r24
    52d6:	31 1d       	adc	r19, r1
    52d8:	f9 01       	movw	r30, r18
    52da:	90 81       	ld	r25, Z
    52dc:	90 3f       	cpi	r25, 0xF0	; 240
    52de:	29 f0       	breq	.+10     	; 0x52ea <test_out_state+0x1a>
		return 2; // on				
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	9f 30       	cpi	r25, 0x0F	; 15
    52e4:	19 f0       	breq	.+6      	; 0x52ec <test_out_state+0x1c>
    52e6:	80 e0       	ldi	r24, 0x00	; 0
    52e8:	08 95       	ret
    52ea:	82 e0       	ldi	r24, 0x02	; 2
	else	
		if(state_count[device] == 15)
			return 1; //off	
	return 0;		
}
    52ec:	08 95       	ret

000052ee <network_out>:
	else if(val /100 != 0) {putChar_LCD(val /100+48);	putChar_LCD((val %100) /10+48);}
	putChar_LCD((val %100) %10+48);
}
//In ip
void network_out(unsigned long ipaddr, uint8_t kind)
{
    52ee:	0f 93       	push	r16
    52f0:	1f 93       	push	r17
    52f2:	df 93       	push	r29
    52f4:	cf 93       	push	r28
    52f6:	00 d0       	rcall	.+0      	; 0x52f8 <network_out+0xa>
    52f8:	00 d0       	rcall	.+0      	; 0x52fa <network_out+0xc>
    52fa:	cd b7       	in	r28, 0x3d	; 61
    52fc:	de b7       	in	r29, 0x3e	; 62
    52fe:	69 83       	std	Y+1, r22	; 0x01
    5300:	7a 83       	std	Y+2, r23	; 0x02
    5302:	8b 83       	std	Y+3, r24	; 0x03
    5304:	9c 83       	std	Y+4, r25	; 0x04
	switch(kind)
    5306:	42 30       	cpi	r20, 0x02	; 2
    5308:	49 f0       	breq	.+18     	; 0x531c <network_out+0x2e>
    530a:	43 30       	cpi	r20, 0x03	; 3
    530c:	61 f0       	breq	.+24     	; 0x5326 <network_out+0x38>
    530e:	41 30       	cpi	r20, 0x01	; 1
    5310:	71 f4       	brne	.+28     	; 0x532e <network_out+0x40>
	{
		case 1: print_LCD("IP:");	break;
    5312:	81 e9       	ldi	r24, 0x91	; 145
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    531a:	09 c0       	rjmp	.+18     	; 0x532e <network_out+0x40>
		case 2:	print_LCD("SN:");	break;
    531c:	85 e9       	ldi	r24, 0x95	; 149
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    5324:	04 c0       	rjmp	.+8      	; 0x532e <network_out+0x40>
		case 3:	print_LCD("GW:");	break;
    5326:	89 e9       	ldi	r24, 0x99	; 153
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
		default: break;
	}
	if(((unsigned char*)&ipaddr)[3] == 0)	{print_LCD("0.0.0.0");}
    532e:	8e 01       	movw	r16, r28
    5330:	0f 5f       	subi	r16, 0xFF	; 255
    5332:	1f 4f       	sbci	r17, 0xFF	; 255
    5334:	f8 01       	movw	r30, r16
    5336:	83 81       	ldd	r24, Z+3	; 0x03
    5338:	88 23       	and	r24, r24
    533a:	29 f4       	brne	.+10     	; 0x5346 <network_out+0x58>
    533c:	8d e9       	ldi	r24, 0x9D	; 157
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <print_LCD>
    5344:	16 c0       	rjmp	.+44     	; 0x5372 <network_out+0x84>
	else
	{
		lcd_show_number(((unsigned char*)&ipaddr)[3]);	putChar_LCD('.');
    5346:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <lcd_show_number>
    534a:	8e e2       	ldi	r24, 0x2E	; 46
    534c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
		lcd_show_number(((unsigned char*)&ipaddr)[2]);	putChar_LCD('.');
    5350:	f8 01       	movw	r30, r16
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <lcd_show_number>
    5358:	8e e2       	ldi	r24, 0x2E	; 46
    535a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
		lcd_show_number(((unsigned char*)&ipaddr)[1]);	putChar_LCD('.');
    535e:	f8 01       	movw	r30, r16
    5360:	81 81       	ldd	r24, Z+1	; 0x01
    5362:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <lcd_show_number>
    5366:	8e e2       	ldi	r24, 0x2E	; 46
    5368:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <putChar_LCD>
		lcd_show_number(((unsigned char*)&ipaddr)[0]);
    536c:	89 81       	ldd	r24, Y+1	; 0x01
    536e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <lcd_show_number>
	}	
}
    5372:	0f 90       	pop	r0
    5374:	0f 90       	pop	r0
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	cf 91       	pop	r28
    537c:	df 91       	pop	r29
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	08 95       	ret

00005384 <showip>:
//Xuat ip ra LCD
void showip(void)
{
	clrline2lcd();
    5384:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <clrline2lcd>
	move_LCD(2,1);	network_out(IpMyConfig.ip,1);
    5388:	82 e0       	ldi	r24, 0x02	; 2
    538a:	61 e0       	ldi	r22, 0x01	; 1
    538c:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <move_LCD>
    5390:	60 91 1d 06 	lds	r22, 0x061D
    5394:	70 91 1e 06 	lds	r23, 0x061E
    5398:	80 91 1f 06 	lds	r24, 0x061F
    539c:	90 91 20 06 	lds	r25, 0x0620
    53a0:	41 e0       	ldi	r20, 0x01	; 1
    53a2:	0e 94 77 29 	call	0x52ee	; 0x52ee <network_out>
	//move_LCD(2,1);	network_out(IpMyConfig.netmask,2);
}
    53a6:	08 95       	ret

000053a8 <netInit>:
//----------------------------------------------------------------------------
void netInit(unsigned long ipaddress, unsigned long netmask, unsigned long gatewayip)
{
    53a8:	6f 92       	push	r6
    53aa:	7f 92       	push	r7
    53ac:	8f 92       	push	r8
    53ae:	9f 92       	push	r9
    53b0:	af 92       	push	r10
    53b2:	bf 92       	push	r11
    53b4:	cf 92       	push	r12
    53b6:	df 92       	push	r13
    53b8:	ef 92       	push	r14
    53ba:	ff 92       	push	r15
    53bc:	0f 93       	push	r16
    53be:	1f 93       	push	r17
    53c0:	5b 01       	movw	r10, r22
    53c2:	6c 01       	movw	r12, r24
    53c4:	39 01       	movw	r6, r18
    53c6:	4a 01       	movw	r8, r20
	ethInit();
    53c8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <ethInit>
	arpInit();
    53cc:	0e 94 a0 07 	call	0xf40	; 0xf40 <arpInit>
	ipSetConfig(ipaddress, netmask, gatewayip);
    53d0:	c6 01       	movw	r24, r12
    53d2:	b5 01       	movw	r22, r10
    53d4:	a4 01       	movw	r20, r8
    53d6:	93 01       	movw	r18, r6
    53d8:	0e 94 08 1c 	call	0x3810	; 0x3810 <ipSetConfig>
}
    53dc:	1f 91       	pop	r17
    53de:	0f 91       	pop	r16
    53e0:	ff 90       	pop	r15
    53e2:	ef 90       	pop	r14
    53e4:	df 90       	pop	r13
    53e6:	cf 90       	pop	r12
    53e8:	bf 90       	pop	r11
    53ea:	af 90       	pop	r10
    53ec:	9f 90       	pop	r9
    53ee:	8f 90       	pop	r8
    53f0:	7f 90       	pop	r7
    53f2:	6f 90       	pop	r6
    53f4:	08 95       	ret

000053f6 <SystemInit>:
void	SystemInit()
{
	//LCD
	init_LCD();
    53f6:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <init_LCD>
	clr_LCD();
    53fa:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <clr_LCD>
	
	//Set PORT
	DDRC = 0xff;	//out
    53fe:	8f ef       	ldi	r24, 0xFF	; 255
    5400:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
    5402:	85 bb       	out	0x15, r24	; 21
	DDRB = 0x00;	//in	
    5404:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xff;
    5406:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00;
    5408:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
    540a:	82 bb       	out	0x12, r24	; 18
	//Timer
	timer1Init();
    540c:	0e 94 86 33 	call	0x670c	; 0x670c <timer1Init>
	
	//UART
//	uartInit(UART_BAUDRATE);
	
	//RTC
	set_clock();
    5410:	0e 94 70 22 	call	0x44e0	; 0x44e0 <set_clock>
	TWI_DS1307_wadr(0x00); //set dia chi ve 0
    5414:	80 e0       	ldi	r24, 0x00	; 0
    5416:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <TWI_DS1307_wadr>
    541a:	89 ef       	ldi	r24, 0xF9	; 249
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	01 97       	sbiw	r24, 0x01	; 1
    5420:	f1 f7       	brne	.-4      	; 0x541e <SystemInit+0x28>
    5422:	00 c0       	rjmp	.+0      	; 0x5424 <SystemInit+0x2e>
    5424:	00 00       	nop
	_delay_ms(1);			//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7); //doc ca khoi thoi gian (7 bytes)	
    5426:	8c e4       	ldi	r24, 0x4C	; 76
    5428:	96 e0       	ldi	r25, 0x06	; 6
    542a:	67 e0       	ldi	r22, 0x07	; 7
    542c:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <TWI_DS1307_rblock>
	Display(); // hien thi ket qua len LCD	
    5430:	0e 94 aa 20 	call	0x4154	; 0x4154 <Display>
}
    5434:	08 95       	ret

00005436 <EthernetInit>:
void EthernetInit()
{	
    5436:	ef 92       	push	r14
    5438:	ff 92       	push	r15
    543a:	0f 93       	push	r16
    543c:	1f 93       	push	r17
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
	IpMyConfig.ethaddr.addr[0] = ETHADDR0;
    5442:	80 e3       	ldi	r24, 0x30	; 48
    5444:	80 93 29 06 	sts	0x0629, r24
	IpMyConfig.ethaddr.addr[1] = ETHADDR1;
    5448:	8f e4       	ldi	r24, 0x4F	; 79
    544a:	80 93 2a 06 	sts	0x062A, r24
	IpMyConfig.ethaddr.addr[2] = ETHADDR2;
    544e:	86 e4       	ldi	r24, 0x46	; 70
    5450:	80 93 2b 06 	sts	0x062B, r24
	IpMyConfig.ethaddr.addr[3] = ETHADDR3;
    5454:	89 e4       	ldi	r24, 0x49	; 73
    5456:	80 93 2c 06 	sts	0x062C, r24
	IpMyConfig.ethaddr.addr[4] = ETHADDR4;
    545a:	83 e4       	ldi	r24, 0x43	; 67
    545c:	80 93 2d 06 	sts	0x062D, r24
	IpMyConfig.ethaddr.addr[5] = ETHADDR5;
    5460:	85 e4       	ldi	r24, 0x45	; 69
    5462:	80 93 2e 06 	sts	0x062E, r24
	IpMyConfig.ip = IPADDRESS;
    5466:	cd e1       	ldi	r28, 0x1D	; 29
    5468:	d6 e0       	ldi	r29, 0x06	; 6
    546a:	18 82       	st	Y, r1
    546c:	19 82       	std	Y+1, r1	; 0x01
    546e:	1a 82       	std	Y+2, r1	; 0x02
    5470:	1b 82       	std	Y+3, r1	; 0x03
	IpMyConfig.netmask = NETMASK;
    5472:	1c 82       	std	Y+4, r1	; 0x04
    5474:	1d 82       	std	Y+5, r1	; 0x05
    5476:	1e 82       	std	Y+6, r1	; 0x06
    5478:	1f 82       	std	Y+7, r1	; 0x07
	IpMyConfig.gateway = GATEWAY;
    547a:	18 86       	std	Y+8, r1	; 0x08
    547c:	19 86       	std	Y+9, r1	; 0x09
    547e:	1a 86       	std	Y+10, r1	; 0x0a
    5480:	1b 86       	std	Y+11, r1	; 0x0b
	netInit(IpMyConfig.ip, IpMyConfig.netmask, IpMyConfig.gateway);
    5482:	60 e0       	ldi	r22, 0x00	; 0
    5484:	70 e0       	ldi	r23, 0x00	; 0
    5486:	cb 01       	movw	r24, r22
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	a9 01       	movw	r20, r18
    548e:	ee 24       	eor	r14, r14
    5490:	ff 24       	eor	r15, r15
    5492:	87 01       	movw	r16, r14
    5494:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <netInit>
	if(IpMyConfig.ip == 0x00000000){
    5498:	88 81       	ld	r24, Y
    549a:	99 81       	ldd	r25, Y+1	; 0x01
    549c:	aa 81       	ldd	r26, Y+2	; 0x02
    549e:	bb 81       	ldd	r27, Y+3	; 0x03
    54a0:	00 97       	sbiw	r24, 0x00	; 0
    54a2:	a1 05       	cpc	r26, r1
    54a4:	b1 05       	cpc	r27, r1
    54a6:	11 f4       	brne	.+4      	; 0x54ac <EthernetInit+0x76>
		dhcpInit();
    54a8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <dhcpInit>
	}
	TCPCreateSession(80,httpDataIn);
    54ac:	80 e5       	ldi	r24, 0x50	; 80
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	6e ec       	ldi	r22, 0xCE	; 206
    54b2:	78 e1       	ldi	r23, 0x18	; 24
    54b4:	0e 94 c0 2a 	call	0x5580	; 0x5580 <TCPCreateSession>
	httpInit();
    54b8:	0e 94 c8 11 	call	0x2390	; 0x2390 <httpInit>
}
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	1f 91       	pop	r17
    54c2:	0f 91       	pop	r16
    54c4:	ff 90       	pop	r15
    54c6:	ef 90       	pop	r14
    54c8:	08 95       	ret

000054ca <main>:
//--------------------------------------------------------------------------------------
int	main()
{
    54ca:	cf 93       	push	r28
    54cc:	df 93       	push	r29
	
	SystemInit();
    54ce:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <SystemInit>
	Backup_System();
    54d2:	0e 94 79 28 	call	0x50f2	; 0x50f2 <Backup_System>
	EthernetInit();
    54d6:	0e 94 1b 2a 	call	0x5436	; 0x5436 <EthernetInit>
	while(1)
	{
		if(IpMyConfig.ip == 0x00000000)	dhcpInit();
    54da:	cd e1       	ldi	r28, 0x1D	; 29
    54dc:	d6 e0       	ldi	r29, 0x06	; 6
    54de:	88 81       	ld	r24, Y
    54e0:	99 81       	ldd	r25, Y+1	; 0x01
    54e2:	aa 81       	ldd	r26, Y+2	; 0x02
    54e4:	bb 81       	ldd	r27, Y+3	; 0x03
    54e6:	00 97       	sbiw	r24, 0x00	; 0
    54e8:	a1 05       	cpc	r26, r1
    54ea:	b1 05       	cpc	r27, r1
    54ec:	11 f4       	brne	.+4      	; 0x54f2 <main+0x28>
    54ee:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <dhcpInit>
		ethService();
    54f2:	0e 94 04 11 	call	0x2208	; 0x2208 <ethService>
		dhcpService();
    54f6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dhcpService>
	}
    54fa:	f1 cf       	rjmp	.-30     	; 0x54de <main+0x14>

000054fc <TCPInitSequenceNumber>:
//Ham khoi tao so tuan tu cho mot phien TCP
// Hien tai su dung gia tri 1234 (may tinh thuong dung gia tri thoi gian hien tai)
unsigned long TCPInitSequenceNumber()
{
	return(1234);
}
    54fc:	62 ed       	ldi	r22, 0xD2	; 210
    54fe:	74 e0       	ldi	r23, 0x04	; 4
    5500:	80 e0       	ldi	r24, 0x00	; 0
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	08 95       	ret

00005506 <TCPCloseSession>:


//Ham dong mot phien TCP
void TCPCloseSession(unsigned char socketnum)
{
	tcpSessionTable[socketnum].sesState = TCP_STATE_CLOSED;
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	2f e1       	ldi	r18, 0x1F	; 31
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	82 9f       	mul	r24, r18
    550e:	f0 01       	movw	r30, r0
    5510:	83 9f       	mul	r24, r19
    5512:	f0 0d       	add	r31, r0
    5514:	92 9f       	mul	r25, r18
    5516:	f0 0d       	add	r31, r0
    5518:	11 24       	eor	r1, r1
    551a:	ee 59       	subi	r30, 0x9E	; 158
    551c:	f9 4f       	sbci	r31, 0xF9	; 249
    551e:	10 8a       	std	Z+16, r1	; 0x10
}
    5520:	08 95       	ret

00005522 <TCPInit>:


//Khoi dong cac gia tri trong bang TCP session
void TCPInit()
{
    5522:	1f 93       	push	r17
	unsigned char i = 0;
	for(i=0; i<TCP_MAX_SESSION; i++){
    5524:	10 e0       	ldi	r17, 0x00	; 0
		TCPCloseSession(i);
    5526:	81 2f       	mov	r24, r17
    5528:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>

//Khoi dong cac gia tri trong bang TCP session
void TCPInit()
{
	unsigned char i = 0;
	for(i=0; i<TCP_MAX_SESSION; i++){
    552c:	1f 5f       	subi	r17, 0xFF	; 255
    552e:	18 30       	cpi	r17, 0x08	; 8
    5530:	d1 f7       	brne	.-12     	; 0x5526 <TCPInit+0x4>
		TCPCloseSession(i);
	}
}
    5532:	1f 91       	pop	r17
    5534:	08 95       	ret

00005536 <TCPGetFreeSession>:


//Tim mot session TCP dang roi
unsigned char TCPGetFreeSession(){
    5536:	1f 93       	push	r17
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
		if (tcpSessionTable[i].sesState == TCP_STATE_CLOSED)
    5538:	90 91 72 06 	lds	r25, 0x0672
    553c:	99 23       	and	r25, r25
    553e:	e1 f0       	breq	.+56     	; 0x5578 <TCPGetFreeSession+0x42>
    5540:	a1 e9       	ldi	r26, 0x91	; 145
    5542:	b6 e0       	ldi	r27, 0x06	; 6
    5544:	fd 01       	movw	r30, r26


//Tim mot session TCP dang roi
unsigned char TCPGetFreeSession(){
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
    5546:	11 e0       	ldi	r17, 0x01	; 1
		if (tcpSessionTable[i].sesState == TCP_STATE_CLOSED)
    5548:	80 81       	ld	r24, Z
    554a:	88 23       	and	r24, r24
    554c:	b1 f0       	breq	.+44     	; 0x557a <TCPGetFreeSession+0x44>


//Tim mot session TCP dang roi
unsigned char TCPGetFreeSession(){
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
    554e:	1f 5f       	subi	r17, 0xFF	; 255
    5550:	7f 96       	adiw	r30, 0x1f	; 31
    5552:	18 30       	cpi	r17, 0x08	; 8
    5554:	c9 f7       	brne	.-14     	; 0x5548 <TCPGetFreeSession+0x12>
		if (tcpSessionTable[i].sesState == TCP_STATE_CLOSED)
			return i;
	}
	//no free closed socket fount! -> kick an TIMED_WAIT socket
	for(i=0; i<TCP_MAX_SESSION; i++){
		if (tcpSessionTable[i].sesState == TCP_STATE_TIMED_WAIT){
    5556:	98 30       	cpi	r25, 0x08	; 8
    5558:	29 f0       	breq	.+10     	; 0x5564 <TCPGetFreeSession+0x2e>
	for(i=0; i<TCP_MAX_SESSION; i++){
		if (tcpSessionTable[i].sesState == TCP_STATE_CLOSED)
			return i;
	}
	//no free closed socket fount! -> kick an TIMED_WAIT socket
	for(i=0; i<TCP_MAX_SESSION; i++){
    555a:	11 e0       	ldi	r17, 0x01	; 1
		if (tcpSessionTable[i].sesState == TCP_STATE_TIMED_WAIT){
    555c:	8c 91       	ld	r24, X
    555e:	88 30       	cpi	r24, 0x08	; 8
    5560:	31 f4       	brne	.+12     	; 0x556e <TCPGetFreeSession+0x38>
    5562:	01 c0       	rjmp	.+2      	; 0x5566 <TCPGetFreeSession+0x30>
    5564:	10 e0       	ldi	r17, 0x00	; 0
			TCPCloseSession(i);
    5566:	81 2f       	mov	r24, r17
    5568:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
			return i;
    556c:	06 c0       	rjmp	.+12     	; 0x557a <TCPGetFreeSession+0x44>
	for(i=0; i<TCP_MAX_SESSION; i++){
		if (tcpSessionTable[i].sesState == TCP_STATE_CLOSED)
			return i;
	}
	//no free closed socket fount! -> kick an TIMED_WAIT socket
	for(i=0; i<TCP_MAX_SESSION; i++){
    556e:	1f 5f       	subi	r17, 0xFF	; 255
    5570:	5f 96       	adiw	r26, 0x1f	; 31
    5572:	18 30       	cpi	r17, 0x08	; 8
    5574:	99 f7       	brne	.-26     	; 0x555c <TCPGetFreeSession+0x26>
    5576:	01 c0       	rjmp	.+2      	; 0x557a <TCPGetFreeSession+0x44>


//Tim mot session TCP dang roi
unsigned char TCPGetFreeSession(){
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
    5578:	10 e0       	ldi	r17, 0x00	; 0
			return i;
		}
	}
	//no more free sockets ... return invalid val	
	return(TCP_MAX_SESSION);
}
    557a:	81 2f       	mov	r24, r17
    557c:	1f 91       	pop	r17
    557e:	08 95       	ret

00005580 <TCPCreateSession>:


//Ham khoi tao mot session TCP o che do server de cho ket noi
void	TCPCreateSession(unsigned int  sourcePort, prog_void* appService)
{
    5580:	0f 93       	push	r16
    5582:	1f 93       	push	r17
    5584:	cf 93       	push	r28
    5586:	df 93       	push	r29
    5588:	ec 01       	movw	r28, r24
    558a:	8b 01       	movw	r16, r22
	unsigned char i;
	i = TCPGetFreeSession();
    558c:	0e 94 9b 2a 	call	0x5536	; 0x5536 <TCPGetFreeSession>
	if(i >= TCP_MAX_SESSION)
    5590:	88 30       	cpi	r24, 0x08	; 8
    5592:	08 f0       	brcs	.+2      	; 0x5596 <TCPCreateSession+0x16>
		i = 0;	//force session 0
    5594:	80 e0       	ldi	r24, 0x00	; 0
	tcpSessionTable[i].srcPort = sourcePort;
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	2f e1       	ldi	r18, 0x1F	; 31
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	82 9f       	mul	r24, r18
    559e:	f0 01       	movw	r30, r0
    55a0:	83 9f       	mul	r24, r19
    55a2:	f0 0d       	add	r31, r0
    55a4:	92 9f       	mul	r25, r18
    55a6:	f0 0d       	add	r31, r0
    55a8:	11 24       	eor	r1, r1
    55aa:	ee 59       	subi	r30, 0x9E	; 158
    55ac:	f9 4f       	sbci	r31, 0xF9	; 249
    55ae:	d3 83       	std	Z+3, r29	; 0x03
    55b0:	c2 83       	std	Z+2, r28	; 0x02
	tcpSessionTable[i].sesState = TCP_STATE_LISTEN;		//Current state of TCP session
    55b2:	82 e0       	ldi	r24, 0x02	; 2
    55b4:	80 8b       	std	Z+16, r24	; 0x10
	tcpSessionTable[i].srcWin = 8192;//NETSTACK_BUFFERSIZE - ETH_HEADER_LEN - IP_HEADER_LEN - TCP_HEADER_LEN - 16;
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	90 e2       	ldi	r25, 0x20	; 32
    55ba:	92 8b       	std	Z+18, r25	; 0x12
    55bc:	81 8b       	std	Z+17, r24	; 0x11
	tcpSessionTable[i].desWin = tcpSessionTable[i].srcWin;
    55be:	94 8b       	std	Z+20, r25	; 0x14
    55c0:	83 8b       	std	Z+19, r24	; 0x13
	tcpSessionTable[i].timeOut = TCP_TIMEOUT;		//Session time out
    55c2:	8c e3       	ldi	r24, 0x3C	; 60
    55c4:	82 8f       	std	Z+26, r24	; 0x1a
	tcpSessionTable[i].appDataIn = appService;
    55c6:	14 8f       	std	Z+28, r17	; 0x1c
    55c8:	03 8f       	std	Z+27, r16	; 0x1b
}
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	1f 91       	pop	r17
    55d0:	0f 91       	pop	r16
    55d2:	08 95       	ret

000055d4 <TCPCheckTimeOut>:


//Duoc goi moi giay de kiem tra Time out cho cac phien TCP,
// giai phong cac phine TCP bi treo
void TCPCheckTimeOut(){
    55d4:	1f 93       	push	r17
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
    55da:	c2 e7       	ldi	r28, 0x72	; 114
    55dc:	d6 e0       	ldi	r29, 0x06	; 6
    55de:	10 e0       	ldi	r17, 0x00	; 0
		//decrement ttl:
		if ((tcpSessionTable[i].sesState != TCP_STATE_CLOSED) && (tcpSessionTable[i].sesState != TCP_STATE_LISTEN)){
    55e0:	88 81       	ld	r24, Y
    55e2:	88 23       	and	r24, r24
    55e4:	61 f0       	breq	.+24     	; 0x55fe <TCPCheckTimeOut+0x2a>
    55e6:	82 30       	cpi	r24, 0x02	; 2
    55e8:	51 f0       	breq	.+20     	; 0x55fe <TCPCheckTimeOut+0x2a>
			if(tcpSessionTable[i].timeOut)
    55ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    55ec:	88 23       	and	r24, r24
    55ee:	21 f0       	breq	.+8      	; 0x55f8 <TCPCheckTimeOut+0x24>
				tcpSessionTable[i].timeOut--;
    55f0:	81 50       	subi	r24, 0x01	; 1
    55f2:	8a 87       	std	Y+10, r24	; 0x0a
			
			//if socket TTL count is zero, close this socket!
			if (tcpSessionTable[i].timeOut == 0){
    55f4:	88 23       	and	r24, r24
    55f6:	19 f4       	brne	.+6      	; 0x55fe <TCPCheckTimeOut+0x2a>
				TCPCloseSession(i);
    55f8:	81 2f       	mov	r24, r17
    55fa:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>

//Duoc goi moi giay de kiem tra Time out cho cac phien TCP,
// giai phong cac phine TCP bi treo
void TCPCheckTimeOut(){
	unsigned char i;
	for(i=0; i<TCP_MAX_SESSION; i++){
    55fe:	1f 5f       	subi	r17, 0xFF	; 255
    5600:	6f 96       	adiw	r28, 0x1f	; 31
    5602:	18 30       	cpi	r17, 0x08	; 8
    5604:	69 f7       	brne	.-38     	; 0x55e0 <TCPCheckTimeOut+0xc>
			if (tcpSessionTable[i].timeOut == 0){
				TCPCloseSession(i);
			}
		}
	}
}
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	1f 91       	pop	r17
    560c:	08 95       	ret

0000560e <checksum>:

//Tinh checksum cho goi TCP
unsigned int checksum(unsigned char *buffer, unsigned int len, unsigned long csum32)
{
    560e:	ef 92       	push	r14
    5610:	ff 92       	push	r15
    5612:	0f 93       	push	r16
    5614:	1f 93       	push	r17
    5616:	cf 93       	push	r28
    5618:	df 93       	push	r29
    561a:	7c 01       	movw	r14, r24
    561c:	8b 01       	movw	r16, r22
	unsigned int  res16 = 0x0000;
	unsigned char data_hi;
	unsigned char data_lo;
	while(len > 1){
    561e:	62 30       	cpi	r22, 0x02	; 2
    5620:	71 05       	cpc	r23, r1
    5622:	f0 f0       	brcs	.+60     	; 0x5660 <checksum+0x52>
    5624:	ec 01       	movw	r28, r24
		data_hi = *buffer++;
    5626:	98 81       	ld	r25, Y
		data_lo = *buffer++;
    5628:	89 81       	ldd	r24, Y+1	; 0x01
		}
	}
}

//Tinh checksum cho goi TCP
unsigned int checksum(unsigned char *buffer, unsigned int len, unsigned long csum32)
    562a:	22 96       	adiw	r28, 0x02	; 2
	unsigned char data_hi;
	unsigned char data_lo;
	while(len > 1){
		data_hi = *buffer++;
		data_lo = *buffer++;
		res16 = (((unsigned int)data_hi << 8) + data_lo);
    562c:	f9 2f       	mov	r31, r25
    562e:	e0 e0       	ldi	r30, 0x00	; 0
    5630:	df 01       	movw	r26, r30
    5632:	a8 0f       	add	r26, r24
    5634:	b1 1d       	adc	r27, r1
		csum32 = csum32 + res16;
    5636:	cd 01       	movw	r24, r26
    5638:	a0 e0       	ldi	r26, 0x00	; 0
    563a:	b0 e0       	ldi	r27, 0x00	; 0
    563c:	28 0f       	add	r18, r24
    563e:	39 1f       	adc	r19, r25
    5640:	4a 1f       	adc	r20, r26
    5642:	5b 1f       	adc	r21, r27
		len -=2;
    5644:	62 50       	subi	r22, 0x02	; 2
    5646:	70 40       	sbci	r23, 0x00	; 0
unsigned int checksum(unsigned char *buffer, unsigned int len, unsigned long csum32)
{
	unsigned int  res16 = 0x0000;
	unsigned char data_hi;
	unsigned char data_lo;
	while(len > 1){
    5648:	62 30       	cpi	r22, 0x02	; 2
    564a:	71 05       	cpc	r23, r1
    564c:	60 f7       	brcc	.-40     	; 0x5626 <checksum+0x18>
		}
	}
}

//Tinh checksum cho goi TCP
unsigned int checksum(unsigned char *buffer, unsigned int len, unsigned long csum32)
    564e:	02 50       	subi	r16, 0x02	; 2
    5650:	10 40       	sbci	r17, 0x00	; 0
    5652:	c8 01       	movw	r24, r16
    5654:	8e 7f       	andi	r24, 0xFE	; 254
    5656:	02 96       	adiw	r24, 0x02	; 2
    5658:	e8 0e       	add	r14, r24
    565a:	f9 1e       	adc	r15, r25
    565c:	01 70       	andi	r16, 0x01	; 1
    565e:	10 70       	andi	r17, 0x00	; 0
		data_lo = *buffer++;
		res16 = (((unsigned int)data_hi << 8) + data_lo);
		csum32 = csum32 + res16;
		len -=2;
	}
	if(len > 0){
    5660:	01 15       	cp	r16, r1
    5662:	11 05       	cpc	r17, r1
    5664:	49 f0       	breq	.+18     	; 0x5678 <checksum+0x6a>
		data_hi = *buffer;
		res16   = (unsigned int)data_hi<<8;
    5666:	f7 01       	movw	r30, r14
    5668:	90 81       	ld	r25, Z
    566a:	80 e0       	ldi	r24, 0x00	; 0
		csum32 = csum32 + res16;
    566c:	a0 e0       	ldi	r26, 0x00	; 0
    566e:	b0 e0       	ldi	r27, 0x00	; 0
    5670:	28 0f       	add	r18, r24
    5672:	39 1f       	adc	r19, r25
    5674:	4a 1f       	adc	r20, r26
    5676:	5b 1f       	adc	r21, r27
	}
	while(csum32>>16)
    5678:	ca 01       	movw	r24, r20
    567a:	aa 27       	eor	r26, r26
    567c:	bb 27       	eor	r27, r27
    567e:	00 97       	sbiw	r24, 0x00	; 0
    5680:	a1 05       	cpc	r26, r1
    5682:	b1 05       	cpc	r27, r1
    5684:	69 f0       	breq	.+26     	; 0x56a0 <checksum+0x92>
		csum32 = (csum32 & 0xFFFF)+ (csum32 >> 16);
    5686:	40 70       	andi	r20, 0x00	; 0
    5688:	50 70       	andi	r21, 0x00	; 0
    568a:	28 0f       	add	r18, r24
    568c:	39 1f       	adc	r19, r25
    568e:	4a 1f       	adc	r20, r26
    5690:	5b 1f       	adc	r21, r27
	if(len > 0){
		data_hi = *buffer;
		res16   = (unsigned int)data_hi<<8;
		csum32 = csum32 + res16;
	}
	while(csum32>>16)
    5692:	ca 01       	movw	r24, r20
    5694:	aa 27       	eor	r26, r26
    5696:	bb 27       	eor	r27, r27
    5698:	00 97       	sbiw	r24, 0x00	; 0
    569a:	a1 05       	cpc	r26, r1
    569c:	b1 05       	cpc	r27, r1
    569e:	99 f7       	brne	.-26     	; 0x5686 <checksum+0x78>
		csum32 = (csum32 & 0xFFFF)+ (csum32 >> 16);
	res16  =~(csum32 & 0x0000FFFF);
    56a0:	20 95       	com	r18
    56a2:	30 95       	com	r19
	return (res16);
}
    56a4:	82 2f       	mov	r24, r18
    56a6:	93 2f       	mov	r25, r19
    56a8:	df 91       	pop	r29
    56aa:	cf 91       	pop	r28
    56ac:	1f 91       	pop	r17
    56ae:	0f 91       	pop	r16
    56b0:	ff 90       	pop	r15
    56b2:	ef 90       	pop	r14
    56b4:	08 95       	ret

000056b6 <TCPPackedSend>:

//Gui di mot goi TCP
void TCPPackedSend(struct tcpSession *pSession, unsigned char Flags, unsigned int len, unsigned char *dataBuffer)
{
    56b6:	2f 92       	push	r2
    56b8:	3f 92       	push	r3
    56ba:	4f 92       	push	r4
    56bc:	5f 92       	push	r5
    56be:	6f 92       	push	r6
    56c0:	7f 92       	push	r7
    56c2:	8f 92       	push	r8
    56c4:	9f 92       	push	r9
    56c6:	af 92       	push	r10
    56c8:	bf 92       	push	r11
    56ca:	cf 92       	push	r12
    56cc:	df 92       	push	r13
    56ce:	ef 92       	push	r14
    56d0:	ff 92       	push	r15
    56d2:	0f 93       	push	r16
    56d4:	1f 93       	push	r17
    56d6:	df 93       	push	r29
    56d8:	cf 93       	push	r28
    56da:	00 d0       	rcall	.+0      	; 0x56dc <TCPPackedSend+0x26>
    56dc:	00 d0       	rcall	.+0      	; 0x56de <TCPPackedSend+0x28>
    56de:	cd b7       	in	r28, 0x3d	; 61
    56e0:	de b7       	in	r29, 0x3e	; 62
    56e2:	5c 01       	movw	r10, r24
    56e4:	26 2e       	mov	r2, r22
    56e6:	6a 01       	movw	r12, r20
    56e8:	f9 01       	movw	r30, r18
	unsigned long checksum32;
	//Make pointer to TCP header
	struct ntTCPHeader* tcpHeader;
	struct ntIPHeader* ipHeader;
	//Neu dang syn thi them option ve MSS
	if(Flags & TCP_SYN_FLAG){
    56ea:	70 e0       	ldi	r23, 0x00	; 0
    56ec:	66 24       	eor	r6, r6
    56ee:	77 24       	eor	r7, r7
    56f0:	68 94       	set
    56f2:	61 f8       	bld	r6, 1
    56f4:	66 22       	and	r6, r22
    56f6:	77 22       	and	r7, r23
    56f8:	61 ff       	sbrs	r22, 1
    56fa:	0d c0       	rjmp	.+26     	; 0x5716 <TCPPackedSend+0x60>
		//Option data
		dataBuffer[0] = 0x02;
    56fc:	82 e0       	ldi	r24, 0x02	; 2
    56fe:	80 83       	st	Z, r24
		dataBuffer[1] = 0x04;
    5700:	84 e0       	ldi	r24, 0x04	; 4
    5702:	81 83       	std	Z+1, r24	; 0x01
		dataBuffer[2] = (MAX_SEGMENT_SIZE >> 8) & 0xff;
    5704:	83 e0       	ldi	r24, 0x03	; 3
    5706:	82 83       	std	Z+2, r24	; 0x02
		dataBuffer[3] = MAX_SEGMENT_SIZE & 0xff;
    5708:	98 ee       	ldi	r25, 0xE8	; 232
    570a:	93 83       	std	Z+3, r25	; 0x03
		dataBuffer[4] = 0x01;
    570c:	91 e0       	ldi	r25, 0x01	; 1
    570e:	94 83       	std	Z+4, r25	; 0x04
		dataBuffer[5] = 0x03;
    5710:	85 83       	std	Z+5, r24	; 0x05
		dataBuffer[6] = 0x03;
    5712:	86 83       	std	Z+6, r24	; 0x06
		dataBuffer[7] = 0x00;
    5714:	17 82       	std	Z+7, r1	; 0x07
		//Move data pointer to make room for TCP header
	}
	dataBuffer -= TCP_HEADER_LEN;
    5716:	cf 01       	movw	r24, r30
    5718:	44 97       	sbiw	r24, 0x14	; 20
    571a:	9c 83       	std	Y+4, r25	; 0x04
    571c:	8b 83       	std	Y+3, r24	; 0x03
	tcpHeader = (struct ntTCPHeader*)dataBuffer;
	//Fill UDP header
	tcpHeader->srcPort = HTONS(pSession->srcPort);
    571e:	d5 01       	movw	r26, r10
    5720:	12 96       	adiw	r26, 0x02	; 2
    5722:	8d 91       	ld	r24, X+
    5724:	9c 91       	ld	r25, X
    5726:	13 97       	sbiw	r26, 0x03	; 3
    5728:	98 27       	eor	r25, r24
    572a:	89 27       	eor	r24, r25
    572c:	98 27       	eor	r25, r24
    572e:	eb 81       	ldd	r30, Y+3	; 0x03
    5730:	fc 81       	ldd	r31, Y+4	; 0x04
    5732:	91 83       	std	Z+1, r25	; 0x01
    5734:	80 83       	st	Z, r24
	tcpHeader->desPort = HTONS(pSession->desPort);
    5736:	8d 91       	ld	r24, X+
    5738:	9c 91       	ld	r25, X
    573a:	11 97       	sbiw	r26, 0x01	; 1
    573c:	98 27       	eor	r25, r24
    573e:	89 27       	eor	r24, r25
    5740:	98 27       	eor	r25, r24
    5742:	93 83       	std	Z+3, r25	; 0x03
    5744:	82 83       	std	Z+2, r24	; 0x02
	tcpHeader->seqNumber = HTONL(pSession->seqNumber);
    5746:	18 96       	adiw	r26, 0x08	; 8
    5748:	8d 91       	ld	r24, X+
    574a:	9d 91       	ld	r25, X+
    574c:	0d 90       	ld	r0, X+
    574e:	bc 91       	ld	r27, X
    5750:	a0 2d       	mov	r26, r0
    5752:	eb 2e       	mov	r14, r27
    5754:	ff 24       	eor	r15, r15
    5756:	00 27       	eor	r16, r16
    5758:	11 27       	eor	r17, r17
    575a:	58 2f       	mov	r21, r24
    575c:	44 27       	eor	r20, r20
    575e:	33 27       	eor	r19, r19
    5760:	22 27       	eor	r18, r18
    5762:	e2 2a       	or	r14, r18
    5764:	f3 2a       	or	r15, r19
    5766:	04 2b       	or	r16, r20
    5768:	15 2b       	or	r17, r21
    576a:	9c 01       	movw	r18, r24
    576c:	ad 01       	movw	r20, r26
    576e:	20 70       	andi	r18, 0x00	; 0
    5770:	30 70       	andi	r19, 0x00	; 0
    5772:	50 70       	andi	r21, 0x00	; 0
    5774:	23 2f       	mov	r18, r19
    5776:	34 2f       	mov	r19, r20
    5778:	45 2f       	mov	r20, r21
    577a:	55 27       	eor	r21, r21
    577c:	2e 29       	or	r18, r14
    577e:	3f 29       	or	r19, r15
    5780:	40 2b       	or	r20, r16
    5782:	51 2b       	or	r21, r17
    5784:	80 70       	andi	r24, 0x00	; 0
    5786:	a0 70       	andi	r26, 0x00	; 0
    5788:	b0 70       	andi	r27, 0x00	; 0
    578a:	ee 24       	eor	r14, r14
    578c:	f8 2e       	mov	r15, r24
    578e:	09 2f       	mov	r16, r25
    5790:	1a 2f       	mov	r17, r26
    5792:	2e 29       	or	r18, r14
    5794:	3f 29       	or	r19, r15
    5796:	40 2b       	or	r20, r16
    5798:	51 2b       	or	r21, r17
    579a:	24 83       	std	Z+4, r18	; 0x04
    579c:	35 83       	std	Z+5, r19	; 0x05
    579e:	46 83       	std	Z+6, r20	; 0x06
    57a0:	57 83       	std	Z+7, r21	; 0x07
	pSession->seqNumber = pSession->seqNumber + len;
    57a2:	96 01       	movw	r18, r12
    57a4:	40 e0       	ldi	r20, 0x00	; 0
    57a6:	50 e0       	ldi	r21, 0x00	; 0
    57a8:	f5 01       	movw	r30, r10
    57aa:	80 85       	ldd	r24, Z+8	; 0x08
    57ac:	91 85       	ldd	r25, Z+9	; 0x09
    57ae:	a2 85       	ldd	r26, Z+10	; 0x0a
    57b0:	b3 85       	ldd	r27, Z+11	; 0x0b
    57b2:	82 0f       	add	r24, r18
    57b4:	93 1f       	adc	r25, r19
    57b6:	a4 1f       	adc	r26, r20
    57b8:	b5 1f       	adc	r27, r21
    57ba:	80 87       	std	Z+8, r24	; 0x08
    57bc:	91 87       	std	Z+9, r25	; 0x09
    57be:	a2 87       	std	Z+10, r26	; 0x0a
    57c0:	b3 87       	std	Z+11, r27	; 0x0b
	if(Flags & (TCP_FIN_FLAG|TCP_SYN_FLAG))
    57c2:	63 70       	andi	r22, 0x03	; 3
    57c4:	70 70       	andi	r23, 0x00	; 0
    57c6:	61 15       	cp	r22, r1
    57c8:	71 05       	cpc	r23, r1
    57ca:	39 f0       	breq	.+14     	; 0x57da <TCPPackedSend+0x124>
		(pSession->seqNumber)++;
    57cc:	01 96       	adiw	r24, 0x01	; 1
    57ce:	a1 1d       	adc	r26, r1
    57d0:	b1 1d       	adc	r27, r1
    57d2:	80 87       	std	Z+8, r24	; 0x08
    57d4:	91 87       	std	Z+9, r25	; 0x09
    57d6:	a2 87       	std	Z+10, r26	; 0x0a
    57d8:	b3 87       	std	Z+11, r27	; 0x0b
	tcpHeader->ackNumber = HTONL(pSession->ackNumber);
    57da:	f5 01       	movw	r30, r10
    57dc:	84 85       	ldd	r24, Z+12	; 0x0c
    57de:	95 85       	ldd	r25, Z+13	; 0x0d
    57e0:	a6 85       	ldd	r26, Z+14	; 0x0e
    57e2:	b7 85       	ldd	r27, Z+15	; 0x0f
    57e4:	eb 2e       	mov	r14, r27
    57e6:	ff 24       	eor	r15, r15
    57e8:	00 27       	eor	r16, r16
    57ea:	11 27       	eor	r17, r17
    57ec:	58 2f       	mov	r21, r24
    57ee:	44 27       	eor	r20, r20
    57f0:	33 27       	eor	r19, r19
    57f2:	22 27       	eor	r18, r18
    57f4:	e2 2a       	or	r14, r18
    57f6:	f3 2a       	or	r15, r19
    57f8:	04 2b       	or	r16, r20
    57fa:	15 2b       	or	r17, r21
    57fc:	9c 01       	movw	r18, r24
    57fe:	ad 01       	movw	r20, r26
    5800:	20 70       	andi	r18, 0x00	; 0
    5802:	30 70       	andi	r19, 0x00	; 0
    5804:	50 70       	andi	r21, 0x00	; 0
    5806:	23 2f       	mov	r18, r19
    5808:	34 2f       	mov	r19, r20
    580a:	45 2f       	mov	r20, r21
    580c:	55 27       	eor	r21, r21
    580e:	2e 29       	or	r18, r14
    5810:	3f 29       	or	r19, r15
    5812:	40 2b       	or	r20, r16
    5814:	51 2b       	or	r21, r17
    5816:	80 70       	andi	r24, 0x00	; 0
    5818:	a0 70       	andi	r26, 0x00	; 0
    581a:	b0 70       	andi	r27, 0x00	; 0
    581c:	ee 24       	eor	r14, r14
    581e:	f8 2e       	mov	r15, r24
    5820:	09 2f       	mov	r16, r25
    5822:	1a 2f       	mov	r17, r26
    5824:	2e 29       	or	r18, r14
    5826:	3f 29       	or	r19, r15
    5828:	40 2b       	or	r20, r16
    582a:	51 2b       	or	r21, r17
    582c:	ab 81       	ldd	r26, Y+3	; 0x03
    582e:	bc 81       	ldd	r27, Y+4	; 0x04
    5830:	18 96       	adiw	r26, 0x08	; 8
    5832:	2d 93       	st	X+, r18
    5834:	3d 93       	st	X+, r19
    5836:	4d 93       	st	X+, r20
    5838:	5c 93       	st	X, r21
    583a:	1b 97       	sbiw	r26, 0x0b	; 11
	if(Flags & TCP_SYN_FLAG){
    583c:	61 14       	cp	r6, r1
    583e:	71 04       	cpc	r7, r1
    5840:	49 f0       	breq	.+18     	; 0x5854 <TCPPackedSend+0x19e>
		tcpHeader->Offset = (0x07<<4);
    5842:	80 e7       	ldi	r24, 0x70	; 112
    5844:	1c 96       	adiw	r26, 0x0c	; 12
    5846:	8c 93       	st	X, r24
    5848:	1c 97       	sbiw	r26, 0x0c	; 12
		len += (TCP_HEADER_LEN + 8);
    584a:	f6 01       	movw	r30, r12
    584c:	7c 96       	adiw	r30, 0x1c	; 28
    584e:	fa 83       	std	Y+2, r31	; 0x02
    5850:	e9 83       	std	Y+1, r30	; 0x01
    5852:	09 c0       	rjmp	.+18     	; 0x5866 <TCPPackedSend+0x1b0>
	}else{
		tcpHeader->Offset = (0x05<<4);
    5854:	80 e5       	ldi	r24, 0x50	; 80
    5856:	ab 81       	ldd	r26, Y+3	; 0x03
    5858:	bc 81       	ldd	r27, Y+4	; 0x04
    585a:	1c 96       	adiw	r26, 0x0c	; 12
    585c:	8c 93       	st	X, r24
		len += TCP_HEADER_LEN;
    585e:	f6 01       	movw	r30, r12
    5860:	74 96       	adiw	r30, 0x14	; 20
    5862:	fa 83       	std	Y+2, r31	; 0x02
    5864:	e9 83       	std	Y+1, r30	; 0x01
	}
	tcpHeader->Flags = Flags;
    5866:	ab 81       	ldd	r26, Y+3	; 0x03
    5868:	bc 81       	ldd	r27, Y+4	; 0x04
    586a:	1d 96       	adiw	r26, 0x0d	; 13
    586c:	2c 92       	st	X, r2
    586e:	1d 97       	sbiw	r26, 0x0d	; 13
	tcpHeader->Window = HTONS(pSession->srcWin);//((NETSTACK_BUFFERSIZE-20-14));
    5870:	f5 01       	movw	r30, r10
    5872:	81 89       	ldd	r24, Z+17	; 0x11
    5874:	92 89       	ldd	r25, Z+18	; 0x12
    5876:	98 27       	eor	r25, r24
    5878:	89 27       	eor	r24, r25
    587a:	98 27       	eor	r25, r24
    587c:	1f 96       	adiw	r26, 0x0f	; 15
    587e:	9c 93       	st	X, r25
    5880:	8e 93       	st	-X, r24
    5882:	1e 97       	sbiw	r26, 0x0e	; 14
	tcpHeader->Checksum = 0;
    5884:	51 96       	adiw	r26, 0x11	; 17
    5886:	1c 92       	st	X, r1
    5888:	1e 92       	st	-X, r1
    588a:	50 97       	sbiw	r26, 0x10	; 16
	tcpHeader->UrgentPtr = 0x0000;
    588c:	53 96       	adiw	r26, 0x13	; 19
    588e:	1c 92       	st	X, r1
    5890:	1e 92       	st	-X, r1
    5892:	52 97       	sbiw	r26, 0x12	; 18
	//Generate checksum
	ipHeader = (struct ntIPHeader*)(dataBuffer-IP_HEADER_LEN);
    5894:	8d 01       	movw	r16, r26
    5896:	04 51       	subi	r16, 0x14	; 20
    5898:	10 40       	sbci	r17, 0x00	; 0
	ipHeader->srcIPAddr = HTONL(ipGetConfig()->ip);
    589a:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    589e:	dc 01       	movw	r26, r24
    58a0:	2d 90       	ld	r2, X+
    58a2:	3d 90       	ld	r3, X+
    58a4:	4d 90       	ld	r4, X+
    58a6:	5c 90       	ld	r5, X
    58a8:	52 2c       	mov	r5, r2
    58aa:	44 24       	eor	r4, r4
    58ac:	33 24       	eor	r3, r3
    58ae:	22 24       	eor	r2, r2
    58b0:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    58b4:	fc 01       	movw	r30, r24
    58b6:	80 81       	ld	r24, Z
    58b8:	91 81       	ldd	r25, Z+1	; 0x01
    58ba:	a2 81       	ldd	r26, Z+2	; 0x02
    58bc:	b3 81       	ldd	r27, Z+3	; 0x03
    58be:	80 70       	andi	r24, 0x00	; 0
    58c0:	90 70       	andi	r25, 0x00	; 0
    58c2:	b0 70       	andi	r27, 0x00	; 0
    58c4:	69 2e       	mov	r6, r25
    58c6:	7a 2e       	mov	r7, r26
    58c8:	8b 2e       	mov	r8, r27
    58ca:	99 24       	eor	r9, r9
    58cc:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    58d0:	fc 01       	movw	r30, r24
    58d2:	80 81       	ld	r24, Z
    58d4:	91 81       	ldd	r25, Z+1	; 0x01
    58d6:	a2 81       	ldd	r26, Z+2	; 0x02
    58d8:	b3 81       	ldd	r27, Z+3	; 0x03
    58da:	80 70       	andi	r24, 0x00	; 0
    58dc:	a0 70       	andi	r26, 0x00	; 0
    58de:	b0 70       	andi	r27, 0x00	; 0
    58e0:	cc 24       	eor	r12, r12
    58e2:	d8 2e       	mov	r13, r24
    58e4:	e9 2e       	mov	r14, r25
    58e6:	fa 2e       	mov	r15, r26
    58e8:	0e 94 4d 1c 	call	0x389a	; 0x389a <ipGetConfig>
    58ec:	dc 01       	movw	r26, r24
    58ee:	13 96       	adiw	r26, 0x03	; 3
    58f0:	8c 91       	ld	r24, X
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	a0 e0       	ldi	r26, 0x00	; 0
    58f6:	b0 e0       	ldi	r27, 0x00	; 0
    58f8:	82 29       	or	r24, r2
    58fa:	93 29       	or	r25, r3
    58fc:	a4 29       	or	r26, r4
    58fe:	b5 29       	or	r27, r5
    5900:	86 29       	or	r24, r6
    5902:	97 29       	or	r25, r7
    5904:	a8 29       	or	r26, r8
    5906:	b9 29       	or	r27, r9
    5908:	8c 29       	or	r24, r12
    590a:	9d 29       	or	r25, r13
    590c:	ae 29       	or	r26, r14
    590e:	bf 29       	or	r27, r15
    5910:	f8 01       	movw	r30, r16
    5912:	84 87       	std	Z+12, r24	; 0x0c
    5914:	95 87       	std	Z+13, r25	; 0x0d
    5916:	a6 87       	std	Z+14, r26	; 0x0e
    5918:	b7 87       	std	Z+15, r27	; 0x0f
	ipHeader->desIPAddr = HTONL(pSession->desIP);
    591a:	f5 01       	movw	r30, r10
    591c:	84 81       	ldd	r24, Z+4	; 0x04
    591e:	95 81       	ldd	r25, Z+5	; 0x05
    5920:	a6 81       	ldd	r26, Z+6	; 0x06
    5922:	b7 81       	ldd	r27, Z+7	; 0x07
    5924:	cb 2e       	mov	r12, r27
    5926:	dd 24       	eor	r13, r13
    5928:	ee 24       	eor	r14, r14
    592a:	ff 24       	eor	r15, r15
    592c:	58 2f       	mov	r21, r24
    592e:	44 27       	eor	r20, r20
    5930:	33 27       	eor	r19, r19
    5932:	22 27       	eor	r18, r18
    5934:	c2 2a       	or	r12, r18
    5936:	d3 2a       	or	r13, r19
    5938:	e4 2a       	or	r14, r20
    593a:	f5 2a       	or	r15, r21
    593c:	9c 01       	movw	r18, r24
    593e:	ad 01       	movw	r20, r26
    5940:	20 70       	andi	r18, 0x00	; 0
    5942:	30 70       	andi	r19, 0x00	; 0
    5944:	50 70       	andi	r21, 0x00	; 0
    5946:	23 2f       	mov	r18, r19
    5948:	34 2f       	mov	r19, r20
    594a:	45 2f       	mov	r20, r21
    594c:	55 27       	eor	r21, r21
    594e:	2c 29       	or	r18, r12
    5950:	3d 29       	or	r19, r13
    5952:	4e 29       	or	r20, r14
    5954:	5f 29       	or	r21, r15
    5956:	80 70       	andi	r24, 0x00	; 0
    5958:	a0 70       	andi	r26, 0x00	; 0
    595a:	b0 70       	andi	r27, 0x00	; 0
    595c:	cc 24       	eor	r12, r12
    595e:	d8 2e       	mov	r13, r24
    5960:	e9 2e       	mov	r14, r25
    5962:	fa 2e       	mov	r15, r26
    5964:	2c 29       	or	r18, r12
    5966:	3d 29       	or	r19, r13
    5968:	4e 29       	or	r20, r14
    596a:	5f 29       	or	r21, r15
    596c:	d8 01       	movw	r26, r16
    596e:	50 96       	adiw	r26, 0x10	; 16
    5970:	2d 93       	st	X+, r18
    5972:	3d 93       	st	X+, r19
    5974:	4d 93       	st	X+, r20
    5976:	5c 93       	st	X, r21
    5978:	53 97       	sbiw	r26, 0x13	; 19
	ipHeader->Checksum = HTONS(len);
    597a:	89 81       	ldd	r24, Y+1	; 0x01
    597c:	9a 81       	ldd	r25, Y+2	; 0x02
    597e:	98 27       	eor	r25, r24
    5980:	89 27       	eor	r24, r25
    5982:	98 27       	eor	r25, r24
    5984:	1b 96       	adiw	r26, 0x0b	; 11
    5986:	9c 93       	st	X, r25
    5988:	8e 93       	st	-X, r24
    598a:	1a 97       	sbiw	r26, 0x0a	; 10
	ipHeader->TTL = 0x00;
    598c:	18 96       	adiw	r26, 0x08	; 8
    598e:	1c 92       	st	X, r1
    5990:	18 97       	sbiw	r26, 0x08	; 8
	ipHeader->Protocol = IP_PROTO_TCP;
    5992:	86 e0       	ldi	r24, 0x06	; 6
    5994:	19 96       	adiw	r26, 0x09	; 9
    5996:	8c 93       	st	X, r24
	checksum32 = 0;
	tmp = len + 12;
    5998:	69 81       	ldd	r22, Y+1	; 0x01
    599a:	7a 81       	ldd	r23, Y+2	; 0x02
    599c:	64 5f       	subi	r22, 0xF4	; 244
    599e:	7f 4f       	sbci	r23, 0xFF	; 255
	tmp = checksum (((unsigned char *)ipHeader+8), tmp, checksum32);
    59a0:	8b 81       	ldd	r24, Y+3	; 0x03
    59a2:	9c 81       	ldd	r25, Y+4	; 0x04
    59a4:	0c 97       	sbiw	r24, 0x0c	; 12
    59a6:	20 e0       	ldi	r18, 0x00	; 0
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	a9 01       	movw	r20, r18
    59ac:	0e 94 07 2b 	call	0x560e	; 0x560e <checksum>
	tcpHeader->Checksum = HTONS(tmp);
    59b0:	98 27       	eor	r25, r24
    59b2:	89 27       	eor	r24, r25
    59b4:	98 27       	eor	r25, r24
    59b6:	eb 81       	ldd	r30, Y+3	; 0x03
    59b8:	fc 81       	ldd	r31, Y+4	; 0x04
    59ba:	91 8b       	std	Z+17, r25	; 0x11
    59bc:	80 8b       	std	Z+16, r24	; 0x10
	ipSend(pSession->desIP, IP_PROTO_TCP, len, (unsigned char *)tcpHeader);	
    59be:	d5 01       	movw	r26, r10
    59c0:	14 96       	adiw	r26, 0x04	; 4
    59c2:	6d 91       	ld	r22, X+
    59c4:	7d 91       	ld	r23, X+
    59c6:	8d 91       	ld	r24, X+
    59c8:	9c 91       	ld	r25, X
    59ca:	17 97       	sbiw	r26, 0x07	; 7
    59cc:	46 e0       	ldi	r20, 0x06	; 6
    59ce:	29 81       	ldd	r18, Y+1	; 0x01
    59d0:	3a 81       	ldd	r19, Y+2	; 0x02
    59d2:	8f 01       	movw	r16, r30
    59d4:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <ipSend>
}
    59d8:	0f 90       	pop	r0
    59da:	0f 90       	pop	r0
    59dc:	0f 90       	pop	r0
    59de:	0f 90       	pop	r0
    59e0:	cf 91       	pop	r28
    59e2:	df 91       	pop	r29
    59e4:	1f 91       	pop	r17
    59e6:	0f 91       	pop	r16
    59e8:	ff 90       	pop	r15
    59ea:	ef 90       	pop	r14
    59ec:	df 90       	pop	r13
    59ee:	cf 90       	pop	r12
    59f0:	bf 90       	pop	r11
    59f2:	af 90       	pop	r10
    59f4:	9f 90       	pop	r9
    59f6:	8f 90       	pop	r8
    59f8:	7f 90       	pop	r7
    59fa:	6f 90       	pop	r6
    59fc:	5f 90       	pop	r5
    59fe:	4f 90       	pop	r4
    5a00:	3f 90       	pop	r3
    5a02:	2f 90       	pop	r2
    5a04:	08 95       	ret

00005a06 <TCPProcess>:
void TCPProcess(unsigned char *buffer, unsigned int len)
//Ham xu ly cho giao thuc TCP
// Duoc thuc thi khi nhan duoc mot goi TCP (goi boi netstackIPProcess)
// buffer: co tro den dau goi IP (bat dau IP Header)
// len   : chieu dai buffer
{
    5a06:	2f 92       	push	r2
    5a08:	3f 92       	push	r3
    5a0a:	4f 92       	push	r4
    5a0c:	5f 92       	push	r5
    5a0e:	6f 92       	push	r6
    5a10:	7f 92       	push	r7
    5a12:	8f 92       	push	r8
    5a14:	9f 92       	push	r9
    5a16:	af 92       	push	r10
    5a18:	bf 92       	push	r11
    5a1a:	cf 92       	push	r12
    5a1c:	df 92       	push	r13
    5a1e:	ef 92       	push	r14
    5a20:	ff 92       	push	r15
    5a22:	0f 93       	push	r16
    5a24:	1f 93       	push	r17
    5a26:	cf 93       	push	r28
    5a28:	df 93       	push	r29
    5a2a:	7c 01       	movw	r14, r24
	unsigned long tmp;
	struct ntIPHeader* ipHeader;
	struct ntTCPHeader* tcpHeader;
	unsigned char *tcpData;
	//Khoi tao cac co tro den Header IP va TCP
	ipHeader = (struct ntIPHeader*)(buffer);
    5a2c:	6c 01       	movw	r12, r24
	ipHeaderLen = ((ipHeader->verHdrLen) & 0x0F) << 2;
    5a2e:	dc 01       	movw	r26, r24
    5a30:	0c 91       	ld	r16, X
    5a32:	0f 70       	andi	r16, 0x0F	; 15
    5a34:	00 0f       	add	r16, r16
    5a36:	00 0f       	add	r16, r16
	//
	tcpHeader = (struct ntTCPHeader*)(buffer+ipHeaderLen);
    5a38:	a0 2e       	mov	r10, r16
    5a3a:	bb 24       	eor	r11, r11
    5a3c:	ec 01       	movw	r28, r24
    5a3e:	ca 0d       	add	r28, r10
    5a40:	db 1d       	adc	r29, r11
	tcpHeaderLen = ((tcpHeader->Offset) & 0xF0) >> 2;
    5a42:	5c 84       	ldd	r5, Y+12	; 0x0c
	//
	tcpData = (buffer+ipHeaderLen+tcpHeaderLen);
	dataLen = HTONS(ipHeader->Len) - (ipHeaderLen + tcpHeaderLen);
    5a44:	fc 01       	movw	r30, r24
    5a46:	22 80       	ldd	r2, Z+2	; 0x02
    5a48:	33 80       	ldd	r3, Z+3	; 0x03
    5a4a:	e2 e6       	ldi	r30, 0x62	; 98
    5a4c:	f6 e0       	ldi	r31, 0x06	; 6
	//Tim kiem mot phien TCP co san cho goi nay
	for(i = 0; i < TCP_MAX_SESSION; i++){	//Check session table
    5a4e:	10 e0       	ldi	r17, 0x00	; 0
		if(tcpSessionTable[i].sesState != TCP_STATE_CLOSED){		//If not closed session
    5a50:	80 89       	ldd	r24, Z+16	; 0x10
    5a52:	88 23       	and	r24, r24
    5a54:	09 f4       	brne	.+2      	; 0x5a58 <TCPProcess+0x52>
    5a56:	4b c0       	rjmp	.+150    	; 0x5aee <TCPProcess+0xe8>
			if(tcpSessionTable[i].srcPort == HTONS((tcpHeader->desPort))){	//If matched local port
    5a58:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a5c:	98 27       	eor	r25, r24
    5a5e:	89 27       	eor	r24, r25
    5a60:	98 27       	eor	r25, r24
    5a62:	42 81       	ldd	r20, Z+2	; 0x02
    5a64:	53 81       	ldd	r21, Z+3	; 0x03
    5a66:	48 17       	cp	r20, r24
    5a68:	59 07       	cpc	r21, r25
    5a6a:	09 f0       	breq	.+2      	; 0x5a6e <TCPProcess+0x68>
    5a6c:	40 c0       	rjmp	.+128    	; 0x5aee <TCPProcess+0xe8>
				if(tcpSessionTable[i].desPort == HTONS((tcpHeader->srcPort))&&(tcpSessionTable[i].desIP == HTONL((ipHeader->srcIPAddr)))){
    5a6e:	88 81       	ld	r24, Y
    5a70:	99 81       	ldd	r25, Y+1	; 0x01
    5a72:	98 27       	eor	r25, r24
    5a74:	89 27       	eor	r24, r25
    5a76:	98 27       	eor	r25, r24
    5a78:	40 81       	ld	r20, Z
    5a7a:	51 81       	ldd	r21, Z+1	; 0x01
    5a7c:	48 17       	cp	r20, r24
    5a7e:	59 07       	cpc	r21, r25
    5a80:	b1 f5       	brne	.+108    	; 0x5aee <TCPProcess+0xe8>
    5a82:	d6 01       	movw	r26, r12
    5a84:	1c 96       	adiw	r26, 0x0c	; 12
    5a86:	4d 91       	ld	r20, X+
    5a88:	5d 91       	ld	r21, X+
    5a8a:	6d 91       	ld	r22, X+
    5a8c:	7c 91       	ld	r23, X
    5a8e:	1f 97       	sbiw	r26, 0x0f	; 15
    5a90:	67 2e       	mov	r6, r23
    5a92:	77 24       	eor	r7, r7
    5a94:	88 24       	eor	r8, r8
    5a96:	99 24       	eor	r9, r9
    5a98:	b4 2f       	mov	r27, r20
    5a9a:	aa 27       	eor	r26, r26
    5a9c:	99 27       	eor	r25, r25
    5a9e:	88 27       	eor	r24, r24
    5aa0:	68 2a       	or	r6, r24
    5aa2:	79 2a       	or	r7, r25
    5aa4:	8a 2a       	or	r8, r26
    5aa6:	9b 2a       	or	r9, r27
    5aa8:	db 01       	movw	r26, r22
    5aaa:	ca 01       	movw	r24, r20
    5aac:	80 70       	andi	r24, 0x00	; 0
    5aae:	90 70       	andi	r25, 0x00	; 0
    5ab0:	b0 70       	andi	r27, 0x00	; 0
    5ab2:	89 2f       	mov	r24, r25
    5ab4:	9a 2f       	mov	r25, r26
    5ab6:	ab 2f       	mov	r26, r27
    5ab8:	bb 27       	eor	r27, r27
    5aba:	68 2a       	or	r6, r24
    5abc:	79 2a       	or	r7, r25
    5abe:	8a 2a       	or	r8, r26
    5ac0:	9b 2a       	or	r9, r27
    5ac2:	40 70       	andi	r20, 0x00	; 0
    5ac4:	60 70       	andi	r22, 0x00	; 0
    5ac6:	70 70       	andi	r23, 0x00	; 0
    5ac8:	b6 2f       	mov	r27, r22
    5aca:	a5 2f       	mov	r26, r21
    5acc:	94 2f       	mov	r25, r20
    5ace:	88 27       	eor	r24, r24
    5ad0:	b4 01       	movw	r22, r8
    5ad2:	a3 01       	movw	r20, r6
    5ad4:	48 2b       	or	r20, r24
    5ad6:	59 2b       	or	r21, r25
    5ad8:	6a 2b       	or	r22, r26
    5ada:	7b 2b       	or	r23, r27
    5adc:	64 80       	ldd	r6, Z+4	; 0x04
    5ade:	75 80       	ldd	r7, Z+5	; 0x05
    5ae0:	86 80       	ldd	r8, Z+6	; 0x06
    5ae2:	97 80       	ldd	r9, Z+7	; 0x07
    5ae4:	64 16       	cp	r6, r20
    5ae6:	75 06       	cpc	r7, r21
    5ae8:	86 06       	cpc	r8, r22
    5aea:	97 06       	cpc	r9, r23
    5aec:	31 f0       	breq	.+12     	; 0x5afa <TCPProcess+0xf4>
	tcpHeaderLen = ((tcpHeader->Offset) & 0xF0) >> 2;
	//
	tcpData = (buffer+ipHeaderLen+tcpHeaderLen);
	dataLen = HTONS(ipHeader->Len) - (ipHeaderLen + tcpHeaderLen);
	//Tim kiem mot phien TCP co san cho goi nay
	for(i = 0; i < TCP_MAX_SESSION; i++){	//Check session table
    5aee:	1f 5f       	subi	r17, 0xFF	; 255
    5af0:	7f 96       	adiw	r30, 0x1f	; 31
    5af2:	18 30       	cpi	r17, 0x08	; 8
    5af4:	09 f0       	breq	.+2      	; 0x5af8 <TCPProcess+0xf2>
    5af6:	ac cf       	rjmp	.-168    	; 0x5a50 <TCPProcess+0x4a>
    5af8:	03 c0       	rjmp	.+6      	; 0x5b00 <TCPProcess+0xfa>
					break;	//Thoat khoi vong lap for, luc nay gia tri cua i chinh la chi so cua phien TCP tuong ung
				}
			}
		}
	}
	if(i == TCP_MAX_SESSION){	//Neu khong co 1 phien TCP dang ton tai cho goi nay
    5afa:	18 30       	cpi	r17, 0x08	; 8
    5afc:	09 f0       	breq	.+2      	; 0x5b00 <TCPProcess+0xfa>
    5afe:	69 c0       	rjmp	.+210    	; 0x5bd2 <TCPProcess+0x1cc>
    5b00:	e4 e6       	ldi	r30, 0x64	; 100
    5b02:	f6 e0       	ldi	r31, 0x06	; 6
	tcpHeaderLen = ((tcpHeader->Offset) & 0xF0) >> 2;
	//
	tcpData = (buffer+ipHeaderLen+tcpHeaderLen);
	dataLen = HTONS(ipHeader->Len) - (ipHeaderLen + tcpHeaderLen);
	//Tim kiem mot phien TCP co san cho goi nay
	for(i = 0; i < TCP_MAX_SESSION; i++){	//Check session table
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	90 e0       	ldi	r25, 0x00	; 0
					break;	//Thoat khoi vong lap for, luc nay gia tri cua i chinh la chi so cua phien TCP tuong ung
				}
			}
		}
	}
	if(i == TCP_MAX_SESSION){	//Neu khong co 1 phien TCP dang ton tai cho goi nay
    5b08:	18 2f       	mov	r17, r24
    5b0a:	9c 01       	movw	r18, r24
		//Tim 1 phien dang o trang thai LISTEN (doi ket noi) cho local port nay
		for(i=0; i < TCP_MAX_SESSION; i++){
			if(tcpSessionTable[i].sesState == TCP_STATE_LISTEN){
    5b0c:	46 85       	ldd	r20, Z+14	; 0x0e
    5b0e:	42 30       	cpi	r20, 0x02	; 2
    5b10:	09 f0       	breq	.+2      	; 0x5b14 <TCPProcess+0x10e>
    5b12:	55 c0       	rjmp	.+170    	; 0x5bbe <TCPProcess+0x1b8>
				if(tcpSessionTable[i].srcPort == HTONS((tcpHeader->desPort))){	//If matched local port
    5b14:	4a 81       	ldd	r20, Y+2	; 0x02
    5b16:	5b 81       	ldd	r21, Y+3	; 0x03
    5b18:	74 2f       	mov	r23, r20
    5b1a:	65 2f       	mov	r22, r21
    5b1c:	40 81       	ld	r20, Z
    5b1e:	51 81       	ldd	r21, Z+1	; 0x01
    5b20:	46 17       	cp	r20, r22
    5b22:	57 07       	cpc	r21, r23
    5b24:	09 f0       	breq	.+2      	; 0x5b28 <TCPProcess+0x122>
    5b26:	4b c0       	rjmp	.+150    	; 0x5bbe <TCPProcess+0x1b8>
					//Cap nhat remote port va remote IP
					tcpSessionTable[i].desPort = HTONS((tcpHeader->srcPort));
    5b28:	4f e1       	ldi	r20, 0x1F	; 31
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	24 9f       	mul	r18, r20
    5b2e:	c0 01       	movw	r24, r0
    5b30:	25 9f       	mul	r18, r21
    5b32:	90 0d       	add	r25, r0
    5b34:	34 9f       	mul	r19, r20
    5b36:	90 0d       	add	r25, r0
    5b38:	11 24       	eor	r1, r1
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	ee 59       	subi	r30, 0x9E	; 158
    5b3e:	f9 4f       	sbci	r31, 0xF9	; 249
    5b40:	88 81       	ld	r24, Y
    5b42:	99 81       	ldd	r25, Y+1	; 0x01
    5b44:	98 27       	eor	r25, r24
    5b46:	89 27       	eor	r24, r25
    5b48:	98 27       	eor	r25, r24
    5b4a:	91 83       	std	Z+1, r25	; 0x01
    5b4c:	80 83       	st	Z, r24
					tcpSessionTable[i].desIP = HTONL((ipHeader->srcIPAddr));
    5b4e:	d7 01       	movw	r26, r14
    5b50:	1c 96       	adiw	r26, 0x0c	; 12
    5b52:	2d 91       	ld	r18, X+
    5b54:	3d 91       	ld	r19, X+
    5b56:	4d 91       	ld	r20, X+
    5b58:	5c 91       	ld	r21, X
    5b5a:	1f 97       	sbiw	r26, 0x0f	; 15
    5b5c:	65 2e       	mov	r6, r21
    5b5e:	77 24       	eor	r7, r7
    5b60:	88 24       	eor	r8, r8
    5b62:	99 24       	eor	r9, r9
    5b64:	b2 2f       	mov	r27, r18
    5b66:	aa 27       	eor	r26, r26
    5b68:	99 27       	eor	r25, r25
    5b6a:	88 27       	eor	r24, r24
    5b6c:	68 2a       	or	r6, r24
    5b6e:	79 2a       	or	r7, r25
    5b70:	8a 2a       	or	r8, r26
    5b72:	9b 2a       	or	r9, r27
    5b74:	da 01       	movw	r26, r20
    5b76:	c9 01       	movw	r24, r18
    5b78:	80 70       	andi	r24, 0x00	; 0
    5b7a:	90 70       	andi	r25, 0x00	; 0
    5b7c:	b0 70       	andi	r27, 0x00	; 0
    5b7e:	89 2f       	mov	r24, r25
    5b80:	9a 2f       	mov	r25, r26
    5b82:	ab 2f       	mov	r26, r27
    5b84:	bb 27       	eor	r27, r27
    5b86:	68 2a       	or	r6, r24
    5b88:	79 2a       	or	r7, r25
    5b8a:	8a 2a       	or	r8, r26
    5b8c:	9b 2a       	or	r9, r27
    5b8e:	da 01       	movw	r26, r20
    5b90:	c9 01       	movw	r24, r18
    5b92:	80 70       	andi	r24, 0x00	; 0
    5b94:	a0 70       	andi	r26, 0x00	; 0
    5b96:	b0 70       	andi	r27, 0x00	; 0
    5b98:	ba 2f       	mov	r27, r26
    5b9a:	a9 2f       	mov	r26, r25
    5b9c:	98 2f       	mov	r25, r24
    5b9e:	88 27       	eor	r24, r24
    5ba0:	86 29       	or	r24, r6
    5ba2:	97 29       	or	r25, r7
    5ba4:	a8 29       	or	r26, r8
    5ba6:	b9 29       	or	r27, r9
    5ba8:	84 83       	std	Z+4, r24	; 0x04
    5baa:	95 83       	std	Z+5, r25	; 0x05
    5bac:	a6 83       	std	Z+6, r26	; 0x06
    5bae:	b7 83       	std	Z+7, r27	; 0x07
					//Dong thoi tao ra 1 session moi de cho ket noi khac den local port nay
					TCPCreateSession(tcpSessionTable[i].srcPort,tcpSessionTable[i].appDataIn);
    5bb0:	63 8d       	ldd	r22, Z+27	; 0x1b
    5bb2:	74 8d       	ldd	r23, Z+28	; 0x1c
    5bb4:	82 81       	ldd	r24, Z+2	; 0x02
    5bb6:	93 81       	ldd	r25, Z+3	; 0x03
    5bb8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <TCPCreateSession>
					break;
    5bbc:	07 c0       	rjmp	.+14     	; 0x5bcc <TCPProcess+0x1c6>
    5bbe:	1f 5f       	subi	r17, 0xFF	; 255
    5bc0:	01 96       	adiw	r24, 0x01	; 1
    5bc2:	7f 96       	adiw	r30, 0x1f	; 31
			}
		}
	}
	if(i == TCP_MAX_SESSION){	//Neu khong co 1 phien TCP dang ton tai cho goi nay
		//Tim 1 phien dang o trang thai LISTEN (doi ket noi) cho local port nay
		for(i=0; i < TCP_MAX_SESSION; i++){
    5bc4:	88 30       	cpi	r24, 0x08	; 8
    5bc6:	91 05       	cpc	r25, r1
    5bc8:	09 f0       	breq	.+2      	; 0x5bcc <TCPProcess+0x1c6>
    5bca:	9e cf       	rjmp	.-196    	; 0x5b08 <TCPProcess+0x102>
					break;
				}
			}
		}
	}
	if(i == TCP_MAX_SESSION){
    5bcc:	18 30       	cpi	r17, 0x08	; 8
    5bce:	09 f4       	brne	.+2      	; 0x5bd2 <TCPProcess+0x1cc>
    5bd0:	8a c5       	rjmp	.+2836   	; 0x66e6 <TCPProcess+0xce0>
		return;	//Neu khong co phien TCP nao danh cho goi nay thi thoat ra
	}
	//Bat dau xu ly giao thuc
	tcpSessionTable[i].timeOut = TCP_TIMEOUT;	//Reset lai gia tri Time out
    5bd2:	c1 2e       	mov	r12, r17
    5bd4:	dd 24       	eor	r13, r13
    5bd6:	2f e1       	ldi	r18, 0x1F	; 31
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	c2 9e       	mul	r12, r18
    5bdc:	c0 01       	movw	r24, r0
    5bde:	c3 9e       	mul	r12, r19
    5be0:	90 0d       	add	r25, r0
    5be2:	d2 9e       	mul	r13, r18
    5be4:	90 0d       	add	r25, r0
    5be6:	11 24       	eor	r1, r1
    5be8:	8e 59       	subi	r24, 0x9E	; 158
    5bea:	99 4f       	sbci	r25, 0xF9	; 249
    5bec:	2c e3       	ldi	r18, 0x3C	; 60
    5bee:	fc 01       	movw	r30, r24
    5bf0:	22 8f       	std	Z+26, r18	; 0x1a
	//Truong hop nhan duoc yeu cau reset lai ket noi
	if ((tcpHeader->Flags) & TCP_RST_FLAG){
    5bf2:	5d 85       	ldd	r21, Y+13	; 0x0d
    5bf4:	52 ff       	sbrs	r21, 2
    5bf6:	04 c0       	rjmp	.+8      	; 0x5c00 <TCPProcess+0x1fa>
		//Chap nhan dong ket noi
		TCPCloseSession(i);
    5bf8:	81 2f       	mov	r24, r17
    5bfa:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
		return;
    5bfe:	73 c5       	rjmp	.+2790   	; 0x66e6 <TCPProcess+0xce0>
	//Khoi tao cac co tro den Header IP va TCP
	ipHeader = (struct ntIPHeader*)(buffer);
	ipHeaderLen = ((ipHeader->verHdrLen) & 0x0F) << 2;
	//
	tcpHeader = (struct ntTCPHeader*)(buffer+ipHeaderLen);
	tcpHeaderLen = ((tcpHeader->Offset) & 0xF0) >> 2;
    5c00:	85 2d       	mov	r24, r5
    5c02:	86 95       	lsr	r24
    5c04:	86 95       	lsr	r24
    5c06:	8c 73       	andi	r24, 0x3C	; 60
	//
	tcpData = (buffer+ipHeaderLen+tcpHeaderLen);
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	a8 0e       	add	r10, r24
    5c0c:	b9 1e       	adc	r11, r25
    5c0e:	ae 0c       	add	r10, r14
    5c10:	bf 1c       	adc	r11, r15
	dataLen = HTONS(ipHeader->Len) - (ipHeaderLen + tcpHeaderLen);
    5c12:	72 2d       	mov	r23, r2
    5c14:	63 2d       	mov	r22, r3
    5c16:	80 0f       	add	r24, r16
    5c18:	91 1d       	adc	r25, r1
    5c1a:	68 1b       	sub	r22, r24
    5c1c:	79 0b       	sbc	r23, r25
		//Chap nhan dong ket noi
		TCPCloseSession(i);
		return;
	}
	//Kiem tra trang thai hien tai cua phien TCP
	switch (tcpSessionTable[i].sesState){
    5c1e:	2f e1       	ldi	r18, 0x1F	; 31
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	c2 9e       	mul	r12, r18
    5c24:	c0 01       	movw	r24, r0
    5c26:	c3 9e       	mul	r12, r19
    5c28:	90 0d       	add	r25, r0
    5c2a:	d2 9e       	mul	r13, r18
    5c2c:	90 0d       	add	r25, r0
    5c2e:	11 24       	eor	r1, r1
    5c30:	8e 59       	subi	r24, 0x9E	; 158
    5c32:	99 4f       	sbci	r25, 0xF9	; 249
    5c34:	dc 01       	movw	r26, r24
    5c36:	50 96       	adiw	r26, 0x10	; 16
    5c38:	8c 91       	ld	r24, X
    5c3a:	50 97       	sbiw	r26, 0x10	; 16
    5c3c:	86 30       	cpi	r24, 0x06	; 6
    5c3e:	09 f4       	brne	.+2      	; 0x5c42 <TCPProcess+0x23c>
    5c40:	85 c4       	rjmp	.+2314   	; 0x654c <TCPProcess+0xb46>
    5c42:	87 30       	cpi	r24, 0x07	; 7
    5c44:	80 f4       	brcc	.+32     	; 0x5c66 <TCPProcess+0x260>
    5c46:	83 30       	cpi	r24, 0x03	; 3
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <TCPProcess+0x246>
    5c4a:	ad c0       	rjmp	.+346    	; 0x5da6 <TCPProcess+0x3a0>
    5c4c:	84 30       	cpi	r24, 0x04	; 4
    5c4e:	20 f4       	brcc	.+8      	; 0x5c58 <TCPProcess+0x252>
    5c50:	82 30       	cpi	r24, 0x02	; 2
    5c52:	09 f0       	breq	.+2      	; 0x5c56 <TCPProcess+0x250>
    5c54:	2a c5       	rjmp	.+2644   	; 0x66aa <TCPProcess+0xca4>
    5c56:	14 c0       	rjmp	.+40     	; 0x5c80 <TCPProcess+0x27a>
    5c58:	84 30       	cpi	r24, 0x04	; 4
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <TCPProcess+0x258>
    5c5c:	f6 c0       	rjmp	.+492    	; 0x5e4a <TCPProcess+0x444>
    5c5e:	85 30       	cpi	r24, 0x05	; 5
    5c60:	09 f0       	breq	.+2      	; 0x5c64 <TCPProcess+0x25e>
    5c62:	23 c5       	rjmp	.+2630   	; 0x66aa <TCPProcess+0xca4>
    5c64:	a1 c3       	rjmp	.+1858   	; 0x63a8 <TCPProcess+0x9a2>
    5c66:	88 30       	cpi	r24, 0x08	; 8
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <TCPProcess+0x266>
    5c6a:	22 c5       	rjmp	.+2628   	; 0x66b0 <TCPProcess+0xcaa>
    5c6c:	88 30       	cpi	r24, 0x08	; 8
    5c6e:	08 f4       	brcc	.+2      	; 0x5c72 <TCPProcess+0x26c>
    5c70:	0e c5       	rjmp	.+2588   	; 0x668e <TCPProcess+0xc88>
    5c72:	89 30       	cpi	r24, 0x09	; 9
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <TCPProcess+0x272>
    5c76:	fa c2       	rjmp	.+1524   	; 0x626c <TCPProcess+0x866>
    5c78:	8a 30       	cpi	r24, 0x0A	; 10
    5c7a:	09 f0       	breq	.+2      	; 0x5c7e <TCPProcess+0x278>
    5c7c:	16 c5       	rjmp	.+2604   	; 0x66aa <TCPProcess+0xca4>
    5c7e:	9d c2       	rjmp	.+1338   	; 0x61ba <TCPProcess+0x7b4>
		//Neu la trang thai doi ket noi: TCP_STATE_LISTEN
		case(TCP_STATE_LISTEN):
			//Chi xu ly neu co SYN duoc set (yeu cau thiet lap ket noi)
			if ((tcpHeader->Flags) == TCP_SYN_FLAG){
    5c80:	52 30       	cpi	r21, 0x02	; 2
    5c82:	09 f0       	breq	.+2      	; 0x5c86 <TCPProcess+0x280>
    5c84:	15 c5       	rjmp	.+2602   	; 0x66b0 <TCPProcess+0xcaa>
				//Chuyen sang trang thai ke tiep la TCP_STATE_SYN_RECEIVED
				tcpSessionTable[i].sesState = TCP_STATE_SYN_RECEIVED;
    5c86:	0f 2e       	mov	r0, r31
    5c88:	ff e1       	ldi	r31, 0x1F	; 31
    5c8a:	2f 2e       	mov	r2, r31
    5c8c:	33 24       	eor	r3, r3
    5c8e:	f0 2d       	mov	r31, r0
    5c90:	c2 9c       	mul	r12, r2
    5c92:	c0 01       	movw	r24, r0
    5c94:	c3 9c       	mul	r12, r3
    5c96:	90 0d       	add	r25, r0
    5c98:	d2 9c       	mul	r13, r2
    5c9a:	90 0d       	add	r25, r0
    5c9c:	11 24       	eor	r1, r1
    5c9e:	0f 2e       	mov	r0, r31
    5ca0:	f2 e6       	ldi	r31, 0x62	; 98
    5ca2:	ef 2e       	mov	r14, r31
    5ca4:	f6 e0       	ldi	r31, 0x06	; 6
    5ca6:	ff 2e       	mov	r15, r31
    5ca8:	f0 2d       	mov	r31, r0
    5caa:	e8 0e       	add	r14, r24
    5cac:	f9 1e       	adc	r15, r25
    5cae:	83 e0       	ldi	r24, 0x03	; 3
    5cb0:	f7 01       	movw	r30, r14
    5cb2:	80 8b       	std	Z+16, r24	; 0x10
				//Khoi tao gia tri sequence
				tcpSessionTable[i].seqNumber = HTONL(TCPInitSequenceNumber());
    5cb4:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <TCPInitSequenceNumber>
    5cb8:	9b 01       	movw	r18, r22
    5cba:	ac 01       	movw	r20, r24
    5cbc:	69 2e       	mov	r6, r25
    5cbe:	77 24       	eor	r7, r7
    5cc0:	88 24       	eor	r8, r8
    5cc2:	99 24       	eor	r9, r9
    5cc4:	b6 2f       	mov	r27, r22
    5cc6:	aa 27       	eor	r26, r26
    5cc8:	99 27       	eor	r25, r25
    5cca:	88 27       	eor	r24, r24
    5ccc:	68 2a       	or	r6, r24
    5cce:	79 2a       	or	r7, r25
    5cd0:	8a 2a       	or	r8, r26
    5cd2:	9b 2a       	or	r9, r27
    5cd4:	da 01       	movw	r26, r20
    5cd6:	c9 01       	movw	r24, r18
    5cd8:	80 70       	andi	r24, 0x00	; 0
    5cda:	90 70       	andi	r25, 0x00	; 0
    5cdc:	b0 70       	andi	r27, 0x00	; 0
    5cde:	89 2f       	mov	r24, r25
    5ce0:	9a 2f       	mov	r25, r26
    5ce2:	ab 2f       	mov	r26, r27
    5ce4:	bb 27       	eor	r27, r27
    5ce6:	68 2a       	or	r6, r24
    5ce8:	79 2a       	or	r7, r25
    5cea:	8a 2a       	or	r8, r26
    5cec:	9b 2a       	or	r9, r27
    5cee:	da 01       	movw	r26, r20
    5cf0:	c9 01       	movw	r24, r18
    5cf2:	80 70       	andi	r24, 0x00	; 0
    5cf4:	a0 70       	andi	r26, 0x00	; 0
    5cf6:	b0 70       	andi	r27, 0x00	; 0
    5cf8:	ba 2f       	mov	r27, r26
    5cfa:	a9 2f       	mov	r26, r25
    5cfc:	98 2f       	mov	r25, r24
    5cfe:	88 27       	eor	r24, r24
    5d00:	86 29       	or	r24, r6
    5d02:	97 29       	or	r25, r7
    5d04:	a8 29       	or	r26, r8
    5d06:	b9 29       	or	r27, r9
    5d08:	f7 01       	movw	r30, r14
    5d0a:	80 87       	std	Z+8, r24	; 0x08
    5d0c:	91 87       	std	Z+9, r25	; 0x09
    5d0e:	a2 87       	std	Z+10, r26	; 0x0a
    5d10:	b3 87       	std	Z+11, r27	; 0x0b
				//Ack chinh la so tuan tu nhan duoc cong 1
				tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber))+1;
    5d12:	2c 81       	ldd	r18, Y+4	; 0x04
    5d14:	3d 81       	ldd	r19, Y+5	; 0x05
    5d16:	4e 81       	ldd	r20, Y+6	; 0x06
    5d18:	5f 81       	ldd	r21, Y+7	; 0x07
    5d1a:	65 2e       	mov	r6, r21
    5d1c:	77 24       	eor	r7, r7
    5d1e:	88 24       	eor	r8, r8
    5d20:	99 24       	eor	r9, r9
    5d22:	b2 2f       	mov	r27, r18
    5d24:	aa 27       	eor	r26, r26
    5d26:	99 27       	eor	r25, r25
    5d28:	88 27       	eor	r24, r24
    5d2a:	68 2a       	or	r6, r24
    5d2c:	79 2a       	or	r7, r25
    5d2e:	8a 2a       	or	r8, r26
    5d30:	9b 2a       	or	r9, r27
    5d32:	da 01       	movw	r26, r20
    5d34:	c9 01       	movw	r24, r18
    5d36:	80 70       	andi	r24, 0x00	; 0
    5d38:	90 70       	andi	r25, 0x00	; 0
    5d3a:	b0 70       	andi	r27, 0x00	; 0
    5d3c:	89 2f       	mov	r24, r25
    5d3e:	9a 2f       	mov	r25, r26
    5d40:	ab 2f       	mov	r26, r27
    5d42:	bb 27       	eor	r27, r27
    5d44:	68 2a       	or	r6, r24
    5d46:	79 2a       	or	r7, r25
    5d48:	8a 2a       	or	r8, r26
    5d4a:	9b 2a       	or	r9, r27
    5d4c:	da 01       	movw	r26, r20
    5d4e:	c9 01       	movw	r24, r18
    5d50:	80 70       	andi	r24, 0x00	; 0
    5d52:	a0 70       	andi	r26, 0x00	; 0
    5d54:	b0 70       	andi	r27, 0x00	; 0
    5d56:	ba 2f       	mov	r27, r26
    5d58:	a9 2f       	mov	r26, r25
    5d5a:	98 2f       	mov	r25, r24
    5d5c:	88 27       	eor	r24, r24
    5d5e:	86 29       	or	r24, r6
    5d60:	97 29       	or	r25, r7
    5d62:	a8 29       	or	r26, r8
    5d64:	b9 29       	or	r27, r9
    5d66:	01 96       	adiw	r24, 0x01	; 1
    5d68:	a1 1d       	adc	r26, r1
    5d6a:	b1 1d       	adc	r27, r1
    5d6c:	84 87       	std	Z+12, r24	; 0x0c
    5d6e:	95 87       	std	Z+13, r25	; 0x0d
    5d70:	a6 87       	std	Z+14, r26	; 0x0e
    5d72:	b7 87       	std	Z+15, r27	; 0x0f
				tcpSessionTable[i].desWin = HTONS((tcpHeader->Window));
    5d74:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d76:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d78:	98 27       	eor	r25, r24
    5d7a:	89 27       	eor	r24, r25
    5d7c:	98 27       	eor	r25, r24
    5d7e:	94 8b       	std	Z+20, r25	; 0x14
    5d80:	83 8b       	std	Z+19, r24	; 0x13
				//Goi tra xac nhan va co SYN (SYN & ACK)
				TCPPackedSend(&tcpSessionTable[i],(TCP_SYN_FLAG|TCP_ACK_FLAG),0,tcpData);
    5d82:	21 2f       	mov	r18, r17
    5d84:	30 e0       	ldi	r19, 0x00	; 0
    5d86:	22 9d       	mul	r18, r2
    5d88:	c0 01       	movw	r24, r0
    5d8a:	23 9d       	mul	r18, r3
    5d8c:	90 0d       	add	r25, r0
    5d8e:	32 9d       	mul	r19, r2
    5d90:	90 0d       	add	r25, r0
    5d92:	11 24       	eor	r1, r1
    5d94:	8e 59       	subi	r24, 0x9E	; 158
    5d96:	99 4f       	sbci	r25, 0xF9	; 249
    5d98:	62 e1       	ldi	r22, 0x12	; 18
    5d9a:	40 e0       	ldi	r20, 0x00	; 0
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
    5d9e:	95 01       	movw	r18, r10
    5da0:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    5da4:	85 c4       	rjmp	.+2314   	; 0x66b0 <TCPProcess+0xcaa>
			}
			break;
		//Neu la trang thai TCP_STATE_SYN_RECEIVED
		case(TCP_STATE_SYN_RECEIVED):
			//Neu co co ACK (cho ban tin SYN & ACK truoc do)
			if ((tcpHeader->Flags) == TCP_ACK_FLAG){
    5da6:	50 31       	cpi	r21, 0x10	; 16
    5da8:	09 f0       	breq	.+2      	; 0x5dac <TCPProcess+0x3a6>
    5daa:	82 c4       	rjmp	.+2308   	; 0x66b0 <TCPProcess+0xcaa>
				//Kiem tra ack trong goi tin den, neu dung thi thiet lap ket noi hoan tat
				if((tcpSessionTable[i].seqNumber) == HTONL((tcpHeader->ackNumber))){
    5dac:	88 85       	ldd	r24, Y+8	; 0x08
    5dae:	99 85       	ldd	r25, Y+9	; 0x09
    5db0:	aa 85       	ldd	r26, Y+10	; 0x0a
    5db2:	bb 85       	ldd	r27, Y+11	; 0x0b
    5db4:	2f e1       	ldi	r18, 0x1F	; 31
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	c2 9e       	mul	r12, r18
    5dba:	f0 01       	movw	r30, r0
    5dbc:	c3 9e       	mul	r12, r19
    5dbe:	f0 0d       	add	r31, r0
    5dc0:	d2 9e       	mul	r13, r18
    5dc2:	f0 0d       	add	r31, r0
    5dc4:	11 24       	eor	r1, r1
    5dc6:	ee 59       	subi	r30, 0x9E	; 158
    5dc8:	f9 4f       	sbci	r31, 0xF9	; 249
    5dca:	eb 2e       	mov	r14, r27
    5dcc:	ff 24       	eor	r15, r15
    5dce:	00 27       	eor	r16, r16
    5dd0:	11 27       	eor	r17, r17
    5dd2:	58 2f       	mov	r21, r24
    5dd4:	44 27       	eor	r20, r20
    5dd6:	33 27       	eor	r19, r19
    5dd8:	22 27       	eor	r18, r18
    5dda:	e2 2a       	or	r14, r18
    5ddc:	f3 2a       	or	r15, r19
    5dde:	04 2b       	or	r16, r20
    5de0:	15 2b       	or	r17, r21
    5de2:	9c 01       	movw	r18, r24
    5de4:	ad 01       	movw	r20, r26
    5de6:	20 70       	andi	r18, 0x00	; 0
    5de8:	30 70       	andi	r19, 0x00	; 0
    5dea:	50 70       	andi	r21, 0x00	; 0
    5dec:	23 2f       	mov	r18, r19
    5dee:	34 2f       	mov	r19, r20
    5df0:	45 2f       	mov	r20, r21
    5df2:	55 27       	eor	r21, r21
    5df4:	2e 29       	or	r18, r14
    5df6:	3f 29       	or	r19, r15
    5df8:	40 2b       	or	r20, r16
    5dfa:	51 2b       	or	r21, r17
    5dfc:	80 70       	andi	r24, 0x00	; 0
    5dfe:	a0 70       	andi	r26, 0x00	; 0
    5e00:	b0 70       	andi	r27, 0x00	; 0
    5e02:	ba 2f       	mov	r27, r26
    5e04:	a9 2f       	mov	r26, r25
    5e06:	98 2f       	mov	r25, r24
    5e08:	88 27       	eor	r24, r24
    5e0a:	28 2b       	or	r18, r24
    5e0c:	39 2b       	or	r19, r25
    5e0e:	4a 2b       	or	r20, r26
    5e10:	5b 2b       	or	r21, r27
    5e12:	80 85       	ldd	r24, Z+8	; 0x08
    5e14:	91 85       	ldd	r25, Z+9	; 0x09
    5e16:	a2 85       	ldd	r26, Z+10	; 0x0a
    5e18:	b3 85       	ldd	r27, Z+11	; 0x0b
    5e1a:	82 17       	cp	r24, r18
    5e1c:	93 07       	cpc	r25, r19
    5e1e:	a4 07       	cpc	r26, r20
    5e20:	b5 07       	cpc	r27, r21
    5e22:	09 f0       	breq	.+2      	; 0x5e26 <TCPProcess+0x420>
    5e24:	60 c4       	rjmp	.+2240   	; 0x66e6 <TCPProcess+0xce0>
					tcpSessionTable[i].sesState = TCP_STATE_ESTABLISHED;
    5e26:	f6 01       	movw	r30, r12
    5e28:	ee 0f       	add	r30, r30
    5e2a:	ff 1f       	adc	r31, r31
    5e2c:	e2 95       	swap	r30
    5e2e:	f2 95       	swap	r31
    5e30:	f0 7f       	andi	r31, 0xF0	; 240
    5e32:	fe 27       	eor	r31, r30
    5e34:	e0 7f       	andi	r30, 0xF0	; 240
    5e36:	fe 27       	eor	r31, r30
    5e38:	ec 19       	sub	r30, r12
    5e3a:	fd 09       	sbc	r31, r13
    5e3c:	ee 59       	subi	r30, 0x9E	; 158
    5e3e:	f9 4f       	sbci	r31, 0xF9	; 249
    5e40:	84 e0       	ldi	r24, 0x04	; 4
    5e42:	80 8b       	std	Z+16, r24	; 0x10
					//Goi tiep theo gui di se co co ACK
					tcpSessionTable[i].nextAck = 1;
    5e44:	81 e0       	ldi	r24, 0x01	; 1
    5e46:	81 8f       	std	Z+25, r24	; 0x19
    5e48:	33 c4       	rjmp	.+2150   	; 0x66b0 <TCPProcess+0xcaa>
			}
			break;
		//Truong hop ket noi da duoc thiet lap
		case(TCP_STATE_ESTABLISHED):
			//Neu nhan duoc yeu cau ket thuc ket noi tu client
			if ((tcpHeader->Flags) & TCP_FIN_FLAG){
    5e4a:	50 ff       	sbrs	r21, 0
    5e4c:	63 c0       	rjmp	.+198    	; 0x5f14 <TCPProcess+0x50e>
				//Chuyen sang trang thai ke tiep la trang thai cho ACK cuoi
				//Dung ra o day phai chuyen sang trang thai TCP_STATE_CLOSE_WAIT nhung khong can thiet
				//  vi o day ta co the dong ket noi ngay ma khong can cho gui xong du lieu
				tcpSessionTable[i].sesState = TCP_STATE_LAST_ACK;
    5e4e:	0f 2e       	mov	r0, r31
    5e50:	ff e1       	ldi	r31, 0x1F	; 31
    5e52:	ef 2e       	mov	r14, r31
    5e54:	ff 24       	eor	r15, r15
    5e56:	f0 2d       	mov	r31, r0
    5e58:	ce 9c       	mul	r12, r14
    5e5a:	f0 01       	movw	r30, r0
    5e5c:	cf 9c       	mul	r12, r15
    5e5e:	f0 0d       	add	r31, r0
    5e60:	de 9c       	mul	r13, r14
    5e62:	f0 0d       	add	r31, r0
    5e64:	11 24       	eor	r1, r1
    5e66:	ee 59       	subi	r30, 0x9E	; 158
    5e68:	f9 4f       	sbci	r31, 0xF9	; 249
    5e6a:	8a e0       	ldi	r24, 0x0A	; 10
    5e6c:	80 8b       	std	Z+16, r24	; 0x10
				//Cap nhat ack
				tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber)) + dataLen;
    5e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    5e70:	3d 81       	ldd	r19, Y+5	; 0x05
    5e72:	4e 81       	ldd	r20, Y+6	; 0x06
    5e74:	5f 81       	ldd	r21, Y+7	; 0x07
    5e76:	65 2e       	mov	r6, r21
    5e78:	77 24       	eor	r7, r7
    5e7a:	88 24       	eor	r8, r8
    5e7c:	99 24       	eor	r9, r9
    5e7e:	b2 2f       	mov	r27, r18
    5e80:	aa 27       	eor	r26, r26
    5e82:	99 27       	eor	r25, r25
    5e84:	88 27       	eor	r24, r24
    5e86:	68 2a       	or	r6, r24
    5e88:	79 2a       	or	r7, r25
    5e8a:	8a 2a       	or	r8, r26
    5e8c:	9b 2a       	or	r9, r27
    5e8e:	da 01       	movw	r26, r20
    5e90:	c9 01       	movw	r24, r18
    5e92:	80 70       	andi	r24, 0x00	; 0
    5e94:	90 70       	andi	r25, 0x00	; 0
    5e96:	b0 70       	andi	r27, 0x00	; 0
    5e98:	89 2f       	mov	r24, r25
    5e9a:	9a 2f       	mov	r25, r26
    5e9c:	ab 2f       	mov	r26, r27
    5e9e:	bb 27       	eor	r27, r27
    5ea0:	68 2a       	or	r6, r24
    5ea2:	79 2a       	or	r7, r25
    5ea4:	8a 2a       	or	r8, r26
    5ea6:	9b 2a       	or	r9, r27
    5ea8:	20 70       	andi	r18, 0x00	; 0
    5eaa:	40 70       	andi	r20, 0x00	; 0
    5eac:	50 70       	andi	r21, 0x00	; 0
    5eae:	b4 2f       	mov	r27, r20
    5eb0:	a3 2f       	mov	r26, r19
    5eb2:	92 2f       	mov	r25, r18
    5eb4:	88 27       	eor	r24, r24
    5eb6:	86 29       	or	r24, r6
    5eb8:	97 29       	or	r25, r7
    5eba:	a8 29       	or	r26, r8
    5ebc:	b9 29       	or	r27, r9
    5ebe:	01 96       	adiw	r24, 0x01	; 1
    5ec0:	a1 1d       	adc	r26, r1
    5ec2:	b1 1d       	adc	r27, r1
    5ec4:	9b 01       	movw	r18, r22
    5ec6:	40 e0       	ldi	r20, 0x00	; 0
    5ec8:	50 e0       	ldi	r21, 0x00	; 0
				tcpSessionTable[i].ackNumber++;	//Tang 1 cho co FIN
    5eca:	82 0f       	add	r24, r18
    5ecc:	93 1f       	adc	r25, r19
    5ece:	a4 1f       	adc	r26, r20
    5ed0:	b5 1f       	adc	r27, r21
    5ed2:	84 87       	std	Z+12, r24	; 0x0c
    5ed4:	95 87       	std	Z+13, r25	; 0x0d
    5ed6:	a6 87       	std	Z+14, r26	; 0x0e
    5ed8:	b7 87       	std	Z+15, r27	; 0x0f
				//Gui xac nhan ACK cho yeu cau dong ket noi dong thoi thong bao san sang dong ket noi
				TCPPackedSend(&tcpSessionTable[i],TCP_ACK_FLAG,0,tcpData);
    5eda:	81 2f       	mov	r24, r17
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	8e 9d       	mul	r24, r14
    5ee0:	e0 01       	movw	r28, r0
    5ee2:	8f 9d       	mul	r24, r15
    5ee4:	d0 0d       	add	r29, r0
    5ee6:	9e 9d       	mul	r25, r14
    5ee8:	d0 0d       	add	r29, r0
    5eea:	11 24       	eor	r1, r1
    5eec:	ce 59       	subi	r28, 0x9E	; 158
    5eee:	d9 4f       	sbci	r29, 0xF9	; 249
    5ef0:	ce 01       	movw	r24, r28
    5ef2:	60 e1       	ldi	r22, 0x10	; 16
    5ef4:	40 e0       	ldi	r20, 0x00	; 0
    5ef6:	50 e0       	ldi	r21, 0x00	; 0
    5ef8:	95 01       	movw	r18, r10
    5efa:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
				TCPPackedSend(&tcpSessionTable[i],(TCP_FIN_FLAG|TCP_ACK_FLAG),0,tcpData);
    5efe:	ce 01       	movw	r24, r28
    5f00:	61 e1       	ldi	r22, 0x11	; 17
    5f02:	40 e0       	ldi	r20, 0x00	; 0
    5f04:	50 e0       	ldi	r21, 0x00	; 0
    5f06:	95 01       	movw	r18, r10
    5f08:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
				//Dang le truyen o trang thai CLOSE_WAIT nhung ta thuc hien o day luon
				TCPCloseSession(i);
    5f0c:	81 2f       	mov	r24, r17
    5f0e:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
    5f12:	ce c3       	rjmp	.+1948   	; 0x66b0 <TCPProcess+0xcaa>
			//Neu khong (dang truyen du lieu)
			}else{
				//Kiem tra ACK tu remote host
				if((tcpHeader->Flags) & TCP_ACK_FLAG){	//Neu co co ACK thi kiem tra gia tri ACK
    5f14:	54 ff       	sbrs	r21, 4
    5f16:	7e c0       	rjmp	.+252    	; 0x6014 <TCPProcess+0x60e>
					tcpSessionTable[i].lastRxAck = HTONL((tcpHeader->ackNumber));
    5f18:	68 84       	ldd	r6, Y+8	; 0x08
    5f1a:	79 84       	ldd	r7, Y+9	; 0x09
    5f1c:	8a 84       	ldd	r8, Y+10	; 0x0a
    5f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f20:	2f e1       	ldi	r18, 0x1F	; 31
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	c2 9e       	mul	r12, r18
    5f26:	c0 01       	movw	r24, r0
    5f28:	c3 9e       	mul	r12, r19
    5f2a:	90 0d       	add	r25, r0
    5f2c:	d2 9e       	mul	r13, r18
    5f2e:	90 0d       	add	r25, r0
    5f30:	11 24       	eor	r1, r1
    5f32:	fc 01       	movw	r30, r24
    5f34:	ee 59       	subi	r30, 0x9E	; 158
    5f36:	f9 4f       	sbci	r31, 0xF9	; 249
    5f38:	29 2d       	mov	r18, r9
    5f3a:	33 27       	eor	r19, r19
    5f3c:	44 27       	eor	r20, r20
    5f3e:	55 27       	eor	r21, r21
    5f40:	b6 2d       	mov	r27, r6
    5f42:	aa 27       	eor	r26, r26
    5f44:	99 27       	eor	r25, r25
    5f46:	88 27       	eor	r24, r24
    5f48:	28 2b       	or	r18, r24
    5f4a:	39 2b       	or	r19, r25
    5f4c:	4a 2b       	or	r20, r26
    5f4e:	5b 2b       	or	r21, r27
    5f50:	d4 01       	movw	r26, r8
    5f52:	c3 01       	movw	r24, r6
    5f54:	80 70       	andi	r24, 0x00	; 0
    5f56:	90 70       	andi	r25, 0x00	; 0
    5f58:	b0 70       	andi	r27, 0x00	; 0
    5f5a:	89 2f       	mov	r24, r25
    5f5c:	9a 2f       	mov	r25, r26
    5f5e:	ab 2f       	mov	r26, r27
    5f60:	bb 27       	eor	r27, r27
    5f62:	28 2b       	or	r18, r24
    5f64:	39 2b       	or	r19, r25
    5f66:	4a 2b       	or	r20, r26
    5f68:	5b 2b       	or	r21, r27
    5f6a:	d4 01       	movw	r26, r8
    5f6c:	c3 01       	movw	r24, r6
    5f6e:	80 70       	andi	r24, 0x00	; 0
    5f70:	a0 70       	andi	r26, 0x00	; 0
    5f72:	b0 70       	andi	r27, 0x00	; 0
    5f74:	ba 2f       	mov	r27, r26
    5f76:	a9 2f       	mov	r26, r25
    5f78:	98 2f       	mov	r25, r24
    5f7a:	88 27       	eor	r24, r24
    5f7c:	82 2b       	or	r24, r18
    5f7e:	93 2b       	or	r25, r19
    5f80:	a4 2b       	or	r26, r20
    5f82:	b5 2b       	or	r27, r21
    5f84:	85 8b       	std	Z+21, r24	; 0x15
    5f86:	96 8b       	std	Z+22, r25	; 0x16
    5f88:	a7 8b       	std	Z+23, r26	; 0x17
    5f8a:	b0 8f       	std	Z+24, r27	; 0x18
					if ((tcpSessionTable[i].seqNumber) == HTONL((tcpHeader->ackNumber))){	//Dung ACK
    5f8c:	28 85       	ldd	r18, Y+8	; 0x08
    5f8e:	39 85       	ldd	r19, Y+9	; 0x09
    5f90:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f92:	5b 85       	ldd	r21, Y+11	; 0x0b
    5f94:	65 2e       	mov	r6, r21
    5f96:	77 24       	eor	r7, r7
    5f98:	88 24       	eor	r8, r8
    5f9a:	99 24       	eor	r9, r9
    5f9c:	b2 2f       	mov	r27, r18
    5f9e:	aa 27       	eor	r26, r26
    5fa0:	99 27       	eor	r25, r25
    5fa2:	88 27       	eor	r24, r24
    5fa4:	68 2a       	or	r6, r24
    5fa6:	79 2a       	or	r7, r25
    5fa8:	8a 2a       	or	r8, r26
    5faa:	9b 2a       	or	r9, r27
    5fac:	da 01       	movw	r26, r20
    5fae:	c9 01       	movw	r24, r18
    5fb0:	80 70       	andi	r24, 0x00	; 0
    5fb2:	90 70       	andi	r25, 0x00	; 0
    5fb4:	b0 70       	andi	r27, 0x00	; 0
    5fb6:	89 2f       	mov	r24, r25
    5fb8:	9a 2f       	mov	r25, r26
    5fba:	ab 2f       	mov	r26, r27
    5fbc:	bb 27       	eor	r27, r27
    5fbe:	68 2a       	or	r6, r24
    5fc0:	79 2a       	or	r7, r25
    5fc2:	8a 2a       	or	r8, r26
    5fc4:	9b 2a       	or	r9, r27
    5fc6:	da 01       	movw	r26, r20
    5fc8:	c9 01       	movw	r24, r18
    5fca:	80 70       	andi	r24, 0x00	; 0
    5fcc:	a0 70       	andi	r26, 0x00	; 0
    5fce:	b0 70       	andi	r27, 0x00	; 0
    5fd0:	ba 2f       	mov	r27, r26
    5fd2:	a9 2f       	mov	r26, r25
    5fd4:	98 2f       	mov	r25, r24
    5fd6:	88 27       	eor	r24, r24
    5fd8:	a4 01       	movw	r20, r8
    5fda:	93 01       	movw	r18, r6
    5fdc:	28 2b       	or	r18, r24
    5fde:	39 2b       	or	r19, r25
    5fe0:	4a 2b       	or	r20, r26
    5fe2:	5b 2b       	or	r21, r27
    5fe4:	80 85       	ldd	r24, Z+8	; 0x08
    5fe6:	91 85       	ldd	r25, Z+9	; 0x09
    5fe8:	a2 85       	ldd	r26, Z+10	; 0x0a
    5fea:	b3 85       	ldd	r27, Z+11	; 0x0b
    5fec:	82 17       	cp	r24, r18
    5fee:	93 07       	cpc	r25, r19
    5ff0:	a4 07       	cpc	r26, r20
    5ff2:	b5 07       	cpc	r27, r21
    5ff4:	79 f0       	breq	.+30     	; 0x6014 <TCPProcess+0x60e>
					}else{	//Phia ben kia khong nhan duoc du thong tin
						//Sua loi o day
						//Process error correction here
						//Not finish yet, temporary just ignore it and continue with next data
						//Chua thuc hien
						tcpSessionTable[i].seqNumber = HTONL((tcpHeader->ackNumber));
    5ff6:	8f e1       	ldi	r24, 0x1F	; 31
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	c8 9e       	mul	r12, r24
    5ffc:	f0 01       	movw	r30, r0
    5ffe:	c9 9e       	mul	r12, r25
    6000:	f0 0d       	add	r31, r0
    6002:	d8 9e       	mul	r13, r24
    6004:	f0 0d       	add	r31, r0
    6006:	11 24       	eor	r1, r1
    6008:	ee 59       	subi	r30, 0x9E	; 158
    600a:	f9 4f       	sbci	r31, 0xF9	; 249
    600c:	20 87       	std	Z+8, r18	; 0x08
    600e:	31 87       	std	Z+9, r19	; 0x09
    6010:	42 87       	std	Z+10, r20	; 0x0a
    6012:	53 87       	std	Z+11, r21	; 0x0b
					}
				}
				//--Ket thuc kiem tra ACK
				//Kiem tra sequence number
				tmp = HTONL((tcpHeader->seqNumber));
    6014:	2c 81       	ldd	r18, Y+4	; 0x04
    6016:	3d 81       	ldd	r19, Y+5	; 0x05
    6018:	4e 81       	ldd	r20, Y+6	; 0x06
    601a:	5f 81       	ldd	r21, Y+7	; 0x07
    601c:	65 2e       	mov	r6, r21
    601e:	77 24       	eor	r7, r7
    6020:	88 24       	eor	r8, r8
    6022:	99 24       	eor	r9, r9
    6024:	b2 2f       	mov	r27, r18
    6026:	aa 27       	eor	r26, r26
    6028:	99 27       	eor	r25, r25
    602a:	88 27       	eor	r24, r24
    602c:	68 2a       	or	r6, r24
    602e:	79 2a       	or	r7, r25
    6030:	8a 2a       	or	r8, r26
    6032:	9b 2a       	or	r9, r27
    6034:	da 01       	movw	r26, r20
    6036:	c9 01       	movw	r24, r18
    6038:	80 70       	andi	r24, 0x00	; 0
    603a:	90 70       	andi	r25, 0x00	; 0
    603c:	b0 70       	andi	r27, 0x00	; 0
    603e:	89 2f       	mov	r24, r25
    6040:	9a 2f       	mov	r25, r26
    6042:	ab 2f       	mov	r26, r27
    6044:	bb 27       	eor	r27, r27
    6046:	86 29       	or	r24, r6
    6048:	97 29       	or	r25, r7
    604a:	a8 29       	or	r26, r8
    604c:	b9 29       	or	r27, r9
    604e:	20 70       	andi	r18, 0x00	; 0
    6050:	40 70       	andi	r20, 0x00	; 0
    6052:	50 70       	andi	r21, 0x00	; 0
    6054:	66 24       	eor	r6, r6
    6056:	72 2e       	mov	r7, r18
    6058:	83 2e       	mov	r8, r19
    605a:	94 2e       	mov	r9, r20
    605c:	68 2a       	or	r6, r24
    605e:	79 2a       	or	r7, r25
    6060:	8a 2a       	or	r8, r26
    6062:	9b 2a       	or	r9, r27
				//Neu khong dung goi dang cho nhan
				if (tmp != tcpSessionTable[i].ackNumber){
    6064:	2f e1       	ldi	r18, 0x1F	; 31
    6066:	30 e0       	ldi	r19, 0x00	; 0
    6068:	c2 9e       	mul	r12, r18
    606a:	c0 01       	movw	r24, r0
    606c:	c3 9e       	mul	r12, r19
    606e:	90 0d       	add	r25, r0
    6070:	d2 9e       	mul	r13, r18
    6072:	90 0d       	add	r25, r0
    6074:	11 24       	eor	r1, r1
    6076:	8e 59       	subi	r24, 0x9E	; 158
    6078:	99 4f       	sbci	r25, 0xF9	; 249
    607a:	dc 01       	movw	r26, r24
    607c:	1c 96       	adiw	r26, 0x0c	; 12
    607e:	2d 91       	ld	r18, X+
    6080:	3d 91       	ld	r19, X+
    6082:	4d 91       	ld	r20, X+
    6084:	5c 91       	ld	r21, X
    6086:	1f 97       	sbiw	r26, 0x0f	; 15
    6088:	26 15       	cp	r18, r6
    608a:	37 05       	cpc	r19, r7
    608c:	48 05       	cpc	r20, r8
    608e:	59 05       	cpc	r21, r9
    6090:	09 f4       	brne	.+2      	; 0x6094 <TCPProcess+0x68e>
    6092:	4a c0       	rjmp	.+148    	; 0x6128 <TCPProcess+0x722>
					//there was an error, check what to do next:
					if (tmp < tcpSessionTable[i].ackNumber){
    6094:	62 16       	cp	r6, r18
    6096:	73 06       	cpc	r7, r19
    6098:	84 06       	cpc	r8, r20
    609a:	95 06       	cpc	r9, r21
    609c:	68 f5       	brcc	.+90     	; 0x60f8 <TCPProcess+0x6f2>
						//Neu dang doi du lieu bat dau tu byte thu n nhung ta nhan duoc doan du lieu bat dau tu (n-k)
						//Tinh phan du lieu thua (k = n - (n-k))
						tmp = (tcpSessionTable[i].ackNumber - tmp);
    609e:	da 01       	movw	r26, r20
    60a0:	c9 01       	movw	r24, r18
    60a2:	86 19       	sub	r24, r6
    60a4:	97 09       	sbc	r25, r7
    60a6:	a8 09       	sbc	r26, r8
    60a8:	b9 09       	sbc	r27, r9
    60aa:	3c 01       	movw	r6, r24
    60ac:	4d 01       	movw	r8, r26
						//Neu doan du lieu thua it hon du lieu nhan duoc
						if(tmp < dataLen){
    60ae:	cb 01       	movw	r24, r22
    60b0:	a0 e0       	ldi	r26, 0x00	; 0
    60b2:	b0 e0       	ldi	r27, 0x00	; 0
    60b4:	68 16       	cp	r6, r24
    60b6:	79 06       	cpc	r7, r25
    60b8:	8a 06       	cpc	r8, r26
    60ba:	9b 06       	cpc	r9, r27
    60bc:	28 f4       	brcc	.+10     	; 0x60c8 <TCPProcess+0x6c2>
							//Bo di phan du lieu thua, nhan phan con lai
							tcpData += tmp;
    60be:	a6 0c       	add	r10, r6
    60c0:	b7 1c       	adc	r11, r7
							dataLen = dataLen - tmp;
    60c2:	66 19       	sub	r22, r6
    60c4:	77 09       	sbc	r23, r7
    60c6:	30 c0       	rjmp	.+96     	; 0x6128 <TCPProcess+0x722>
						}else{	//Neu tat ca du lieu nhan duoc deu thua
							//Gui lai ACK, bo goi vua nhan duoc
							dataLen = 0;
							TCPPackedSend(&tcpSessionTable[i],(TCP_ACK_FLAG),0,tcpData);
    60c8:	81 2f       	mov	r24, r17
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9c 01       	movw	r18, r24
    60ce:	22 0f       	add	r18, r18
    60d0:	33 1f       	adc	r19, r19
    60d2:	22 95       	swap	r18
    60d4:	32 95       	swap	r19
    60d6:	30 7f       	andi	r19, 0xF0	; 240
    60d8:	32 27       	eor	r19, r18
    60da:	20 7f       	andi	r18, 0xF0	; 240
    60dc:	32 27       	eor	r19, r18
    60de:	d9 01       	movw	r26, r18
    60e0:	a8 1b       	sub	r26, r24
    60e2:	b9 0b       	sbc	r27, r25
    60e4:	cd 01       	movw	r24, r26
    60e6:	8e 59       	subi	r24, 0x9E	; 158
    60e8:	99 4f       	sbci	r25, 0xF9	; 249
    60ea:	60 e1       	ldi	r22, 0x10	; 16
    60ec:	40 e0       	ldi	r20, 0x00	; 0
    60ee:	50 e0       	ldi	r21, 0x00	; 0
    60f0:	95 01       	movw	r18, r10
    60f2:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
							return;
    60f6:	f7 c2       	rjmp	.+1518   	; 0x66e6 <TCPProcess+0xce0>
						}
					//Neu seq > ack (tuc la co 1 doan du lieu bi mat)
					}else{ //tmp > tcp....
						//Yeu cau gui lai
						TCPPackedSend(&tcpSessionTable[i],(TCP_ACK_FLAG),0,tcpData);
    60f8:	81 2f       	mov	r24, r17
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	9c 01       	movw	r18, r24
    60fe:	22 0f       	add	r18, r18
    6100:	33 1f       	adc	r19, r19
    6102:	22 95       	swap	r18
    6104:	32 95       	swap	r19
    6106:	30 7f       	andi	r19, 0xF0	; 240
    6108:	32 27       	eor	r19, r18
    610a:	20 7f       	andi	r18, 0xF0	; 240
    610c:	32 27       	eor	r19, r18
    610e:	f9 01       	movw	r30, r18
    6110:	e8 1b       	sub	r30, r24
    6112:	f9 0b       	sbc	r31, r25
    6114:	cf 01       	movw	r24, r30
    6116:	8e 59       	subi	r24, 0x9E	; 158
    6118:	99 4f       	sbci	r25, 0xF9	; 249
    611a:	60 e1       	ldi	r22, 0x10	; 16
    611c:	40 e0       	ldi	r20, 0x00	; 0
    611e:	50 e0       	ldi	r21, 0x00	; 0
    6120:	95 01       	movw	r18, r10
    6122:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
						return;
    6126:	df c2       	rjmp	.+1470   	; 0x66e6 <TCPProcess+0xce0>
				}
				//Neu thuc thi den day nghia la sequence number == ack number (chinh xac)
				//--Ket thuc kiem tra so tuan tu
				//Kiem tra chieu dai buffer de chac chan la chieu dai du lieu nhan duoc khong qua buffer
				//
				if (tcpData > (buffer + ETHERNET_BUFFER_SIZE))
    6128:	c7 01       	movw	r24, r14
    612a:	82 5e       	subi	r24, 0xE2	; 226
    612c:	9b 4f       	sbci	r25, 0xFB	; 251
    612e:	ec 01       	movw	r28, r24
    6130:	a8 16       	cp	r10, r24
    6132:	b9 06       	cpc	r11, r25
    6134:	08 f4       	brcc	.+2      	; 0x6138 <TCPProcess+0x732>
    6136:	e5 01       	movw	r28, r10
					tcpData = (buffer + ETHERNET_BUFFER_SIZE);
				if ((tcpData + dataLen) > buffer + ETHERNET_BUFFER_SIZE){
    6138:	fe 01       	movw	r30, r28
    613a:	e6 0f       	add	r30, r22
    613c:	f7 1f       	adc	r31, r23
    613e:	8e 17       	cp	r24, r30
    6140:	9f 07       	cpc	r25, r31
    6142:	18 f4       	brcc	.+6      	; 0x614a <TCPProcess+0x744>
					dataLen = (buffer + ETHERNET_BUFFER_SIZE) - tcpData;				
    6144:	bc 01       	movw	r22, r24
    6146:	6c 1b       	sub	r22, r28
    6148:	7d 0b       	sbc	r23, r29
				}
				//
				//Cap nhat ack cho lan nhan ke tiep
				tcpSessionTable[i].ackNumber = tcpSessionTable[i].ackNumber + dataLen;
    614a:	8f e1       	ldi	r24, 0x1F	; 31
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	c8 9e       	mul	r12, r24
    6150:	f0 01       	movw	r30, r0
    6152:	c9 9e       	mul	r12, r25
    6154:	f0 0d       	add	r31, r0
    6156:	d8 9e       	mul	r13, r24
    6158:	f0 0d       	add	r31, r0
    615a:	11 24       	eor	r1, r1
    615c:	ee 59       	subi	r30, 0x9E	; 158
    615e:	f9 4f       	sbci	r31, 0xF9	; 249
    6160:	cb 01       	movw	r24, r22
    6162:	a0 e0       	ldi	r26, 0x00	; 0
    6164:	b0 e0       	ldi	r27, 0x00	; 0
    6166:	82 0f       	add	r24, r18
    6168:	93 1f       	adc	r25, r19
    616a:	a4 1f       	adc	r26, r20
    616c:	b5 1f       	adc	r27, r21
    616e:	84 87       	std	Z+12, r24	; 0x0c
    6170:	95 87       	std	Z+13, r25	; 0x0d
    6172:	a6 87       	std	Z+14, r26	; 0x0e
    6174:	b7 87       	std	Z+15, r27	; 0x0f
				//Goi tiep theo gui di se co co ACK
				tcpSessionTable[i].nextAck = 1;
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	81 8f       	std	Z+25, r24	; 0x19
				//Goi ham xu ly lop ung dung
				if(dataLen != 0){
    617a:	61 15       	cp	r22, r1
    617c:	71 05       	cpc	r23, r1
    617e:	09 f4       	brne	.+2      	; 0x6182 <TCPProcess+0x77c>
    6180:	97 c2       	rjmp	.+1326   	; 0x66b0 <TCPProcess+0xcaa>
					(tcpSessionTable[i].appDataIn)(tcpData, dataLen,&tcpSessionTable[i]);
    6182:	8f e1       	ldi	r24, 0x1F	; 31
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	c8 9e       	mul	r12, r24
    6188:	f0 01       	movw	r30, r0
    618a:	c9 9e       	mul	r12, r25
    618c:	f0 0d       	add	r31, r0
    618e:	d8 9e       	mul	r13, r24
    6190:	f0 0d       	add	r31, r0
    6192:	11 24       	eor	r1, r1
    6194:	ee 59       	subi	r30, 0x9E	; 158
    6196:	f9 4f       	sbci	r31, 0xF9	; 249
    6198:	21 2f       	mov	r18, r17
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	28 9f       	mul	r18, r24
    619e:	a0 01       	movw	r20, r0
    61a0:	29 9f       	mul	r18, r25
    61a2:	50 0d       	add	r21, r0
    61a4:	38 9f       	mul	r19, r24
    61a6:	50 0d       	add	r21, r0
    61a8:	11 24       	eor	r1, r1
    61aa:	4e 59       	subi	r20, 0x9E	; 158
    61ac:	59 4f       	sbci	r21, 0xF9	; 249
    61ae:	03 8c       	ldd	r0, Z+27	; 0x1b
    61b0:	f4 8d       	ldd	r31, Z+28	; 0x1c
    61b2:	e0 2d       	mov	r30, r0
    61b4:	ce 01       	movw	r24, r28
    61b6:	09 95       	icall
    61b8:	7b c2       	rjmp	.+1270   	; 0x66b0 <TCPProcess+0xcaa>
			//--Ket thuc xu ly truong hop dang truyen du lieu
			break;
		//Neu la trang thai doi LAST_ACK (2 phia deu san sang dong ket noi, dang doi xac nhan ack cuoi cung)
		case(TCP_STATE_LAST_ACK):
			//socket is closed
			tmp = HTONL((tcpHeader->seqNumber));
    61ba:	8c 81       	ldd	r24, Y+4	; 0x04
    61bc:	9d 81       	ldd	r25, Y+5	; 0x05
    61be:	ae 81       	ldd	r26, Y+6	; 0x06
    61c0:	bf 81       	ldd	r27, Y+7	; 0x07
			//Kiem tra ACK, neu dung ACK
			if (tmp == tcpSessionTable[i].seqNumber + 1){
    61c2:	2f e1       	ldi	r18, 0x1F	; 31
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	c2 9e       	mul	r12, r18
    61c8:	f0 01       	movw	r30, r0
    61ca:	c3 9e       	mul	r12, r19
    61cc:	f0 0d       	add	r31, r0
    61ce:	d2 9e       	mul	r13, r18
    61d0:	f0 0d       	add	r31, r0
    61d2:	11 24       	eor	r1, r1
    61d4:	ee 59       	subi	r30, 0x9E	; 158
    61d6:	f9 4f       	sbci	r31, 0xF9	; 249
    61d8:	20 84       	ldd	r2, Z+8	; 0x08
    61da:	31 84       	ldd	r3, Z+9	; 0x09
    61dc:	42 84       	ldd	r4, Z+10	; 0x0a
    61de:	53 84       	ldd	r5, Z+11	; 0x0b
    61e0:	08 94       	sec
    61e2:	21 1c       	adc	r2, r1
    61e4:	31 1c       	adc	r3, r1
    61e6:	41 1c       	adc	r4, r1
    61e8:	51 1c       	adc	r5, r1
			//--Ket thuc xu ly truong hop dang truyen du lieu
			break;
		//Neu la trang thai doi LAST_ACK (2 phia deu san sang dong ket noi, dang doi xac nhan ack cuoi cung)
		case(TCP_STATE_LAST_ACK):
			//socket is closed
			tmp = HTONL((tcpHeader->seqNumber));
    61ea:	6b 2e       	mov	r6, r27
    61ec:	77 24       	eor	r7, r7
    61ee:	88 24       	eor	r8, r8
    61f0:	99 24       	eor	r9, r9
    61f2:	58 2f       	mov	r21, r24
    61f4:	44 27       	eor	r20, r20
    61f6:	33 27       	eor	r19, r19
    61f8:	22 27       	eor	r18, r18
    61fa:	62 2a       	or	r6, r18
    61fc:	73 2a       	or	r7, r19
    61fe:	84 2a       	or	r8, r20
    6200:	95 2a       	or	r9, r21
    6202:	9c 01       	movw	r18, r24
    6204:	ad 01       	movw	r20, r26
    6206:	20 70       	andi	r18, 0x00	; 0
    6208:	30 70       	andi	r19, 0x00	; 0
    620a:	50 70       	andi	r21, 0x00	; 0
    620c:	23 2f       	mov	r18, r19
    620e:	34 2f       	mov	r19, r20
    6210:	45 2f       	mov	r20, r21
    6212:	55 27       	eor	r21, r21
    6214:	26 29       	or	r18, r6
    6216:	37 29       	or	r19, r7
    6218:	48 29       	or	r20, r8
    621a:	59 29       	or	r21, r9
    621c:	80 70       	andi	r24, 0x00	; 0
    621e:	a0 70       	andi	r26, 0x00	; 0
    6220:	b0 70       	andi	r27, 0x00	; 0
    6222:	ba 2f       	mov	r27, r26
    6224:	a9 2f       	mov	r26, r25
    6226:	98 2f       	mov	r25, r24
    6228:	88 27       	eor	r24, r24
    622a:	28 2b       	or	r18, r24
    622c:	39 2b       	or	r19, r25
    622e:	4a 2b       	or	r20, r26
    6230:	5b 2b       	or	r21, r27
			//Kiem tra ACK, neu dung ACK
			if (tmp == tcpSessionTable[i].seqNumber + 1){
    6232:	22 16       	cp	r2, r18
    6234:	33 06       	cpc	r3, r19
    6236:	44 06       	cpc	r4, r20
    6238:	55 06       	cpc	r5, r21
    623a:	21 f4       	brne	.+8      	; 0x6244 <TCPProcess+0x83e>
				TCPCloseSession(i);
    623c:	81 2f       	mov	r24, r17
    623e:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
    6242:	36 c2       	rjmp	.+1132   	; 0x66b0 <TCPProcess+0xcaa>
			}else{
				//Gui lai co FIN & ACK
				TCPPackedSend(&tcpSessionTable[i], (TCP_FIN_FLAG|TCP_ACK_FLAG), 0, tcpData);
    6244:	41 2f       	mov	r20, r17
    6246:	50 e0       	ldi	r21, 0x00	; 0
    6248:	2f e1       	ldi	r18, 0x1F	; 31
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	42 9f       	mul	r20, r18
    624e:	c0 01       	movw	r24, r0
    6250:	43 9f       	mul	r20, r19
    6252:	90 0d       	add	r25, r0
    6254:	52 9f       	mul	r21, r18
    6256:	90 0d       	add	r25, r0
    6258:	11 24       	eor	r1, r1
    625a:	8e 59       	subi	r24, 0x9E	; 158
    625c:	99 4f       	sbci	r25, 0xF9	; 249
    625e:	61 e1       	ldi	r22, 0x11	; 17
    6260:	40 e0       	ldi	r20, 0x00	; 0
    6262:	50 e0       	ldi	r21, 0x00	; 0
    6264:	95 01       	movw	r18, r10
    6266:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    626a:	22 c2       	rjmp	.+1092   	; 0x66b0 <TCPProcess+0xcaa>

		//Truong hop ngat ket noi thu dong, da nhan co FIN tu remote host va xac nhan
		case(TCP_STATE_CLOSE_WAIT):
			//Truong hop nay se khong xay ra vi o tren ta chuyen truc tiep
			//  sang LAST_ACK khi nhan duoc yeu cau dong ket noi
			tcpSessionTable[i].sesState = TCP_STATE_LAST_ACK;
    626c:	8f e1       	ldi	r24, 0x1F	; 31
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	c8 9e       	mul	r12, r24
    6272:	f0 01       	movw	r30, r0
    6274:	c9 9e       	mul	r12, r25
    6276:	f0 0d       	add	r31, r0
    6278:	d8 9e       	mul	r13, r24
    627a:	f0 0d       	add	r31, r0
    627c:	11 24       	eor	r1, r1
    627e:	ee 59       	subi	r30, 0x9E	; 158
    6280:	f9 4f       	sbci	r31, 0xF9	; 249
    6282:	8a e0       	ldi	r24, 0x0A	; 10
    6284:	80 8b       	std	Z+16, r24	; 0x10
			if(dataLen){
    6286:	61 15       	cp	r22, r1
    6288:	71 05       	cpc	r23, r1
    628a:	09 f4       	brne	.+2      	; 0x628e <TCPProcess+0x888>
    628c:	3f c0       	rjmp	.+126    	; 0x630c <TCPProcess+0x906>
				tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber)) + dataLen;
    628e:	8c 81       	ldd	r24, Y+4	; 0x04
    6290:	9d 81       	ldd	r25, Y+5	; 0x05
    6292:	ae 81       	ldd	r26, Y+6	; 0x06
    6294:	bf 81       	ldd	r27, Y+7	; 0x07
    6296:	2f e1       	ldi	r18, 0x1F	; 31
    6298:	30 e0       	ldi	r19, 0x00	; 0
    629a:	c2 9e       	mul	r12, r18
    629c:	f0 01       	movw	r30, r0
    629e:	c3 9e       	mul	r12, r19
    62a0:	f0 0d       	add	r31, r0
    62a2:	d2 9e       	mul	r13, r18
    62a4:	f0 0d       	add	r31, r0
    62a6:	11 24       	eor	r1, r1
    62a8:	ee 59       	subi	r30, 0x9E	; 158
    62aa:	f9 4f       	sbci	r31, 0xF9	; 249
    62ac:	1b 01       	movw	r2, r22
    62ae:	44 24       	eor	r4, r4
    62b0:	55 24       	eor	r5, r5
    62b2:	6b 2e       	mov	r6, r27
    62b4:	77 24       	eor	r7, r7
    62b6:	88 24       	eor	r8, r8
    62b8:	99 24       	eor	r9, r9
    62ba:	58 2f       	mov	r21, r24
    62bc:	44 27       	eor	r20, r20
    62be:	33 27       	eor	r19, r19
    62c0:	22 27       	eor	r18, r18
    62c2:	62 2a       	or	r6, r18
    62c4:	73 2a       	or	r7, r19
    62c6:	84 2a       	or	r8, r20
    62c8:	95 2a       	or	r9, r21
    62ca:	9c 01       	movw	r18, r24
    62cc:	ad 01       	movw	r20, r26
    62ce:	20 70       	andi	r18, 0x00	; 0
    62d0:	30 70       	andi	r19, 0x00	; 0
    62d2:	50 70       	andi	r21, 0x00	; 0
    62d4:	23 2f       	mov	r18, r19
    62d6:	34 2f       	mov	r19, r20
    62d8:	45 2f       	mov	r20, r21
    62da:	55 27       	eor	r21, r21
    62dc:	26 29       	or	r18, r6
    62de:	37 29       	or	r19, r7
    62e0:	48 29       	or	r20, r8
    62e2:	59 29       	or	r21, r9
    62e4:	80 70       	andi	r24, 0x00	; 0
    62e6:	a0 70       	andi	r26, 0x00	; 0
    62e8:	b0 70       	andi	r27, 0x00	; 0
    62ea:	ba 2f       	mov	r27, r26
    62ec:	a9 2f       	mov	r26, r25
    62ee:	98 2f       	mov	r25, r24
    62f0:	88 27       	eor	r24, r24
    62f2:	28 2b       	or	r18, r24
    62f4:	39 2b       	or	r19, r25
    62f6:	4a 2b       	or	r20, r26
    62f8:	5b 2b       	or	r21, r27
    62fa:	22 0d       	add	r18, r2
    62fc:	33 1d       	adc	r19, r3
    62fe:	44 1d       	adc	r20, r4
    6300:	55 1d       	adc	r21, r5
    6302:	24 87       	std	Z+12, r18	; 0x0c
    6304:	35 87       	std	Z+13, r19	; 0x0d
    6306:	46 87       	std	Z+14, r20	; 0x0e
    6308:	57 87       	std	Z+15, r21	; 0x0f
    630a:	3a c0       	rjmp	.+116    	; 0x6380 <TCPProcess+0x97a>
			}else{	//Neu dataLen == 0 thi cung tang so tuan tu len 1
				tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber))+1;
    630c:	8c 81       	ldd	r24, Y+4	; 0x04
    630e:	9d 81       	ldd	r25, Y+5	; 0x05
    6310:	ae 81       	ldd	r26, Y+6	; 0x06
    6312:	bf 81       	ldd	r27, Y+7	; 0x07
    6314:	2f e1       	ldi	r18, 0x1F	; 31
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	c2 9e       	mul	r12, r18
    631a:	f0 01       	movw	r30, r0
    631c:	c3 9e       	mul	r12, r19
    631e:	f0 0d       	add	r31, r0
    6320:	d2 9e       	mul	r13, r18
    6322:	f0 0d       	add	r31, r0
    6324:	11 24       	eor	r1, r1
    6326:	ee 59       	subi	r30, 0x9E	; 158
    6328:	f9 4f       	sbci	r31, 0xF9	; 249
    632a:	6b 2e       	mov	r6, r27
    632c:	77 24       	eor	r7, r7
    632e:	88 24       	eor	r8, r8
    6330:	99 24       	eor	r9, r9
    6332:	58 2f       	mov	r21, r24
    6334:	44 27       	eor	r20, r20
    6336:	33 27       	eor	r19, r19
    6338:	22 27       	eor	r18, r18
    633a:	62 2a       	or	r6, r18
    633c:	73 2a       	or	r7, r19
    633e:	84 2a       	or	r8, r20
    6340:	95 2a       	or	r9, r21
    6342:	9c 01       	movw	r18, r24
    6344:	ad 01       	movw	r20, r26
    6346:	20 70       	andi	r18, 0x00	; 0
    6348:	30 70       	andi	r19, 0x00	; 0
    634a:	50 70       	andi	r21, 0x00	; 0
    634c:	23 2f       	mov	r18, r19
    634e:	34 2f       	mov	r19, r20
    6350:	45 2f       	mov	r20, r21
    6352:	55 27       	eor	r21, r21
    6354:	26 29       	or	r18, r6
    6356:	37 29       	or	r19, r7
    6358:	48 29       	or	r20, r8
    635a:	59 29       	or	r21, r9
    635c:	80 70       	andi	r24, 0x00	; 0
    635e:	a0 70       	andi	r26, 0x00	; 0
    6360:	b0 70       	andi	r27, 0x00	; 0
    6362:	ba 2f       	mov	r27, r26
    6364:	a9 2f       	mov	r26, r25
    6366:	98 2f       	mov	r25, r24
    6368:	88 27       	eor	r24, r24
    636a:	82 2b       	or	r24, r18
    636c:	93 2b       	or	r25, r19
    636e:	a4 2b       	or	r26, r20
    6370:	b5 2b       	or	r27, r21
    6372:	01 96       	adiw	r24, 0x01	; 1
    6374:	a1 1d       	adc	r26, r1
    6376:	b1 1d       	adc	r27, r1
    6378:	84 87       	std	Z+12, r24	; 0x0c
    637a:	95 87       	std	Z+13, r25	; 0x0d
    637c:	a6 87       	std	Z+14, r26	; 0x0e
    637e:	b7 87       	std	Z+15, r27	; 0x0f
			}
			//tcpSessionTable[i].seqNumber = HTONL((tcpHeader->ackNumber));
			TCPPackedSend(&tcpSessionTable[i], (TCP_FIN_FLAG|TCP_ACK_FLAG), 0, tcpData);
    6380:	41 2f       	mov	r20, r17
    6382:	50 e0       	ldi	r21, 0x00	; 0
    6384:	2f e1       	ldi	r18, 0x1F	; 31
    6386:	30 e0       	ldi	r19, 0x00	; 0
    6388:	42 9f       	mul	r20, r18
    638a:	c0 01       	movw	r24, r0
    638c:	43 9f       	mul	r20, r19
    638e:	90 0d       	add	r25, r0
    6390:	52 9f       	mul	r21, r18
    6392:	90 0d       	add	r25, r0
    6394:	11 24       	eor	r1, r1
    6396:	8e 59       	subi	r24, 0x9E	; 158
    6398:	99 4f       	sbci	r25, 0xF9	; 249
    639a:	61 e1       	ldi	r22, 0x11	; 17
    639c:	40 e0       	ldi	r20, 0x00	; 0
    639e:	50 e0       	ldi	r21, 0x00	; 0
    63a0:	95 01       	movw	r18, r10
    63a2:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
			break;
    63a6:	84 c1       	rjmp	.+776    	; 0x66b0 <TCPProcess+0xcaa>
		//Truong hop dang o trang thai FIN WAIT 1 (da truyen du lieu xong,
		//  san sang dong ket noi va da gui di co FIN va dang cho ACK)
		case(TCP_STATE_FIN_WAIT1):
			//if we receive FIN
			tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber))+1;
    63a8:	8c 81       	ldd	r24, Y+4	; 0x04
    63aa:	9d 81       	ldd	r25, Y+5	; 0x05
    63ac:	ae 81       	ldd	r26, Y+6	; 0x06
    63ae:	bf 81       	ldd	r27, Y+7	; 0x07
    63b0:	2f e1       	ldi	r18, 0x1F	; 31
    63b2:	30 e0       	ldi	r19, 0x00	; 0
    63b4:	c2 9e       	mul	r12, r18
    63b6:	f0 01       	movw	r30, r0
    63b8:	c3 9e       	mul	r12, r19
    63ba:	f0 0d       	add	r31, r0
    63bc:	d2 9e       	mul	r13, r18
    63be:	f0 0d       	add	r31, r0
    63c0:	11 24       	eor	r1, r1
    63c2:	ee 59       	subi	r30, 0x9E	; 158
    63c4:	f9 4f       	sbci	r31, 0xF9	; 249
    63c6:	6b 2e       	mov	r6, r27
    63c8:	77 24       	eor	r7, r7
    63ca:	88 24       	eor	r8, r8
    63cc:	99 24       	eor	r9, r9
    63ce:	58 2f       	mov	r21, r24
    63d0:	44 27       	eor	r20, r20
    63d2:	33 27       	eor	r19, r19
    63d4:	22 27       	eor	r18, r18
    63d6:	62 2a       	or	r6, r18
    63d8:	73 2a       	or	r7, r19
    63da:	84 2a       	or	r8, r20
    63dc:	95 2a       	or	r9, r21
    63de:	9c 01       	movw	r18, r24
    63e0:	ad 01       	movw	r20, r26
    63e2:	20 70       	andi	r18, 0x00	; 0
    63e4:	30 70       	andi	r19, 0x00	; 0
    63e6:	50 70       	andi	r21, 0x00	; 0
    63e8:	23 2f       	mov	r18, r19
    63ea:	34 2f       	mov	r19, r20
    63ec:	45 2f       	mov	r20, r21
    63ee:	55 27       	eor	r21, r21
    63f0:	26 29       	or	r18, r6
    63f2:	37 29       	or	r19, r7
    63f4:	48 29       	or	r20, r8
    63f6:	59 29       	or	r21, r9
    63f8:	80 70       	andi	r24, 0x00	; 0
    63fa:	a0 70       	andi	r26, 0x00	; 0
    63fc:	b0 70       	andi	r27, 0x00	; 0
    63fe:	ba 2f       	mov	r27, r26
    6400:	a9 2f       	mov	r26, r25
    6402:	98 2f       	mov	r25, r24
    6404:	88 27       	eor	r24, r24
    6406:	28 2b       	or	r18, r24
    6408:	39 2b       	or	r19, r25
    640a:	4a 2b       	or	r20, r26
    640c:	5b 2b       	or	r21, r27
    640e:	2f 5f       	subi	r18, 0xFF	; 255
    6410:	3f 4f       	sbci	r19, 0xFF	; 255
    6412:	4f 4f       	sbci	r20, 0xFF	; 255
    6414:	5f 4f       	sbci	r21, 0xFF	; 255
    6416:	24 87       	std	Z+12, r18	; 0x0c
    6418:	35 87       	std	Z+13, r19	; 0x0d
    641a:	46 87       	std	Z+14, r20	; 0x0e
    641c:	57 87       	std	Z+15, r21	; 0x0f
			if (tcpHeader->Flags == TCP_FIN_FLAG){	//Neu chi nhan duoc co FIN
    641e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6420:	81 30       	cpi	r24, 0x01	; 1
    6422:	f9 f4       	brne	.+62     	; 0x6462 <TCPProcess+0xa5c>
				//Chuyen sang trang thai CLOSING va gui ACK
				tcpSessionTable[i].sesState = TCP_STATE_CLOSING;
    6424:	2f e1       	ldi	r18, 0x1F	; 31
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	c2 9e       	mul	r12, r18
    642a:	f0 01       	movw	r30, r0
    642c:	c3 9e       	mul	r12, r19
    642e:	f0 0d       	add	r31, r0
    6430:	d2 9e       	mul	r13, r18
    6432:	f0 0d       	add	r31, r0
    6434:	11 24       	eor	r1, r1
    6436:	ee 59       	subi	r30, 0x9E	; 158
    6438:	f9 4f       	sbci	r31, 0xF9	; 249
    643a:	87 e0       	ldi	r24, 0x07	; 7
    643c:	80 8b       	std	Z+16, r24	; 0x10
				TCPPackedSend(&tcpSessionTable[i], (TCP_ACK_FLAG), 0, tcpData);
    643e:	41 2f       	mov	r20, r17
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	42 9f       	mul	r20, r18
    6444:	c0 01       	movw	r24, r0
    6446:	43 9f       	mul	r20, r19
    6448:	90 0d       	add	r25, r0
    644a:	52 9f       	mul	r21, r18
    644c:	90 0d       	add	r25, r0
    644e:	11 24       	eor	r1, r1
    6450:	8e 59       	subi	r24, 0x9E	; 158
    6452:	99 4f       	sbci	r25, 0xF9	; 249
    6454:	60 e1       	ldi	r22, 0x10	; 16
    6456:	40 e0       	ldi	r20, 0x00	; 0
    6458:	50 e0       	ldi	r21, 0x00	; 0
    645a:	95 01       	movw	r18, r10
    645c:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    6460:	27 c1       	rjmp	.+590    	; 0x66b0 <TCPProcess+0xcaa>
			}else if(tcpHeader->Flags == (TCP_FIN_FLAG | TCP_ACK_FLAG)){	//Neu nhan dong thoi FIN va ACK
    6462:	81 31       	cpi	r24, 0x11	; 17
    6464:	09 f0       	breq	.+2      	; 0x6468 <TCPProcess+0xa62>
    6466:	61 c0       	rjmp	.+194    	; 0x652a <TCPProcess+0xb24>
				//Chuyen sang trang thai TIME_WAIT va gui ACK
				//  nhung o day do chua co timer nen ta chuyen luon sang dong ket noi
				if (HTONL((tcpHeader->ackNumber)) == tcpSessionTable[i].seqNumber){
    6468:	88 85       	ldd	r24, Y+8	; 0x08
    646a:	99 85       	ldd	r25, Y+9	; 0x09
    646c:	aa 85       	ldd	r26, Y+10	; 0x0a
    646e:	bb 85       	ldd	r27, Y+11	; 0x0b
    6470:	6b 2e       	mov	r6, r27
    6472:	77 24       	eor	r7, r7
    6474:	88 24       	eor	r8, r8
    6476:	99 24       	eor	r9, r9
    6478:	58 2f       	mov	r21, r24
    647a:	44 27       	eor	r20, r20
    647c:	33 27       	eor	r19, r19
    647e:	22 27       	eor	r18, r18
    6480:	62 2a       	or	r6, r18
    6482:	73 2a       	or	r7, r19
    6484:	84 2a       	or	r8, r20
    6486:	95 2a       	or	r9, r21
    6488:	9c 01       	movw	r18, r24
    648a:	ad 01       	movw	r20, r26
    648c:	20 70       	andi	r18, 0x00	; 0
    648e:	30 70       	andi	r19, 0x00	; 0
    6490:	50 70       	andi	r21, 0x00	; 0
    6492:	23 2f       	mov	r18, r19
    6494:	34 2f       	mov	r19, r20
    6496:	45 2f       	mov	r20, r21
    6498:	55 27       	eor	r21, r21
    649a:	26 29       	or	r18, r6
    649c:	37 29       	or	r19, r7
    649e:	48 29       	or	r20, r8
    64a0:	59 29       	or	r21, r9
    64a2:	80 70       	andi	r24, 0x00	; 0
    64a4:	a0 70       	andi	r26, 0x00	; 0
    64a6:	b0 70       	andi	r27, 0x00	; 0
    64a8:	ba 2f       	mov	r27, r26
    64aa:	a9 2f       	mov	r26, r25
    64ac:	98 2f       	mov	r25, r24
    64ae:	88 27       	eor	r24, r24
    64b0:	28 2b       	or	r18, r24
    64b2:	39 2b       	or	r19, r25
    64b4:	4a 2b       	or	r20, r26
    64b6:	5b 2b       	or	r21, r27
    64b8:	8f e1       	ldi	r24, 0x1F	; 31
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	c8 9e       	mul	r12, r24
    64be:	f0 01       	movw	r30, r0
    64c0:	c9 9e       	mul	r12, r25
    64c2:	f0 0d       	add	r31, r0
    64c4:	d8 9e       	mul	r13, r24
    64c6:	f0 0d       	add	r31, r0
    64c8:	11 24       	eor	r1, r1
    64ca:	ee 59       	subi	r30, 0x9E	; 158
    64cc:	f9 4f       	sbci	r31, 0xF9	; 249
    64ce:	80 85       	ldd	r24, Z+8	; 0x08
    64d0:	91 85       	ldd	r25, Z+9	; 0x09
    64d2:	a2 85       	ldd	r26, Z+10	; 0x0a
    64d4:	b3 85       	ldd	r27, Z+11	; 0x0b
    64d6:	28 17       	cp	r18, r24
    64d8:	39 07       	cpc	r19, r25
    64da:	4a 07       	cpc	r20, r26
    64dc:	5b 07       	cpc	r21, r27
    64de:	21 f4       	brne	.+8      	; 0x64e8 <TCPProcess+0xae2>
					//TCPPackedSend(&tcpSessionTable[i], (TCP_ACK_FLAG), 0, tcpData);
					TCPCloseSession(i);
    64e0:	81 2f       	mov	r24, r17
    64e2:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
    64e6:	0d c0       	rjmp	.+26     	; 0x6502 <TCPProcess+0xafc>
				}else{	//Neu khong dung ack cho thong bao FIN
					//Chuyen sang cho co ACK cuoi cung
					tcpSessionTable[i].sesState = TCP_STATE_LAST_ACK;
    64e8:	8f e1       	ldi	r24, 0x1F	; 31
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	c8 9e       	mul	r12, r24
    64ee:	f0 01       	movw	r30, r0
    64f0:	c9 9e       	mul	r12, r25
    64f2:	f0 0d       	add	r31, r0
    64f4:	d8 9e       	mul	r13, r24
    64f6:	f0 0d       	add	r31, r0
    64f8:	11 24       	eor	r1, r1
    64fa:	ee 59       	subi	r30, 0x9E	; 158
    64fc:	f9 4f       	sbci	r31, 0xF9	; 249
    64fe:	8a e0       	ldi	r24, 0x0A	; 10
    6500:	80 8b       	std	Z+16, r24	; 0x10
				}
				//Gui xac nhan cho co FIN
				TCPPackedSend(&tcpSessionTable[i], (TCP_ACK_FLAG), 0, tcpData);
    6502:	41 2f       	mov	r20, r17
    6504:	50 e0       	ldi	r21, 0x00	; 0
    6506:	2f e1       	ldi	r18, 0x1F	; 31
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	42 9f       	mul	r20, r18
    650c:	c0 01       	movw	r24, r0
    650e:	43 9f       	mul	r20, r19
    6510:	90 0d       	add	r25, r0
    6512:	52 9f       	mul	r21, r18
    6514:	90 0d       	add	r25, r0
    6516:	11 24       	eor	r1, r1
    6518:	8e 59       	subi	r24, 0x9E	; 158
    651a:	99 4f       	sbci	r25, 0xF9	; 249
    651c:	60 e1       	ldi	r22, 0x10	; 16
    651e:	40 e0       	ldi	r20, 0x00	; 0
    6520:	50 e0       	ldi	r21, 0x00	; 0
    6522:	95 01       	movw	r18, r10
    6524:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
    6528:	c3 c0       	rjmp	.+390    	; 0x66b0 <TCPProcess+0xcaa>
				//tcpSessionTable[i].seqNumber++;
			}else if(tcpHeader->Flags == TCP_ACK_FLAG){	//Neu chi nhan duoc ACK
    652a:	80 31       	cpi	r24, 0x10	; 16
    652c:	09 f0       	breq	.+2      	; 0x6530 <TCPProcess+0xb2a>
    652e:	c0 c0       	rjmp	.+384    	; 0x66b0 <TCPProcess+0xcaa>
				//Chuyen sang trang thai FIN WAIT2
				tcpSessionTable[i].sesState = TCP_STATE_FIN_WAIT2;
    6530:	8f e1       	ldi	r24, 0x1F	; 31
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	c8 9e       	mul	r12, r24
    6536:	f0 01       	movw	r30, r0
    6538:	c9 9e       	mul	r12, r25
    653a:	f0 0d       	add	r31, r0
    653c:	d8 9e       	mul	r13, r24
    653e:	f0 0d       	add	r31, r0
    6540:	11 24       	eor	r1, r1
    6542:	ee 59       	subi	r30, 0x9E	; 158
    6544:	f9 4f       	sbci	r31, 0xF9	; 249
    6546:	86 e0       	ldi	r24, 0x06	; 6
    6548:	80 8b       	std	Z+16, r24	; 0x10
    654a:	cd c0       	rjmp	.+410    	; 0x66e6 <TCPProcess+0xce0>
			break;
		//Neu dang o trang thai FIN WAIT 2 (san sang dong ket noi va gui co FIN,
		//  phia ben kia da xac nhan nhung van chua san sang dong ket noi
		case(TCP_STATE_FIN_WAIT2):
			//Neu nhan duoc co FIN
			if (tcpHeader->Flags & TCP_FIN_FLAG){
    654c:	50 ff       	sbrs	r21, 0
    654e:	b0 c0       	rjmp	.+352    	; 0x66b0 <TCPProcess+0xcaa>
				if(dataLen){
    6550:	61 15       	cp	r22, r1
    6552:	71 05       	cpc	r23, r1
    6554:	09 f4       	brne	.+2      	; 0x6558 <TCPProcess+0xb52>
    6556:	3f c0       	rjmp	.+126    	; 0x65d6 <TCPProcess+0xbd0>
					tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber))+dataLen;
    6558:	8c 81       	ldd	r24, Y+4	; 0x04
    655a:	9d 81       	ldd	r25, Y+5	; 0x05
    655c:	ae 81       	ldd	r26, Y+6	; 0x06
    655e:	bf 81       	ldd	r27, Y+7	; 0x07
    6560:	2f e1       	ldi	r18, 0x1F	; 31
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	c2 9e       	mul	r12, r18
    6566:	f0 01       	movw	r30, r0
    6568:	c3 9e       	mul	r12, r19
    656a:	f0 0d       	add	r31, r0
    656c:	d2 9e       	mul	r13, r18
    656e:	f0 0d       	add	r31, r0
    6570:	11 24       	eor	r1, r1
    6572:	ee 59       	subi	r30, 0x9E	; 158
    6574:	f9 4f       	sbci	r31, 0xF9	; 249
    6576:	1b 01       	movw	r2, r22
    6578:	44 24       	eor	r4, r4
    657a:	55 24       	eor	r5, r5
    657c:	6b 2e       	mov	r6, r27
    657e:	77 24       	eor	r7, r7
    6580:	88 24       	eor	r8, r8
    6582:	99 24       	eor	r9, r9
    6584:	58 2f       	mov	r21, r24
    6586:	44 27       	eor	r20, r20
    6588:	33 27       	eor	r19, r19
    658a:	22 27       	eor	r18, r18
    658c:	62 2a       	or	r6, r18
    658e:	73 2a       	or	r7, r19
    6590:	84 2a       	or	r8, r20
    6592:	95 2a       	or	r9, r21
    6594:	9c 01       	movw	r18, r24
    6596:	ad 01       	movw	r20, r26
    6598:	20 70       	andi	r18, 0x00	; 0
    659a:	30 70       	andi	r19, 0x00	; 0
    659c:	50 70       	andi	r21, 0x00	; 0
    659e:	23 2f       	mov	r18, r19
    65a0:	34 2f       	mov	r19, r20
    65a2:	45 2f       	mov	r20, r21
    65a4:	55 27       	eor	r21, r21
    65a6:	26 29       	or	r18, r6
    65a8:	37 29       	or	r19, r7
    65aa:	48 29       	or	r20, r8
    65ac:	59 29       	or	r21, r9
    65ae:	80 70       	andi	r24, 0x00	; 0
    65b0:	a0 70       	andi	r26, 0x00	; 0
    65b2:	b0 70       	andi	r27, 0x00	; 0
    65b4:	ba 2f       	mov	r27, r26
    65b6:	a9 2f       	mov	r26, r25
    65b8:	98 2f       	mov	r25, r24
    65ba:	88 27       	eor	r24, r24
    65bc:	82 2b       	or	r24, r18
    65be:	93 2b       	or	r25, r19
    65c0:	a4 2b       	or	r26, r20
    65c2:	b5 2b       	or	r27, r21
    65c4:	82 0d       	add	r24, r2
    65c6:	93 1d       	adc	r25, r3
    65c8:	a4 1d       	adc	r26, r4
    65ca:	b5 1d       	adc	r27, r5
    65cc:	84 87       	std	Z+12, r24	; 0x0c
    65ce:	95 87       	std	Z+13, r25	; 0x0d
    65d0:	a6 87       	std	Z+14, r26	; 0x0e
    65d2:	b7 87       	std	Z+15, r27	; 0x0f
    65d4:	3a c0       	rjmp	.+116    	; 0x664a <TCPProcess+0xc44>
				}else{
					tcpSessionTable[i].ackNumber = HTONL((tcpHeader->seqNumber))+1;
    65d6:	8c 81       	ldd	r24, Y+4	; 0x04
    65d8:	9d 81       	ldd	r25, Y+5	; 0x05
    65da:	ae 81       	ldd	r26, Y+6	; 0x06
    65dc:	bf 81       	ldd	r27, Y+7	; 0x07
    65de:	2f e1       	ldi	r18, 0x1F	; 31
    65e0:	30 e0       	ldi	r19, 0x00	; 0
    65e2:	c2 9e       	mul	r12, r18
    65e4:	f0 01       	movw	r30, r0
    65e6:	c3 9e       	mul	r12, r19
    65e8:	f0 0d       	add	r31, r0
    65ea:	d2 9e       	mul	r13, r18
    65ec:	f0 0d       	add	r31, r0
    65ee:	11 24       	eor	r1, r1
    65f0:	ee 59       	subi	r30, 0x9E	; 158
    65f2:	f9 4f       	sbci	r31, 0xF9	; 249
    65f4:	6b 2e       	mov	r6, r27
    65f6:	77 24       	eor	r7, r7
    65f8:	88 24       	eor	r8, r8
    65fa:	99 24       	eor	r9, r9
    65fc:	58 2f       	mov	r21, r24
    65fe:	44 27       	eor	r20, r20
    6600:	33 27       	eor	r19, r19
    6602:	22 27       	eor	r18, r18
    6604:	62 2a       	or	r6, r18
    6606:	73 2a       	or	r7, r19
    6608:	84 2a       	or	r8, r20
    660a:	95 2a       	or	r9, r21
    660c:	9c 01       	movw	r18, r24
    660e:	ad 01       	movw	r20, r26
    6610:	20 70       	andi	r18, 0x00	; 0
    6612:	30 70       	andi	r19, 0x00	; 0
    6614:	50 70       	andi	r21, 0x00	; 0
    6616:	23 2f       	mov	r18, r19
    6618:	34 2f       	mov	r19, r20
    661a:	45 2f       	mov	r20, r21
    661c:	55 27       	eor	r21, r21
    661e:	26 29       	or	r18, r6
    6620:	37 29       	or	r19, r7
    6622:	48 29       	or	r20, r8
    6624:	59 29       	or	r21, r9
    6626:	80 70       	andi	r24, 0x00	; 0
    6628:	a0 70       	andi	r26, 0x00	; 0
    662a:	b0 70       	andi	r27, 0x00	; 0
    662c:	ba 2f       	mov	r27, r26
    662e:	a9 2f       	mov	r26, r25
    6630:	98 2f       	mov	r25, r24
    6632:	88 27       	eor	r24, r24
    6634:	82 2b       	or	r24, r18
    6636:	93 2b       	or	r25, r19
    6638:	a4 2b       	or	r26, r20
    663a:	b5 2b       	or	r27, r21
    663c:	01 96       	adiw	r24, 0x01	; 1
    663e:	a1 1d       	adc	r26, r1
    6640:	b1 1d       	adc	r27, r1
    6642:	84 87       	std	Z+12, r24	; 0x0c
    6644:	95 87       	std	Z+13, r25	; 0x0d
    6646:	a6 87       	std	Z+14, r26	; 0x0e
    6648:	b7 87       	std	Z+15, r27	; 0x0f
				}
				//FIN -> goto TIMED WAIT
				tcpSessionTable[i].sesState = TCP_STATE_TIMED_WAIT;
    664a:	2f e1       	ldi	r18, 0x1F	; 31
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	c2 9e       	mul	r12, r18
    6650:	f0 01       	movw	r30, r0
    6652:	c3 9e       	mul	r12, r19
    6654:	f0 0d       	add	r31, r0
    6656:	d2 9e       	mul	r13, r18
    6658:	f0 0d       	add	r31, r0
    665a:	11 24       	eor	r1, r1
    665c:	ee 59       	subi	r30, 0x9E	; 158
    665e:	f9 4f       	sbci	r31, 0xF9	; 249
    6660:	88 e0       	ldi	r24, 0x08	; 8
    6662:	80 8b       	std	Z+16, r24	; 0x10
				TCPPackedSend(&tcpSessionTable[i], (TCP_ACK_FLAG), 0, tcpData);
    6664:	41 2f       	mov	r20, r17
    6666:	50 e0       	ldi	r21, 0x00	; 0
    6668:	42 9f       	mul	r20, r18
    666a:	c0 01       	movw	r24, r0
    666c:	43 9f       	mul	r20, r19
    666e:	90 0d       	add	r25, r0
    6670:	52 9f       	mul	r21, r18
    6672:	90 0d       	add	r25, r0
    6674:	11 24       	eor	r1, r1
    6676:	8e 59       	subi	r24, 0x9E	; 158
    6678:	99 4f       	sbci	r25, 0xF9	; 249
    667a:	60 e1       	ldi	r22, 0x10	; 16
    667c:	40 e0       	ldi	r20, 0x00	; 0
    667e:	50 e0       	ldi	r21, 0x00	; 0
    6680:	95 01       	movw	r18, r10
    6682:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <TCPPackedSend>
				//Chua co timer thi dong ket noi o day luon
				TCPCloseSession(i);
    6686:	81 2f       	mov	r24, r17
    6688:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
    668c:	11 c0       	rjmp	.+34     	; 0x66b0 <TCPProcess+0xcaa>
			}
			break;
		case(TCP_STATE_TIMED_WAIT):
			break;
		case(TCP_STATE_CLOSING):
			tcpSessionTable[i].sesState = TCP_STATE_TIMED_WAIT;
    668e:	8f e1       	ldi	r24, 0x1F	; 31
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	c8 9e       	mul	r12, r24
    6694:	f0 01       	movw	r30, r0
    6696:	c9 9e       	mul	r12, r25
    6698:	f0 0d       	add	r31, r0
    669a:	d8 9e       	mul	r13, r24
    669c:	f0 0d       	add	r31, r0
    669e:	11 24       	eor	r1, r1
    66a0:	ee 59       	subi	r30, 0x9E	; 158
    66a2:	f9 4f       	sbci	r31, 0xF9	; 249
    66a4:	88 e0       	ldi	r24, 0x08	; 8
    66a6:	80 8b       	std	Z+16, r24	; 0x10
    66a8:	11 c0       	rjmp	.+34     	; 0x66cc <TCPProcess+0xcc6>
			break;
		default:
			TCPCloseSession(i);
    66aa:	81 2f       	mov	r24, r17
    66ac:	0e 94 83 2a 	call	0x5506	; 0x5506 <TCPCloseSession>
	}
	//we must set timed wait TTL here because timed wait is not packet triggered
	if (tcpSessionTable[i].sesState == TCP_STATE_TIMED_WAIT){
    66b0:	8f e1       	ldi	r24, 0x1F	; 31
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	c8 9e       	mul	r12, r24
    66b6:	f0 01       	movw	r30, r0
    66b8:	c9 9e       	mul	r12, r25
    66ba:	f0 0d       	add	r31, r0
    66bc:	d8 9e       	mul	r13, r24
    66be:	f0 0d       	add	r31, r0
    66c0:	11 24       	eor	r1, r1
    66c2:	ee 59       	subi	r30, 0x9E	; 158
    66c4:	f9 4f       	sbci	r31, 0xF9	; 249
    66c6:	80 89       	ldd	r24, Z+16	; 0x10
    66c8:	88 30       	cpi	r24, 0x08	; 8
    66ca:	69 f4       	brne	.+26     	; 0x66e6 <TCPProcess+0xce0>
		tcpSessionTable[i].timeOut = 5; //5 seconds timeout
    66cc:	8f e1       	ldi	r24, 0x1F	; 31
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	c8 9e       	mul	r12, r24
    66d2:	f0 01       	movw	r30, r0
    66d4:	c9 9e       	mul	r12, r25
    66d6:	f0 0d       	add	r31, r0
    66d8:	d8 9e       	mul	r13, r24
    66da:	f0 0d       	add	r31, r0
    66dc:	11 24       	eor	r1, r1
    66de:	ee 59       	subi	r30, 0x9E	; 158
    66e0:	f9 4f       	sbci	r31, 0xF9	; 249
    66e2:	85 e0       	ldi	r24, 0x05	; 5
    66e4:	82 8f       	std	Z+26, r24	; 0x1a
	}
	return;
}
    66e6:	df 91       	pop	r29
    66e8:	cf 91       	pop	r28
    66ea:	1f 91       	pop	r17
    66ec:	0f 91       	pop	r16
    66ee:	ff 90       	pop	r15
    66f0:	ef 90       	pop	r14
    66f2:	df 90       	pop	r13
    66f4:	cf 90       	pop	r12
    66f6:	bf 90       	pop	r11
    66f8:	af 90       	pop	r10
    66fa:	9f 90       	pop	r9
    66fc:	8f 90       	pop	r8
    66fe:	7f 90       	pop	r7
    6700:	6f 90       	pop	r6
    6702:	5f 90       	pop	r5
    6704:	4f 90       	pop	r4
    6706:	3f 90       	pop	r3
    6708:	2f 90       	pop	r2
    670a:	08 95       	ret

0000670c <timer1Init>:
static volatile unsigned int Counter1s;
void timer1Init(void)
{
	// initialize timer 1
	// set prescaler on timer 1
	TCCR1B = (TCCR1B & ~TIMER_PRESCALE_MASK) | TIMER1PRESCALE;	// set prescaler
    670c:	8e b5       	in	r24, 0x2e	; 46
    670e:	88 7f       	andi	r24, 0xF8	; 248
    6710:	85 60       	ori	r24, 0x05	; 5
    6712:	8e bd       	out	0x2e, r24	; 46
	TCNT1H = 0;						// reset TCNT1
    6714:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
    6716:	1c bc       	out	0x2c, r1	; 44
	TIMSK |= (1<<TOIE1);						// enable TCNT1 overflow
    6718:	89 b7       	in	r24, 0x39	; 57
    671a:	84 60       	ori	r24, 0x04	; 4
    671c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0xFFFF - TIMER1_INTERVAL;
    671e:	8b e7       	ldi	r24, 0x7B	; 123
    6720:	91 ee       	ldi	r25, 0xE1	; 225
    6722:	9d bd       	out	0x2d, r25	; 45
    6724:	8c bd       	out	0x2c, r24	; 44
	sei();
    6726:	78 94       	sei
}
    6728:	08 95       	ret

0000672a <__vector_9>:
//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
    672a:	1f 92       	push	r1
    672c:	0f 92       	push	r0
    672e:	0f b6       	in	r0, 0x3f	; 63
    6730:	0f 92       	push	r0
    6732:	11 24       	eor	r1, r1
    6734:	2f 93       	push	r18
    6736:	3f 93       	push	r19
    6738:	4f 93       	push	r20
    673a:	5f 93       	push	r21
    673c:	6f 93       	push	r22
    673e:	7f 93       	push	r23
    6740:	8f 93       	push	r24
    6742:	9f 93       	push	r25
    6744:	af 93       	push	r26
    6746:	bf 93       	push	r27
    6748:	ef 93       	push	r30
    674a:	ff 93       	push	r31
	//Tai nap gia tri timer 1
	TCNT1 = 0xFFFF - TIMER1_INTERVAL;
    674c:	8b e7       	ldi	r24, 0x7B	; 123
    674e:	91 ee       	ldi	r25, 0xE1	; 225
    6750:	9d bd       	out	0x2d, r25	; 45
    6752:	8c bd       	out	0x2c, r24	; 44
	//Cap nhat watchdog timer
	if((time_watchdog++) > 120){
    6754:	80 91 32 01 	lds	r24, 0x0132
    6758:	90 91 33 01 	lds	r25, 0x0133
    675c:	9c 01       	movw	r18, r24
    675e:	2f 5f       	subi	r18, 0xFF	; 255
    6760:	3f 4f       	sbci	r19, 0xFF	; 255
    6762:	30 93 33 01 	sts	0x0133, r19
    6766:	20 93 32 01 	sts	0x0132, r18
    676a:	89 37       	cpi	r24, 0x79	; 121
    676c:	91 05       	cpc	r25, r1
    676e:	30 f0       	brcs	.+12     	; 0x677c <__vector_9+0x52>
        time_watchdog = 0;
    6770:	10 92 33 01 	sts	0x0133, r1
    6774:	10 92 32 01 	sts	0x0132, r1
        ethInit();
    6778:	0e 94 72 10 	call	0x20e4	; 0x20e4 <ethInit>
	}
	Counter1s++;
    677c:	80 91 b6 00 	lds	r24, 0x00B6
    6780:	90 91 b7 00 	lds	r25, 0x00B7
    6784:	01 96       	adiw	r24, 0x01	; 1
    6786:	90 93 b7 00 	sts	0x00B7, r25
    678a:	80 93 b6 00 	sts	0x00B6, r24
	arpTimer();
    678e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <arpTimer>
	TCPCheckTimeOut();////
    6792:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <TCPCheckTimeOut>
	dhcpTimer();///
    6796:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <dhcpTimer>
	showclock();
    679a:	0e 94 dd 22 	call	0x45ba	; 0x45ba <showclock>
}
    679e:	ff 91       	pop	r31
    67a0:	ef 91       	pop	r30
    67a2:	bf 91       	pop	r27
    67a4:	af 91       	pop	r26
    67a6:	9f 91       	pop	r25
    67a8:	8f 91       	pop	r24
    67aa:	7f 91       	pop	r23
    67ac:	6f 91       	pop	r22
    67ae:	5f 91       	pop	r21
    67b0:	4f 91       	pop	r20
    67b2:	3f 91       	pop	r19
    67b4:	2f 91       	pop	r18
    67b6:	0f 90       	pop	r0
    67b8:	0f be       	out	0x3f, r0	; 63
    67ba:	0f 90       	pop	r0
    67bc:	1f 90       	pop	r1
    67be:	18 95       	reti

000067c0 <udpSend>:
#include "icmp.h"
extern struct ipConfig IpMyConfig;	///< Local IP address/config structure
//#define UDP_DEBUG
//Ham gui di mot goi UDP
void udpSend(unsigned long dstIp, unsigned int dstPort, unsigned int srcPort, unsigned int len, unsigned char* udpData)
{
    67c0:	6f 92       	push	r6
    67c2:	7f 92       	push	r7
    67c4:	8f 92       	push	r8
    67c6:	9f 92       	push	r9
    67c8:	af 92       	push	r10
    67ca:	bf 92       	push	r11
    67cc:	cf 92       	push	r12
    67ce:	df 92       	push	r13
    67d0:	ef 92       	push	r14
    67d2:	ff 92       	push	r15
    67d4:	0f 93       	push	r16
    67d6:	1f 93       	push	r17
    67d8:	cf 93       	push	r28
    67da:	df 93       	push	r29
    67dc:	5b 01       	movw	r10, r22
    67de:	6c 01       	movw	r12, r24
	struct ntUDPHeader* udpHeader;
	udpHeader = (struct ntUDPHeader*)(udpData - UDP_HEADER_LEN);
    67e0:	f7 01       	movw	r30, r14
    67e2:	38 97       	sbiw	r30, 0x08	; 8
	len += UDP_HEADER_LEN;
    67e4:	b8 01       	movw	r22, r16
    67e6:	68 5f       	subi	r22, 0xF8	; 248
    67e8:	7f 4f       	sbci	r23, 0xFF	; 255
	udpHeader->desPort = HTONS(dstPort);
    67ea:	54 27       	eor	r21, r20
    67ec:	45 27       	eor	r20, r21
    67ee:	54 27       	eor	r21, r20
    67f0:	53 83       	std	Z+3, r21	; 0x03
    67f2:	42 83       	std	Z+2, r20	; 0x02
	udpHeader->srcPort  = HTONS(srcPort);
    67f4:	32 27       	eor	r19, r18
    67f6:	23 27       	eor	r18, r19
    67f8:	32 27       	eor	r19, r18
    67fa:	31 83       	std	Z+1, r19	; 0x01
    67fc:	20 83       	st	Z, r18
	udpHeader->Len = HTONS(len);
    67fe:	36 2f       	mov	r19, r22
    6800:	27 2f       	mov	r18, r23
    6802:	35 83       	std	Z+5, r19	; 0x05
    6804:	24 83       	std	Z+4, r18	; 0x04
	udpHeader->Checksum = 0;
    6806:	17 82       	std	Z+7, r1	; 0x07
    6808:	16 82       	std	Z+6, r1	; 0x06
	//ipSend(dstIp, IP_PROTO_UDP, len, (unsigned char*)udpHeader);
	//void ipSend(unsigned long dstIp, unsigned char protocol, unsigned int len, unsigned char* ipData)

	struct ntEthHeader* ethHeader;
	struct ntIPHeader* ipHeader;
	ipHeader = (struct ntIPHeader*)((unsigned char*)udpHeader - IP_HEADER_LEN);
    680a:	e7 01       	movw	r28, r14
    680c:	6c 97       	sbiw	r28, 0x1c	; 28
	ethHeader = (struct ntEthHeader*)((unsigned char*)udpHeader - IP_HEADER_LEN - ETH_HEADER_LEN);
    680e:	0f 2e       	mov	r0, r31
    6810:	f6 ed       	ldi	r31, 0xD6	; 214
    6812:	8f 2e       	mov	r8, r31
    6814:	ff ef       	ldi	r31, 0xFF	; 255
    6816:	9f 2e       	mov	r9, r31
    6818:	f0 2d       	mov	r31, r0
    681a:	8e 0c       	add	r8, r14
    681c:	9f 1c       	adc	r9, r15
	len += IP_HEADER_LEN;
    681e:	0f 2e       	mov	r0, r31
    6820:	fc e1       	ldi	r31, 0x1C	; 28
    6822:	6f 2e       	mov	r6, r31
    6824:	77 24       	eor	r7, r7
    6826:	f0 2d       	mov	r31, r0
    6828:	60 0e       	add	r6, r16
    682a:	71 1e       	adc	r7, r17
	ipHeader->desIPAddr = HTONL(dstIp);
    682c:	2d 2d       	mov	r18, r13
    682e:	33 27       	eor	r19, r19
    6830:	44 27       	eor	r20, r20
    6832:	55 27       	eor	r21, r21
    6834:	ba 2d       	mov	r27, r10
    6836:	aa 27       	eor	r26, r26
    6838:	99 27       	eor	r25, r25
    683a:	88 27       	eor	r24, r24
    683c:	82 2b       	or	r24, r18
    683e:	93 2b       	or	r25, r19
    6840:	a4 2b       	or	r26, r20
    6842:	b5 2b       	or	r27, r21
    6844:	b6 01       	movw	r22, r12
    6846:	a5 01       	movw	r20, r10
    6848:	40 70       	andi	r20, 0x00	; 0
    684a:	50 70       	andi	r21, 0x00	; 0
    684c:	70 70       	andi	r23, 0x00	; 0
    684e:	45 2f       	mov	r20, r21
    6850:	56 2f       	mov	r21, r22
    6852:	67 2f       	mov	r22, r23
    6854:	77 27       	eor	r23, r23
    6856:	9a 01       	movw	r18, r20
    6858:	ab 01       	movw	r20, r22
    685a:	28 2b       	or	r18, r24
    685c:	39 2b       	or	r19, r25
    685e:	4a 2b       	or	r20, r26
    6860:	5b 2b       	or	r21, r27
    6862:	d6 01       	movw	r26, r12
    6864:	c5 01       	movw	r24, r10
    6866:	80 70       	andi	r24, 0x00	; 0
    6868:	a0 70       	andi	r26, 0x00	; 0
    686a:	b0 70       	andi	r27, 0x00	; 0
    686c:	ba 2f       	mov	r27, r26
    686e:	a9 2f       	mov	r26, r25
    6870:	98 2f       	mov	r25, r24
    6872:	88 27       	eor	r24, r24
    6874:	82 2b       	or	r24, r18
    6876:	93 2b       	or	r25, r19
    6878:	a4 2b       	or	r26, r20
    687a:	b5 2b       	or	r27, r21
    687c:	88 8b       	std	Y+16, r24	; 0x10
    687e:	99 8b       	std	Y+17, r25	; 0x11
    6880:	aa 8b       	std	Y+18, r26	; 0x12
    6882:	bb 8b       	std	Y+19, r27	; 0x13
	ipHeader->srcIPAddr = HTONL(IpMyConfig.ip);
    6884:	80 91 1d 06 	lds	r24, 0x061D
    6888:	90 91 1e 06 	lds	r25, 0x061E
    688c:	a0 91 1f 06 	lds	r26, 0x061F
    6890:	b0 91 20 06 	lds	r27, 0x0620
    6894:	eb 2e       	mov	r14, r27
    6896:	ff 24       	eor	r15, r15
    6898:	00 27       	eor	r16, r16
    689a:	11 27       	eor	r17, r17
    689c:	58 2f       	mov	r21, r24
    689e:	44 27       	eor	r20, r20
    68a0:	33 27       	eor	r19, r19
    68a2:	22 27       	eor	r18, r18
    68a4:	e2 2a       	or	r14, r18
    68a6:	f3 2a       	or	r15, r19
    68a8:	04 2b       	or	r16, r20
    68aa:	15 2b       	or	r17, r21
    68ac:	9c 01       	movw	r18, r24
    68ae:	ad 01       	movw	r20, r26
    68b0:	20 70       	andi	r18, 0x00	; 0
    68b2:	30 70       	andi	r19, 0x00	; 0
    68b4:	50 70       	andi	r21, 0x00	; 0
    68b6:	23 2f       	mov	r18, r19
    68b8:	34 2f       	mov	r19, r20
    68ba:	45 2f       	mov	r20, r21
    68bc:	55 27       	eor	r21, r21
    68be:	2e 29       	or	r18, r14
    68c0:	3f 29       	or	r19, r15
    68c2:	40 2b       	or	r20, r16
    68c4:	51 2b       	or	r21, r17
    68c6:	80 70       	andi	r24, 0x00	; 0
    68c8:	a0 70       	andi	r26, 0x00	; 0
    68ca:	b0 70       	andi	r27, 0x00	; 0
    68cc:	ee 24       	eor	r14, r14
    68ce:	f8 2e       	mov	r15, r24
    68d0:	09 2f       	mov	r16, r25
    68d2:	1a 2f       	mov	r17, r26
    68d4:	2e 29       	or	r18, r14
    68d6:	3f 29       	or	r19, r15
    68d8:	40 2b       	or	r20, r16
    68da:	51 2b       	or	r21, r17
    68dc:	2c 87       	std	Y+12, r18	; 0x0c
    68de:	3d 87       	std	Y+13, r19	; 0x0d
    68e0:	4e 87       	std	Y+14, r20	; 0x0e
    68e2:	5f 87       	std	Y+15, r21	; 0x0f
	ipHeader->Protocol = IP_PROTO_UDP;
    68e4:	81 e1       	ldi	r24, 0x11	; 17
    68e6:	89 87       	std	Y+9, r24	; 0x09
	ipHeader->Len = HTONS(len);
    68e8:	96 2d       	mov	r25, r6
    68ea:	87 2d       	mov	r24, r7
    68ec:	9b 83       	std	Y+3, r25	; 0x03
    68ee:	8a 83       	std	Y+2, r24	; 0x02
	ipHeader->verHdrLen = 0x45;
    68f0:	85 e4       	ldi	r24, 0x45	; 69
    68f2:	88 83       	st	Y, r24
	ipHeader->ToS = 0;
    68f4:	19 82       	std	Y+1, r1	; 0x01
	ipHeader->IDNumber = 0;
    68f6:	1d 82       	std	Y+5, r1	; 0x05
    68f8:	1c 82       	std	Y+4, r1	; 0x04
	ipHeader->Offset = 0;
    68fa:	1f 82       	std	Y+7, r1	; 0x07
    68fc:	1e 82       	std	Y+6, r1	; 0x06
	ipHeader->TTL = IP_TIME_TO_LIVE;
    68fe:	80 e8       	ldi	r24, 0x80	; 128
    6900:	88 87       	std	Y+8, r24	; 0x08
	ipHeader->Checksum = 0;
    6902:	1b 86       	std	Y+11, r1	; 0x0b
    6904:	1a 86       	std	Y+10, r1	; 0x0a

	ipHeader->Checksum = ipChecksum((unsigned char*)ipHeader, IP_HEADER_LEN);
    6906:	ce 01       	movw	r24, r28
    6908:	64 e1       	ldi	r22, 0x14	; 20
    690a:	70 e0       	ldi	r23, 0x00	; 0
    690c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <ipChecksum>
    6910:	9b 87       	std	Y+11, r25	; 0x0b
    6912:	8a 87       	std	Y+10, r24	; 0x0a
	if( (dstIp & IpMyConfig.netmask) == (IpMyConfig.ip & IpMyConfig.netmask) )
    6914:	80 91 1d 06 	lds	r24, 0x061D
    6918:	90 91 1e 06 	lds	r25, 0x061E
    691c:	a0 91 1f 06 	lds	r26, 0x061F
    6920:	b0 91 20 06 	lds	r27, 0x0620
    6924:	a8 26       	eor	r10, r24
    6926:	b9 26       	eor	r11, r25
    6928:	ca 26       	eor	r12, r26
    692a:	db 26       	eor	r13, r27
    692c:	80 91 21 06 	lds	r24, 0x0621
    6930:	90 91 22 06 	lds	r25, 0x0622
    6934:	a0 91 23 06 	lds	r26, 0x0623
    6938:	b0 91 24 06 	lds	r27, 0x0624
    693c:	a8 22       	and	r10, r24
    693e:	b9 22       	and	r11, r25
    6940:	ca 22       	and	r12, r26
    6942:	db 22       	and	r13, r27
    6944:	a1 14       	cp	r10, r1
    6946:	b1 04       	cpc	r11, r1
    6948:	c1 04       	cpc	r12, r1
    694a:	d1 04       	cpc	r13, r1
    694c:	39 f4       	brne	.+14     	; 0x695c <udpSend+0x19c>
	{
		arpIpOut((unsigned char*)ethHeader,0);					// local send
    694e:	c4 01       	movw	r24, r8
    6950:	40 e0       	ldi	r20, 0x00	; 0
    6952:	50 e0       	ldi	r21, 0x00	; 0
    6954:	ba 01       	movw	r22, r20
    6956:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <arpIpOut>
    695a:	0b c0       	rjmp	.+22     	; 0x6972 <udpSend+0x1b2>
	}
	else
	{
		arpIpOut((unsigned char*)ethHeader,IpMyConfig.gateway);	// gateway send
    695c:	40 91 25 06 	lds	r20, 0x0625
    6960:	50 91 26 06 	lds	r21, 0x0626
    6964:	60 91 27 06 	lds	r22, 0x0627
    6968:	70 91 28 06 	lds	r23, 0x0628
    696c:	c4 01       	movw	r24, r8
    696e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <arpIpOut>
	}
	len += ETH_HEADER_LEN;
	ethSendFrame(len, (unsigned char*)ethHeader);
    6972:	c3 01       	movw	r24, r6
    6974:	0e 96       	adiw	r24, 0x0e	; 14
    6976:	b4 01       	movw	r22, r8
    6978:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ethSendFrame>
}
    697c:	df 91       	pop	r29
    697e:	cf 91       	pop	r28
    6980:	1f 91       	pop	r17
    6982:	0f 91       	pop	r16
    6984:	ff 90       	pop	r15
    6986:	ef 90       	pop	r14
    6988:	df 90       	pop	r13
    698a:	cf 90       	pop	r12
    698c:	bf 90       	pop	r11
    698e:	af 90       	pop	r10
    6990:	9f 90       	pop	r9
    6992:	8f 90       	pop	r8
    6994:	7f 90       	pop	r7
    6996:	6f 90       	pop	r6
    6998:	08 95       	ret

0000699a <UDPProcess>:
//--------------------------------------------------------------------------------------
//Ham xu ly goi UDP nhan duoc, duoc goi boi ham xu ly goi IP (IPProcess)
// Hien chua co ung dung chay UDP nen ham nay trong
void UDPProcess(unsigned int len, struct ntIPHeader* packet)
{
	dhcpIn((len - IP_HEADER_LEN - UDP_HEADER_LEN), (struct netDhcpHeader*)((char*)packet + IP_HEADER_LEN + UDP_HEADER_LEN));
    699a:	64 5e       	subi	r22, 0xE4	; 228
    699c:	7f 4f       	sbci	r23, 0xFF	; 255
    699e:	4c 97       	sbiw	r24, 0x1c	; 28
    69a0:	0e 94 26 0c 	call	0x184c	; 0x184c <dhcpIn>
}
    69a4:	08 95       	ret

000069a6 <__subsf3>:
    69a6:	50 58       	subi	r21, 0x80	; 128

000069a8 <__addsf3>:
    69a8:	bb 27       	eor	r27, r27
    69aa:	aa 27       	eor	r26, r26
    69ac:	0e d0       	rcall	.+28     	; 0x69ca <__addsf3x>
    69ae:	e0 c0       	rjmp	.+448    	; 0x6b70 <__fp_round>
    69b0:	d1 d0       	rcall	.+418    	; 0x6b54 <__fp_pscA>
    69b2:	30 f0       	brcs	.+12     	; 0x69c0 <__addsf3+0x18>
    69b4:	d6 d0       	rcall	.+428    	; 0x6b62 <__fp_pscB>
    69b6:	20 f0       	brcs	.+8      	; 0x69c0 <__addsf3+0x18>
    69b8:	31 f4       	brne	.+12     	; 0x69c6 <__addsf3+0x1e>
    69ba:	9f 3f       	cpi	r25, 0xFF	; 255
    69bc:	11 f4       	brne	.+4      	; 0x69c2 <__addsf3+0x1a>
    69be:	1e f4       	brtc	.+6      	; 0x69c6 <__addsf3+0x1e>
    69c0:	c6 c0       	rjmp	.+396    	; 0x6b4e <__fp_nan>
    69c2:	0e f4       	brtc	.+2      	; 0x69c6 <__addsf3+0x1e>
    69c4:	e0 95       	com	r30
    69c6:	e7 fb       	bst	r30, 7
    69c8:	bc c0       	rjmp	.+376    	; 0x6b42 <__fp_inf>

000069ca <__addsf3x>:
    69ca:	e9 2f       	mov	r30, r25
    69cc:	e2 d0       	rcall	.+452    	; 0x6b92 <__fp_split3>
    69ce:	80 f3       	brcs	.-32     	; 0x69b0 <__addsf3+0x8>
    69d0:	ba 17       	cp	r27, r26
    69d2:	62 07       	cpc	r22, r18
    69d4:	73 07       	cpc	r23, r19
    69d6:	84 07       	cpc	r24, r20
    69d8:	95 07       	cpc	r25, r21
    69da:	18 f0       	brcs	.+6      	; 0x69e2 <__addsf3x+0x18>
    69dc:	71 f4       	brne	.+28     	; 0x69fa <__addsf3x+0x30>
    69de:	9e f5       	brtc	.+102    	; 0x6a46 <__addsf3x+0x7c>
    69e0:	fa c0       	rjmp	.+500    	; 0x6bd6 <__fp_zero>
    69e2:	0e f4       	brtc	.+2      	; 0x69e6 <__addsf3x+0x1c>
    69e4:	e0 95       	com	r30
    69e6:	0b 2e       	mov	r0, r27
    69e8:	ba 2f       	mov	r27, r26
    69ea:	a0 2d       	mov	r26, r0
    69ec:	0b 01       	movw	r0, r22
    69ee:	b9 01       	movw	r22, r18
    69f0:	90 01       	movw	r18, r0
    69f2:	0c 01       	movw	r0, r24
    69f4:	ca 01       	movw	r24, r20
    69f6:	a0 01       	movw	r20, r0
    69f8:	11 24       	eor	r1, r1
    69fa:	ff 27       	eor	r31, r31
    69fc:	59 1b       	sub	r21, r25
    69fe:	99 f0       	breq	.+38     	; 0x6a26 <__addsf3x+0x5c>
    6a00:	59 3f       	cpi	r21, 0xF9	; 249
    6a02:	50 f4       	brcc	.+20     	; 0x6a18 <__addsf3x+0x4e>
    6a04:	50 3e       	cpi	r21, 0xE0	; 224
    6a06:	68 f1       	brcs	.+90     	; 0x6a62 <__addsf3x+0x98>
    6a08:	1a 16       	cp	r1, r26
    6a0a:	f0 40       	sbci	r31, 0x00	; 0
    6a0c:	a2 2f       	mov	r26, r18
    6a0e:	23 2f       	mov	r18, r19
    6a10:	34 2f       	mov	r19, r20
    6a12:	44 27       	eor	r20, r20
    6a14:	58 5f       	subi	r21, 0xF8	; 248
    6a16:	f3 cf       	rjmp	.-26     	; 0x69fe <__addsf3x+0x34>
    6a18:	46 95       	lsr	r20
    6a1a:	37 95       	ror	r19
    6a1c:	27 95       	ror	r18
    6a1e:	a7 95       	ror	r26
    6a20:	f0 40       	sbci	r31, 0x00	; 0
    6a22:	53 95       	inc	r21
    6a24:	c9 f7       	brne	.-14     	; 0x6a18 <__addsf3x+0x4e>
    6a26:	7e f4       	brtc	.+30     	; 0x6a46 <__addsf3x+0x7c>
    6a28:	1f 16       	cp	r1, r31
    6a2a:	ba 0b       	sbc	r27, r26
    6a2c:	62 0b       	sbc	r22, r18
    6a2e:	73 0b       	sbc	r23, r19
    6a30:	84 0b       	sbc	r24, r20
    6a32:	ba f0       	brmi	.+46     	; 0x6a62 <__addsf3x+0x98>
    6a34:	91 50       	subi	r25, 0x01	; 1
    6a36:	a1 f0       	breq	.+40     	; 0x6a60 <__addsf3x+0x96>
    6a38:	ff 0f       	add	r31, r31
    6a3a:	bb 1f       	adc	r27, r27
    6a3c:	66 1f       	adc	r22, r22
    6a3e:	77 1f       	adc	r23, r23
    6a40:	88 1f       	adc	r24, r24
    6a42:	c2 f7       	brpl	.-16     	; 0x6a34 <__addsf3x+0x6a>
    6a44:	0e c0       	rjmp	.+28     	; 0x6a62 <__addsf3x+0x98>
    6a46:	ba 0f       	add	r27, r26
    6a48:	62 1f       	adc	r22, r18
    6a4a:	73 1f       	adc	r23, r19
    6a4c:	84 1f       	adc	r24, r20
    6a4e:	48 f4       	brcc	.+18     	; 0x6a62 <__addsf3x+0x98>
    6a50:	87 95       	ror	r24
    6a52:	77 95       	ror	r23
    6a54:	67 95       	ror	r22
    6a56:	b7 95       	ror	r27
    6a58:	f7 95       	ror	r31
    6a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    6a5c:	08 f0       	brcs	.+2      	; 0x6a60 <__addsf3x+0x96>
    6a5e:	b3 cf       	rjmp	.-154    	; 0x69c6 <__addsf3+0x1e>
    6a60:	93 95       	inc	r25
    6a62:	88 0f       	add	r24, r24
    6a64:	08 f0       	brcs	.+2      	; 0x6a68 <__addsf3x+0x9e>
    6a66:	99 27       	eor	r25, r25
    6a68:	ee 0f       	add	r30, r30
    6a6a:	97 95       	ror	r25
    6a6c:	87 95       	ror	r24
    6a6e:	08 95       	ret

00006a70 <__fixunssfsi>:
    6a70:	98 d0       	rcall	.+304    	; 0x6ba2 <__fp_splitA>
    6a72:	88 f0       	brcs	.+34     	; 0x6a96 <__fixunssfsi+0x26>
    6a74:	9f 57       	subi	r25, 0x7F	; 127
    6a76:	90 f0       	brcs	.+36     	; 0x6a9c <__fixunssfsi+0x2c>
    6a78:	b9 2f       	mov	r27, r25
    6a7a:	99 27       	eor	r25, r25
    6a7c:	b7 51       	subi	r27, 0x17	; 23
    6a7e:	a0 f0       	brcs	.+40     	; 0x6aa8 <__fixunssfsi+0x38>
    6a80:	d1 f0       	breq	.+52     	; 0x6ab6 <__fixunssfsi+0x46>
    6a82:	66 0f       	add	r22, r22
    6a84:	77 1f       	adc	r23, r23
    6a86:	88 1f       	adc	r24, r24
    6a88:	99 1f       	adc	r25, r25
    6a8a:	1a f0       	brmi	.+6      	; 0x6a92 <__fixunssfsi+0x22>
    6a8c:	ba 95       	dec	r27
    6a8e:	c9 f7       	brne	.-14     	; 0x6a82 <__fixunssfsi+0x12>
    6a90:	12 c0       	rjmp	.+36     	; 0x6ab6 <__fixunssfsi+0x46>
    6a92:	b1 30       	cpi	r27, 0x01	; 1
    6a94:	81 f0       	breq	.+32     	; 0x6ab6 <__fixunssfsi+0x46>
    6a96:	9f d0       	rcall	.+318    	; 0x6bd6 <__fp_zero>
    6a98:	b1 e0       	ldi	r27, 0x01	; 1
    6a9a:	08 95       	ret
    6a9c:	9c c0       	rjmp	.+312    	; 0x6bd6 <__fp_zero>
    6a9e:	67 2f       	mov	r22, r23
    6aa0:	78 2f       	mov	r23, r24
    6aa2:	88 27       	eor	r24, r24
    6aa4:	b8 5f       	subi	r27, 0xF8	; 248
    6aa6:	39 f0       	breq	.+14     	; 0x6ab6 <__fixunssfsi+0x46>
    6aa8:	b9 3f       	cpi	r27, 0xF9	; 249
    6aaa:	cc f3       	brlt	.-14     	; 0x6a9e <__fixunssfsi+0x2e>
    6aac:	86 95       	lsr	r24
    6aae:	77 95       	ror	r23
    6ab0:	67 95       	ror	r22
    6ab2:	b3 95       	inc	r27
    6ab4:	d9 f7       	brne	.-10     	; 0x6aac <__fixunssfsi+0x3c>
    6ab6:	3e f4       	brtc	.+14     	; 0x6ac6 <__fixunssfsi+0x56>
    6ab8:	90 95       	com	r25
    6aba:	80 95       	com	r24
    6abc:	70 95       	com	r23
    6abe:	61 95       	neg	r22
    6ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac6:	08 95       	ret

00006ac8 <__floatunsisf>:
    6ac8:	e8 94       	clt
    6aca:	09 c0       	rjmp	.+18     	; 0x6ade <__floatsisf+0x12>

00006acc <__floatsisf>:
    6acc:	97 fb       	bst	r25, 7
    6ace:	3e f4       	brtc	.+14     	; 0x6ade <__floatsisf+0x12>
    6ad0:	90 95       	com	r25
    6ad2:	80 95       	com	r24
    6ad4:	70 95       	com	r23
    6ad6:	61 95       	neg	r22
    6ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    6ada:	8f 4f       	sbci	r24, 0xFF	; 255
    6adc:	9f 4f       	sbci	r25, 0xFF	; 255
    6ade:	99 23       	and	r25, r25
    6ae0:	a9 f0       	breq	.+42     	; 0x6b0c <__floatsisf+0x40>
    6ae2:	f9 2f       	mov	r31, r25
    6ae4:	96 e9       	ldi	r25, 0x96	; 150
    6ae6:	bb 27       	eor	r27, r27
    6ae8:	93 95       	inc	r25
    6aea:	f6 95       	lsr	r31
    6aec:	87 95       	ror	r24
    6aee:	77 95       	ror	r23
    6af0:	67 95       	ror	r22
    6af2:	b7 95       	ror	r27
    6af4:	f1 11       	cpse	r31, r1
    6af6:	f8 cf       	rjmp	.-16     	; 0x6ae8 <__floatsisf+0x1c>
    6af8:	fa f4       	brpl	.+62     	; 0x6b38 <__floatsisf+0x6c>
    6afa:	bb 0f       	add	r27, r27
    6afc:	11 f4       	brne	.+4      	; 0x6b02 <__floatsisf+0x36>
    6afe:	60 ff       	sbrs	r22, 0
    6b00:	1b c0       	rjmp	.+54     	; 0x6b38 <__floatsisf+0x6c>
    6b02:	6f 5f       	subi	r22, 0xFF	; 255
    6b04:	7f 4f       	sbci	r23, 0xFF	; 255
    6b06:	8f 4f       	sbci	r24, 0xFF	; 255
    6b08:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0a:	16 c0       	rjmp	.+44     	; 0x6b38 <__floatsisf+0x6c>
    6b0c:	88 23       	and	r24, r24
    6b0e:	11 f0       	breq	.+4      	; 0x6b14 <__floatsisf+0x48>
    6b10:	96 e9       	ldi	r25, 0x96	; 150
    6b12:	11 c0       	rjmp	.+34     	; 0x6b36 <__floatsisf+0x6a>
    6b14:	77 23       	and	r23, r23
    6b16:	21 f0       	breq	.+8      	; 0x6b20 <__floatsisf+0x54>
    6b18:	9e e8       	ldi	r25, 0x8E	; 142
    6b1a:	87 2f       	mov	r24, r23
    6b1c:	76 2f       	mov	r23, r22
    6b1e:	05 c0       	rjmp	.+10     	; 0x6b2a <__floatsisf+0x5e>
    6b20:	66 23       	and	r22, r22
    6b22:	71 f0       	breq	.+28     	; 0x6b40 <__floatsisf+0x74>
    6b24:	96 e8       	ldi	r25, 0x86	; 134
    6b26:	86 2f       	mov	r24, r22
    6b28:	70 e0       	ldi	r23, 0x00	; 0
    6b2a:	60 e0       	ldi	r22, 0x00	; 0
    6b2c:	2a f0       	brmi	.+10     	; 0x6b38 <__floatsisf+0x6c>
    6b2e:	9a 95       	dec	r25
    6b30:	66 0f       	add	r22, r22
    6b32:	77 1f       	adc	r23, r23
    6b34:	88 1f       	adc	r24, r24
    6b36:	da f7       	brpl	.-10     	; 0x6b2e <__floatsisf+0x62>
    6b38:	88 0f       	add	r24, r24
    6b3a:	96 95       	lsr	r25
    6b3c:	87 95       	ror	r24
    6b3e:	97 f9       	bld	r25, 7
    6b40:	08 95       	ret

00006b42 <__fp_inf>:
    6b42:	97 f9       	bld	r25, 7
    6b44:	9f 67       	ori	r25, 0x7F	; 127
    6b46:	80 e8       	ldi	r24, 0x80	; 128
    6b48:	70 e0       	ldi	r23, 0x00	; 0
    6b4a:	60 e0       	ldi	r22, 0x00	; 0
    6b4c:	08 95       	ret

00006b4e <__fp_nan>:
    6b4e:	9f ef       	ldi	r25, 0xFF	; 255
    6b50:	80 ec       	ldi	r24, 0xC0	; 192
    6b52:	08 95       	ret

00006b54 <__fp_pscA>:
    6b54:	00 24       	eor	r0, r0
    6b56:	0a 94       	dec	r0
    6b58:	16 16       	cp	r1, r22
    6b5a:	17 06       	cpc	r1, r23
    6b5c:	18 06       	cpc	r1, r24
    6b5e:	09 06       	cpc	r0, r25
    6b60:	08 95       	ret

00006b62 <__fp_pscB>:
    6b62:	00 24       	eor	r0, r0
    6b64:	0a 94       	dec	r0
    6b66:	12 16       	cp	r1, r18
    6b68:	13 06       	cpc	r1, r19
    6b6a:	14 06       	cpc	r1, r20
    6b6c:	05 06       	cpc	r0, r21
    6b6e:	08 95       	ret

00006b70 <__fp_round>:
    6b70:	09 2e       	mov	r0, r25
    6b72:	03 94       	inc	r0
    6b74:	00 0c       	add	r0, r0
    6b76:	11 f4       	brne	.+4      	; 0x6b7c <__fp_round+0xc>
    6b78:	88 23       	and	r24, r24
    6b7a:	52 f0       	brmi	.+20     	; 0x6b90 <__fp_round+0x20>
    6b7c:	bb 0f       	add	r27, r27
    6b7e:	40 f4       	brcc	.+16     	; 0x6b90 <__fp_round+0x20>
    6b80:	bf 2b       	or	r27, r31
    6b82:	11 f4       	brne	.+4      	; 0x6b88 <__fp_round+0x18>
    6b84:	60 ff       	sbrs	r22, 0
    6b86:	04 c0       	rjmp	.+8      	; 0x6b90 <__fp_round+0x20>
    6b88:	6f 5f       	subi	r22, 0xFF	; 255
    6b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    6b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b90:	08 95       	ret

00006b92 <__fp_split3>:
    6b92:	57 fd       	sbrc	r21, 7
    6b94:	90 58       	subi	r25, 0x80	; 128
    6b96:	44 0f       	add	r20, r20
    6b98:	55 1f       	adc	r21, r21
    6b9a:	59 f0       	breq	.+22     	; 0x6bb2 <__fp_splitA+0x10>
    6b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    6b9e:	71 f0       	breq	.+28     	; 0x6bbc <__fp_splitA+0x1a>
    6ba0:	47 95       	ror	r20

00006ba2 <__fp_splitA>:
    6ba2:	88 0f       	add	r24, r24
    6ba4:	97 fb       	bst	r25, 7
    6ba6:	99 1f       	adc	r25, r25
    6ba8:	61 f0       	breq	.+24     	; 0x6bc2 <__fp_splitA+0x20>
    6baa:	9f 3f       	cpi	r25, 0xFF	; 255
    6bac:	79 f0       	breq	.+30     	; 0x6bcc <__fp_splitA+0x2a>
    6bae:	87 95       	ror	r24
    6bb0:	08 95       	ret
    6bb2:	12 16       	cp	r1, r18
    6bb4:	13 06       	cpc	r1, r19
    6bb6:	14 06       	cpc	r1, r20
    6bb8:	55 1f       	adc	r21, r21
    6bba:	f2 cf       	rjmp	.-28     	; 0x6ba0 <__fp_split3+0xe>
    6bbc:	46 95       	lsr	r20
    6bbe:	f1 df       	rcall	.-30     	; 0x6ba2 <__fp_splitA>
    6bc0:	08 c0       	rjmp	.+16     	; 0x6bd2 <__fp_splitA+0x30>
    6bc2:	16 16       	cp	r1, r22
    6bc4:	17 06       	cpc	r1, r23
    6bc6:	18 06       	cpc	r1, r24
    6bc8:	99 1f       	adc	r25, r25
    6bca:	f1 cf       	rjmp	.-30     	; 0x6bae <__fp_splitA+0xc>
    6bcc:	86 95       	lsr	r24
    6bce:	71 05       	cpc	r23, r1
    6bd0:	61 05       	cpc	r22, r1
    6bd2:	08 94       	sec
    6bd4:	08 95       	ret

00006bd6 <__fp_zero>:
    6bd6:	e8 94       	clt

00006bd8 <__fp_szero>:
    6bd8:	bb 27       	eor	r27, r27
    6bda:	66 27       	eor	r22, r22
    6bdc:	77 27       	eor	r23, r23
    6bde:	cb 01       	movw	r24, r22
    6be0:	97 f9       	bld	r25, 7
    6be2:	08 95       	ret

00006be4 <__mulsf3>:
    6be4:	0b d0       	rcall	.+22     	; 0x6bfc <__mulsf3x>
    6be6:	c4 cf       	rjmp	.-120    	; 0x6b70 <__fp_round>
    6be8:	b5 df       	rcall	.-150    	; 0x6b54 <__fp_pscA>
    6bea:	28 f0       	brcs	.+10     	; 0x6bf6 <__mulsf3+0x12>
    6bec:	ba df       	rcall	.-140    	; 0x6b62 <__fp_pscB>
    6bee:	18 f0       	brcs	.+6      	; 0x6bf6 <__mulsf3+0x12>
    6bf0:	95 23       	and	r25, r21
    6bf2:	09 f0       	breq	.+2      	; 0x6bf6 <__mulsf3+0x12>
    6bf4:	a6 cf       	rjmp	.-180    	; 0x6b42 <__fp_inf>
    6bf6:	ab cf       	rjmp	.-170    	; 0x6b4e <__fp_nan>
    6bf8:	11 24       	eor	r1, r1
    6bfa:	ee cf       	rjmp	.-36     	; 0x6bd8 <__fp_szero>

00006bfc <__mulsf3x>:
    6bfc:	ca df       	rcall	.-108    	; 0x6b92 <__fp_split3>
    6bfe:	a0 f3       	brcs	.-24     	; 0x6be8 <__mulsf3+0x4>

00006c00 <__mulsf3_pse>:
    6c00:	95 9f       	mul	r25, r21
    6c02:	d1 f3       	breq	.-12     	; 0x6bf8 <__mulsf3+0x14>
    6c04:	95 0f       	add	r25, r21
    6c06:	50 e0       	ldi	r21, 0x00	; 0
    6c08:	55 1f       	adc	r21, r21
    6c0a:	62 9f       	mul	r22, r18
    6c0c:	f0 01       	movw	r30, r0
    6c0e:	72 9f       	mul	r23, r18
    6c10:	bb 27       	eor	r27, r27
    6c12:	f0 0d       	add	r31, r0
    6c14:	b1 1d       	adc	r27, r1
    6c16:	63 9f       	mul	r22, r19
    6c18:	aa 27       	eor	r26, r26
    6c1a:	f0 0d       	add	r31, r0
    6c1c:	b1 1d       	adc	r27, r1
    6c1e:	aa 1f       	adc	r26, r26
    6c20:	64 9f       	mul	r22, r20
    6c22:	66 27       	eor	r22, r22
    6c24:	b0 0d       	add	r27, r0
    6c26:	a1 1d       	adc	r26, r1
    6c28:	66 1f       	adc	r22, r22
    6c2a:	82 9f       	mul	r24, r18
    6c2c:	22 27       	eor	r18, r18
    6c2e:	b0 0d       	add	r27, r0
    6c30:	a1 1d       	adc	r26, r1
    6c32:	62 1f       	adc	r22, r18
    6c34:	73 9f       	mul	r23, r19
    6c36:	b0 0d       	add	r27, r0
    6c38:	a1 1d       	adc	r26, r1
    6c3a:	62 1f       	adc	r22, r18
    6c3c:	83 9f       	mul	r24, r19
    6c3e:	a0 0d       	add	r26, r0
    6c40:	61 1d       	adc	r22, r1
    6c42:	22 1f       	adc	r18, r18
    6c44:	74 9f       	mul	r23, r20
    6c46:	33 27       	eor	r19, r19
    6c48:	a0 0d       	add	r26, r0
    6c4a:	61 1d       	adc	r22, r1
    6c4c:	23 1f       	adc	r18, r19
    6c4e:	84 9f       	mul	r24, r20
    6c50:	60 0d       	add	r22, r0
    6c52:	21 1d       	adc	r18, r1
    6c54:	82 2f       	mov	r24, r18
    6c56:	76 2f       	mov	r23, r22
    6c58:	6a 2f       	mov	r22, r26
    6c5a:	11 24       	eor	r1, r1
    6c5c:	9f 57       	subi	r25, 0x7F	; 127
    6c5e:	50 40       	sbci	r21, 0x00	; 0
    6c60:	8a f0       	brmi	.+34     	; 0x6c84 <__mulsf3_pse+0x84>
    6c62:	e1 f0       	breq	.+56     	; 0x6c9c <__mulsf3_pse+0x9c>
    6c64:	88 23       	and	r24, r24
    6c66:	4a f0       	brmi	.+18     	; 0x6c7a <__mulsf3_pse+0x7a>
    6c68:	ee 0f       	add	r30, r30
    6c6a:	ff 1f       	adc	r31, r31
    6c6c:	bb 1f       	adc	r27, r27
    6c6e:	66 1f       	adc	r22, r22
    6c70:	77 1f       	adc	r23, r23
    6c72:	88 1f       	adc	r24, r24
    6c74:	91 50       	subi	r25, 0x01	; 1
    6c76:	50 40       	sbci	r21, 0x00	; 0
    6c78:	a9 f7       	brne	.-22     	; 0x6c64 <__mulsf3_pse+0x64>
    6c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    6c7c:	51 05       	cpc	r21, r1
    6c7e:	70 f0       	brcs	.+28     	; 0x6c9c <__mulsf3_pse+0x9c>
    6c80:	60 cf       	rjmp	.-320    	; 0x6b42 <__fp_inf>
    6c82:	aa cf       	rjmp	.-172    	; 0x6bd8 <__fp_szero>
    6c84:	5f 3f       	cpi	r21, 0xFF	; 255
    6c86:	ec f3       	brlt	.-6      	; 0x6c82 <__mulsf3_pse+0x82>
    6c88:	98 3e       	cpi	r25, 0xE8	; 232
    6c8a:	dc f3       	brlt	.-10     	; 0x6c82 <__mulsf3_pse+0x82>
    6c8c:	86 95       	lsr	r24
    6c8e:	77 95       	ror	r23
    6c90:	67 95       	ror	r22
    6c92:	b7 95       	ror	r27
    6c94:	f7 95       	ror	r31
    6c96:	e7 95       	ror	r30
    6c98:	9f 5f       	subi	r25, 0xFF	; 255
    6c9a:	c1 f7       	brne	.-16     	; 0x6c8c <__mulsf3_pse+0x8c>
    6c9c:	fe 2b       	or	r31, r30
    6c9e:	88 0f       	add	r24, r24
    6ca0:	91 1d       	adc	r25, r1
    6ca2:	96 95       	lsr	r25
    6ca4:	87 95       	ror	r24
    6ca6:	97 f9       	bld	r25, 7
    6ca8:	08 95       	ret

00006caa <pow>:
    6caa:	fa 01       	movw	r30, r20
    6cac:	ee 0f       	add	r30, r30
    6cae:	ff 1f       	adc	r31, r31
    6cb0:	30 96       	adiw	r30, 0x00	; 0
    6cb2:	21 05       	cpc	r18, r1
    6cb4:	31 05       	cpc	r19, r1
    6cb6:	99 f1       	breq	.+102    	; 0x6d1e <pow+0x74>
    6cb8:	61 15       	cp	r22, r1
    6cba:	71 05       	cpc	r23, r1
    6cbc:	61 f4       	brne	.+24     	; 0x6cd6 <pow+0x2c>
    6cbe:	80 38       	cpi	r24, 0x80	; 128
    6cc0:	bf e3       	ldi	r27, 0x3F	; 63
    6cc2:	9b 07       	cpc	r25, r27
    6cc4:	49 f1       	breq	.+82     	; 0x6d18 <pow+0x6e>
    6cc6:	68 94       	set
    6cc8:	90 38       	cpi	r25, 0x80	; 128
    6cca:	81 05       	cpc	r24, r1
    6ccc:	61 f0       	breq	.+24     	; 0x6ce6 <pow+0x3c>
    6cce:	80 38       	cpi	r24, 0x80	; 128
    6cd0:	bf ef       	ldi	r27, 0xFF	; 255
    6cd2:	9b 07       	cpc	r25, r27
    6cd4:	41 f0       	breq	.+16     	; 0x6ce6 <pow+0x3c>
    6cd6:	99 23       	and	r25, r25
    6cd8:	42 f5       	brpl	.+80     	; 0x6d2a <pow+0x80>
    6cda:	ff 3f       	cpi	r31, 0xFF	; 255
    6cdc:	e1 05       	cpc	r30, r1
    6cde:	31 05       	cpc	r19, r1
    6ce0:	21 05       	cpc	r18, r1
    6ce2:	11 f1       	breq	.+68     	; 0x6d28 <pow+0x7e>
    6ce4:	e8 94       	clt
    6ce6:	08 94       	sec
    6ce8:	e7 95       	ror	r30
    6cea:	d9 01       	movw	r26, r18
    6cec:	aa 23       	and	r26, r26
    6cee:	29 f4       	brne	.+10     	; 0x6cfa <pow+0x50>
    6cf0:	ab 2f       	mov	r26, r27
    6cf2:	be 2f       	mov	r27, r30
    6cf4:	f8 5f       	subi	r31, 0xF8	; 248
    6cf6:	d0 f3       	brcs	.-12     	; 0x6cec <pow+0x42>
    6cf8:	10 c0       	rjmp	.+32     	; 0x6d1a <pow+0x70>
    6cfa:	ff 5f       	subi	r31, 0xFF	; 255
    6cfc:	70 f4       	brcc	.+28     	; 0x6d1a <pow+0x70>
    6cfe:	a6 95       	lsr	r26
    6d00:	e0 f7       	brcc	.-8      	; 0x6cfa <pow+0x50>
    6d02:	f7 39       	cpi	r31, 0x97	; 151
    6d04:	50 f0       	brcs	.+20     	; 0x6d1a <pow+0x70>
    6d06:	19 f0       	breq	.+6      	; 0x6d0e <pow+0x64>
    6d08:	ff 3a       	cpi	r31, 0xAF	; 175
    6d0a:	38 f4       	brcc	.+14     	; 0x6d1a <pow+0x70>
    6d0c:	9f 77       	andi	r25, 0x7F	; 127
    6d0e:	9f 93       	push	r25
    6d10:	0c d0       	rcall	.+24     	; 0x6d2a <pow+0x80>
    6d12:	0f 90       	pop	r0
    6d14:	07 fc       	sbrc	r0, 7
    6d16:	90 58       	subi	r25, 0x80	; 128
    6d18:	08 95       	ret
    6d1a:	3e f0       	brts	.+14     	; 0x6d2a <pow+0x80>
    6d1c:	18 cf       	rjmp	.-464    	; 0x6b4e <__fp_nan>
    6d1e:	60 e0       	ldi	r22, 0x00	; 0
    6d20:	70 e0       	ldi	r23, 0x00	; 0
    6d22:	80 e8       	ldi	r24, 0x80	; 128
    6d24:	9f e3       	ldi	r25, 0x3F	; 63
    6d26:	08 95       	ret
    6d28:	4f e7       	ldi	r20, 0x7F	; 127
    6d2a:	9f 77       	andi	r25, 0x7F	; 127
    6d2c:	5f 93       	push	r21
    6d2e:	4f 93       	push	r20
    6d30:	3f 93       	push	r19
    6d32:	2f 93       	push	r18
    6d34:	9e d0       	rcall	.+316    	; 0x6e72 <log>
    6d36:	2f 91       	pop	r18
    6d38:	3f 91       	pop	r19
    6d3a:	4f 91       	pop	r20
    6d3c:	5f 91       	pop	r21
    6d3e:	52 df       	rcall	.-348    	; 0x6be4 <__mulsf3>
    6d40:	05 c0       	rjmp	.+10     	; 0x6d4c <exp>
    6d42:	19 f4       	brne	.+6      	; 0x6d4a <pow+0xa0>
    6d44:	0e f0       	brts	.+2      	; 0x6d48 <pow+0x9e>
    6d46:	fd ce       	rjmp	.-518    	; 0x6b42 <__fp_inf>
    6d48:	46 cf       	rjmp	.-372    	; 0x6bd6 <__fp_zero>
    6d4a:	01 cf       	rjmp	.-510    	; 0x6b4e <__fp_nan>

00006d4c <exp>:
    6d4c:	2a df       	rcall	.-428    	; 0x6ba2 <__fp_splitA>
    6d4e:	c8 f3       	brcs	.-14     	; 0x6d42 <pow+0x98>
    6d50:	96 38       	cpi	r25, 0x86	; 134
    6d52:	c0 f7       	brcc	.-16     	; 0x6d44 <pow+0x9a>
    6d54:	07 f8       	bld	r0, 7
    6d56:	0f 92       	push	r0
    6d58:	e8 94       	clt
    6d5a:	2b e3       	ldi	r18, 0x3B	; 59
    6d5c:	3a ea       	ldi	r19, 0xAA	; 170
    6d5e:	48 eb       	ldi	r20, 0xB8	; 184
    6d60:	5f e7       	ldi	r21, 0x7F	; 127
    6d62:	4e df       	rcall	.-356    	; 0x6c00 <__mulsf3_pse>
    6d64:	0f 92       	push	r0
    6d66:	0f 92       	push	r0
    6d68:	0f 92       	push	r0
    6d6a:	4d b7       	in	r20, 0x3d	; 61
    6d6c:	5e b7       	in	r21, 0x3e	; 62
    6d6e:	0f 92       	push	r0
    6d70:	c0 d0       	rcall	.+384    	; 0x6ef2 <modf>
    6d72:	e4 e5       	ldi	r30, 0x54	; 84
    6d74:	f0 e0       	ldi	r31, 0x00	; 0
    6d76:	16 d0       	rcall	.+44     	; 0x6da4 <__fp_powser>
    6d78:	4f 91       	pop	r20
    6d7a:	5f 91       	pop	r21
    6d7c:	ef 91       	pop	r30
    6d7e:	ff 91       	pop	r31
    6d80:	e5 95       	asr	r30
    6d82:	ee 1f       	adc	r30, r30
    6d84:	ff 1f       	adc	r31, r31
    6d86:	49 f0       	breq	.+18     	; 0x6d9a <exp+0x4e>
    6d88:	fe 57       	subi	r31, 0x7E	; 126
    6d8a:	e0 68       	ori	r30, 0x80	; 128
    6d8c:	44 27       	eor	r20, r20
    6d8e:	ee 0f       	add	r30, r30
    6d90:	44 1f       	adc	r20, r20
    6d92:	fa 95       	dec	r31
    6d94:	e1 f7       	brne	.-8      	; 0x6d8e <exp+0x42>
    6d96:	41 95       	neg	r20
    6d98:	55 0b       	sbc	r21, r21
    6d9a:	32 d0       	rcall	.+100    	; 0x6e00 <ldexp>
    6d9c:	0f 90       	pop	r0
    6d9e:	07 fe       	sbrs	r0, 7
    6da0:	26 c0       	rjmp	.+76     	; 0x6dee <inverse>
    6da2:	08 95       	ret

00006da4 <__fp_powser>:
    6da4:	df 93       	push	r29
    6da6:	cf 93       	push	r28
    6da8:	1f 93       	push	r17
    6daa:	0f 93       	push	r16
    6dac:	ff 92       	push	r15
    6dae:	ef 92       	push	r14
    6db0:	df 92       	push	r13
    6db2:	7b 01       	movw	r14, r22
    6db4:	8c 01       	movw	r16, r24
    6db6:	68 94       	set
    6db8:	05 c0       	rjmp	.+10     	; 0x6dc4 <__fp_powser+0x20>
    6dba:	da 2e       	mov	r13, r26
    6dbc:	ef 01       	movw	r28, r30
    6dbe:	1e df       	rcall	.-452    	; 0x6bfc <__mulsf3x>
    6dc0:	fe 01       	movw	r30, r28
    6dc2:	e8 94       	clt
    6dc4:	a5 91       	lpm	r26, Z+
    6dc6:	25 91       	lpm	r18, Z+
    6dc8:	35 91       	lpm	r19, Z+
    6dca:	45 91       	lpm	r20, Z+
    6dcc:	55 91       	lpm	r21, Z+
    6dce:	ae f3       	brts	.-22     	; 0x6dba <__fp_powser+0x16>
    6dd0:	ef 01       	movw	r28, r30
    6dd2:	fb dd       	rcall	.-1034   	; 0x69ca <__addsf3x>
    6dd4:	fe 01       	movw	r30, r28
    6dd6:	97 01       	movw	r18, r14
    6dd8:	a8 01       	movw	r20, r16
    6dda:	da 94       	dec	r13
    6ddc:	79 f7       	brne	.-34     	; 0x6dbc <__fp_powser+0x18>
    6dde:	df 90       	pop	r13
    6de0:	ef 90       	pop	r14
    6de2:	ff 90       	pop	r15
    6de4:	0f 91       	pop	r16
    6de6:	1f 91       	pop	r17
    6de8:	cf 91       	pop	r28
    6dea:	df 91       	pop	r29
    6dec:	08 95       	ret

00006dee <inverse>:
    6dee:	9b 01       	movw	r18, r22
    6df0:	ac 01       	movw	r20, r24
    6df2:	60 e0       	ldi	r22, 0x00	; 0
    6df4:	70 e0       	ldi	r23, 0x00	; 0
    6df6:	80 e8       	ldi	r24, 0x80	; 128
    6df8:	9f e3       	ldi	r25, 0x3F	; 63
    6dfa:	ae c0       	rjmp	.+348    	; 0x6f58 <__divsf3>
    6dfc:	a2 ce       	rjmp	.-700    	; 0x6b42 <__fp_inf>
    6dfe:	14 c1       	rjmp	.+552    	; 0x7028 <__fp_mpack>

00006e00 <ldexp>:
    6e00:	d0 de       	rcall	.-608    	; 0x6ba2 <__fp_splitA>
    6e02:	e8 f3       	brcs	.-6      	; 0x6dfe <inverse+0x10>
    6e04:	99 23       	and	r25, r25
    6e06:	d9 f3       	breq	.-10     	; 0x6dfe <inverse+0x10>
    6e08:	94 0f       	add	r25, r20
    6e0a:	51 1d       	adc	r21, r1
    6e0c:	bb f3       	brvs	.-18     	; 0x6dfc <inverse+0xe>
    6e0e:	91 50       	subi	r25, 0x01	; 1
    6e10:	50 40       	sbci	r21, 0x00	; 0
    6e12:	94 f0       	brlt	.+36     	; 0x6e38 <ldexp+0x38>
    6e14:	59 f0       	breq	.+22     	; 0x6e2c <ldexp+0x2c>
    6e16:	88 23       	and	r24, r24
    6e18:	32 f0       	brmi	.+12     	; 0x6e26 <ldexp+0x26>
    6e1a:	66 0f       	add	r22, r22
    6e1c:	77 1f       	adc	r23, r23
    6e1e:	88 1f       	adc	r24, r24
    6e20:	91 50       	subi	r25, 0x01	; 1
    6e22:	50 40       	sbci	r21, 0x00	; 0
    6e24:	c1 f7       	brne	.-16     	; 0x6e16 <ldexp+0x16>
    6e26:	9e 3f       	cpi	r25, 0xFE	; 254
    6e28:	51 05       	cpc	r21, r1
    6e2a:	44 f7       	brge	.-48     	; 0x6dfc <inverse+0xe>
    6e2c:	88 0f       	add	r24, r24
    6e2e:	91 1d       	adc	r25, r1
    6e30:	96 95       	lsr	r25
    6e32:	87 95       	ror	r24
    6e34:	97 f9       	bld	r25, 7
    6e36:	08 95       	ret
    6e38:	5f 3f       	cpi	r21, 0xFF	; 255
    6e3a:	ac f0       	brlt	.+42     	; 0x6e66 <ldexp+0x66>
    6e3c:	98 3e       	cpi	r25, 0xE8	; 232
    6e3e:	9c f0       	brlt	.+38     	; 0x6e66 <ldexp+0x66>
    6e40:	bb 27       	eor	r27, r27
    6e42:	86 95       	lsr	r24
    6e44:	77 95       	ror	r23
    6e46:	67 95       	ror	r22
    6e48:	b7 95       	ror	r27
    6e4a:	08 f4       	brcc	.+2      	; 0x6e4e <ldexp+0x4e>
    6e4c:	b1 60       	ori	r27, 0x01	; 1
    6e4e:	93 95       	inc	r25
    6e50:	c1 f7       	brne	.-16     	; 0x6e42 <ldexp+0x42>
    6e52:	bb 0f       	add	r27, r27
    6e54:	58 f7       	brcc	.-42     	; 0x6e2c <ldexp+0x2c>
    6e56:	11 f4       	brne	.+4      	; 0x6e5c <ldexp+0x5c>
    6e58:	60 ff       	sbrs	r22, 0
    6e5a:	e8 cf       	rjmp	.-48     	; 0x6e2c <ldexp+0x2c>
    6e5c:	6f 5f       	subi	r22, 0xFF	; 255
    6e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e60:	8f 4f       	sbci	r24, 0xFF	; 255
    6e62:	9f 4f       	sbci	r25, 0xFF	; 255
    6e64:	e3 cf       	rjmp	.-58     	; 0x6e2c <ldexp+0x2c>
    6e66:	b8 ce       	rjmp	.-656    	; 0x6bd8 <__fp_szero>
    6e68:	0e f0       	brts	.+2      	; 0x6e6c <ldexp+0x6c>
    6e6a:	de c0       	rjmp	.+444    	; 0x7028 <__fp_mpack>
    6e6c:	70 ce       	rjmp	.-800    	; 0x6b4e <__fp_nan>
    6e6e:	68 94       	set
    6e70:	68 ce       	rjmp	.-816    	; 0x6b42 <__fp_inf>

00006e72 <log>:
    6e72:	97 de       	rcall	.-722    	; 0x6ba2 <__fp_splitA>
    6e74:	c8 f3       	brcs	.-14     	; 0x6e68 <ldexp+0x68>
    6e76:	99 23       	and	r25, r25
    6e78:	d1 f3       	breq	.-12     	; 0x6e6e <ldexp+0x6e>
    6e7a:	c6 f3       	brts	.-16     	; 0x6e6c <ldexp+0x6c>
    6e7c:	df 93       	push	r29
    6e7e:	cf 93       	push	r28
    6e80:	1f 93       	push	r17
    6e82:	0f 93       	push	r16
    6e84:	ff 92       	push	r15
    6e86:	c9 2f       	mov	r28, r25
    6e88:	dd 27       	eor	r29, r29
    6e8a:	88 23       	and	r24, r24
    6e8c:	2a f0       	brmi	.+10     	; 0x6e98 <log+0x26>
    6e8e:	21 97       	sbiw	r28, 0x01	; 1
    6e90:	66 0f       	add	r22, r22
    6e92:	77 1f       	adc	r23, r23
    6e94:	88 1f       	adc	r24, r24
    6e96:	da f7       	brpl	.-10     	; 0x6e8e <log+0x1c>
    6e98:	20 e0       	ldi	r18, 0x00	; 0
    6e9a:	30 e0       	ldi	r19, 0x00	; 0
    6e9c:	40 e8       	ldi	r20, 0x80	; 128
    6e9e:	5f eb       	ldi	r21, 0xBF	; 191
    6ea0:	9f e3       	ldi	r25, 0x3F	; 63
    6ea2:	88 39       	cpi	r24, 0x98	; 152
    6ea4:	20 f0       	brcs	.+8      	; 0x6eae <log+0x3c>
    6ea6:	80 3e       	cpi	r24, 0xE0	; 224
    6ea8:	30 f0       	brcs	.+12     	; 0x6eb6 <log+0x44>
    6eaa:	21 96       	adiw	r28, 0x01	; 1
    6eac:	8f 77       	andi	r24, 0x7F	; 127
    6eae:	7c dd       	rcall	.-1288   	; 0x69a8 <__addsf3>
    6eb0:	ec e7       	ldi	r30, 0x7C	; 124
    6eb2:	f0 e0       	ldi	r31, 0x00	; 0
    6eb4:	03 c0       	rjmp	.+6      	; 0x6ebc <log+0x4a>
    6eb6:	78 dd       	rcall	.-1296   	; 0x69a8 <__addsf3>
    6eb8:	e9 ea       	ldi	r30, 0xA9	; 169
    6eba:	f0 e0       	ldi	r31, 0x00	; 0
    6ebc:	73 df       	rcall	.-282    	; 0x6da4 <__fp_powser>
    6ebe:	8b 01       	movw	r16, r22
    6ec0:	be 01       	movw	r22, r28
    6ec2:	ec 01       	movw	r28, r24
    6ec4:	fb 2e       	mov	r15, r27
    6ec6:	6f 57       	subi	r22, 0x7F	; 127
    6ec8:	71 09       	sbc	r23, r1
    6eca:	75 95       	asr	r23
    6ecc:	77 1f       	adc	r23, r23
    6ece:	88 0b       	sbc	r24, r24
    6ed0:	99 0b       	sbc	r25, r25
    6ed2:	fc dd       	rcall	.-1032   	; 0x6acc <__floatsisf>
    6ed4:	28 e1       	ldi	r18, 0x18	; 24
    6ed6:	32 e7       	ldi	r19, 0x72	; 114
    6ed8:	41 e3       	ldi	r20, 0x31	; 49
    6eda:	5f e3       	ldi	r21, 0x3F	; 63
    6edc:	8f de       	rcall	.-738    	; 0x6bfc <__mulsf3x>
    6ede:	af 2d       	mov	r26, r15
    6ee0:	98 01       	movw	r18, r16
    6ee2:	ae 01       	movw	r20, r28
    6ee4:	ff 90       	pop	r15
    6ee6:	0f 91       	pop	r16
    6ee8:	1f 91       	pop	r17
    6eea:	cf 91       	pop	r28
    6eec:	df 91       	pop	r29
    6eee:	6d dd       	rcall	.-1318   	; 0x69ca <__addsf3x>
    6ef0:	3f ce       	rjmp	.-898    	; 0x6b70 <__fp_round>

00006ef2 <modf>:
    6ef2:	fa 01       	movw	r30, r20
    6ef4:	dc 01       	movw	r26, r24
    6ef6:	aa 0f       	add	r26, r26
    6ef8:	bb 1f       	adc	r27, r27
    6efa:	9b 01       	movw	r18, r22
    6efc:	ac 01       	movw	r20, r24
    6efe:	bf 57       	subi	r27, 0x7F	; 127
    6f00:	28 f4       	brcc	.+10     	; 0x6f0c <modf+0x1a>
    6f02:	22 27       	eor	r18, r18
    6f04:	33 27       	eor	r19, r19
    6f06:	44 27       	eor	r20, r20
    6f08:	50 78       	andi	r21, 0x80	; 128
    6f0a:	1f c0       	rjmp	.+62     	; 0x6f4a <modf+0x58>
    6f0c:	b7 51       	subi	r27, 0x17	; 23
    6f0e:	88 f4       	brcc	.+34     	; 0x6f32 <modf+0x40>
    6f10:	ab 2f       	mov	r26, r27
    6f12:	00 24       	eor	r0, r0
    6f14:	46 95       	lsr	r20
    6f16:	37 95       	ror	r19
    6f18:	27 95       	ror	r18
    6f1a:	01 1c       	adc	r0, r1
    6f1c:	a3 95       	inc	r26
    6f1e:	d2 f3       	brmi	.-12     	; 0x6f14 <modf+0x22>
    6f20:	00 20       	and	r0, r0
    6f22:	69 f0       	breq	.+26     	; 0x6f3e <modf+0x4c>
    6f24:	22 0f       	add	r18, r18
    6f26:	33 1f       	adc	r19, r19
    6f28:	44 1f       	adc	r20, r20
    6f2a:	b3 95       	inc	r27
    6f2c:	da f3       	brmi	.-10     	; 0x6f24 <modf+0x32>
    6f2e:	0d d0       	rcall	.+26     	; 0x6f4a <modf+0x58>
    6f30:	3a cd       	rjmp	.-1420   	; 0x69a6 <__subsf3>
    6f32:	61 30       	cpi	r22, 0x01	; 1
    6f34:	71 05       	cpc	r23, r1
    6f36:	a0 e8       	ldi	r26, 0x80	; 128
    6f38:	8a 07       	cpc	r24, r26
    6f3a:	b9 46       	sbci	r27, 0x69	; 105
    6f3c:	30 f4       	brcc	.+12     	; 0x6f4a <modf+0x58>
    6f3e:	9b 01       	movw	r18, r22
    6f40:	ac 01       	movw	r20, r24
    6f42:	66 27       	eor	r22, r22
    6f44:	77 27       	eor	r23, r23
    6f46:	88 27       	eor	r24, r24
    6f48:	90 78       	andi	r25, 0x80	; 128
    6f4a:	30 96       	adiw	r30, 0x00	; 0
    6f4c:	21 f0       	breq	.+8      	; 0x6f56 <modf+0x64>
    6f4e:	20 83       	st	Z, r18
    6f50:	31 83       	std	Z+1, r19	; 0x01
    6f52:	42 83       	std	Z+2, r20	; 0x02
    6f54:	53 83       	std	Z+3, r21	; 0x03
    6f56:	08 95       	ret

00006f58 <__divsf3>:
    6f58:	0c d0       	rcall	.+24     	; 0x6f72 <__divsf3x>
    6f5a:	0a ce       	rjmp	.-1004   	; 0x6b70 <__fp_round>
    6f5c:	02 de       	rcall	.-1020   	; 0x6b62 <__fp_pscB>
    6f5e:	40 f0       	brcs	.+16     	; 0x6f70 <__divsf3+0x18>
    6f60:	f9 dd       	rcall	.-1038   	; 0x6b54 <__fp_pscA>
    6f62:	30 f0       	brcs	.+12     	; 0x6f70 <__divsf3+0x18>
    6f64:	21 f4       	brne	.+8      	; 0x6f6e <__divsf3+0x16>
    6f66:	5f 3f       	cpi	r21, 0xFF	; 255
    6f68:	19 f0       	breq	.+6      	; 0x6f70 <__divsf3+0x18>
    6f6a:	eb cd       	rjmp	.-1066   	; 0x6b42 <__fp_inf>
    6f6c:	51 11       	cpse	r21, r1
    6f6e:	34 ce       	rjmp	.-920    	; 0x6bd8 <__fp_szero>
    6f70:	ee cd       	rjmp	.-1060   	; 0x6b4e <__fp_nan>

00006f72 <__divsf3x>:
    6f72:	0f de       	rcall	.-994    	; 0x6b92 <__fp_split3>
    6f74:	98 f3       	brcs	.-26     	; 0x6f5c <__divsf3+0x4>

00006f76 <__divsf3_pse>:
    6f76:	99 23       	and	r25, r25
    6f78:	c9 f3       	breq	.-14     	; 0x6f6c <__divsf3+0x14>
    6f7a:	55 23       	and	r21, r21
    6f7c:	b1 f3       	breq	.-20     	; 0x6f6a <__divsf3+0x12>
    6f7e:	95 1b       	sub	r25, r21
    6f80:	55 0b       	sbc	r21, r21
    6f82:	bb 27       	eor	r27, r27
    6f84:	aa 27       	eor	r26, r26
    6f86:	62 17       	cp	r22, r18
    6f88:	73 07       	cpc	r23, r19
    6f8a:	84 07       	cpc	r24, r20
    6f8c:	38 f0       	brcs	.+14     	; 0x6f9c <__divsf3_pse+0x26>
    6f8e:	9f 5f       	subi	r25, 0xFF	; 255
    6f90:	5f 4f       	sbci	r21, 0xFF	; 255
    6f92:	22 0f       	add	r18, r18
    6f94:	33 1f       	adc	r19, r19
    6f96:	44 1f       	adc	r20, r20
    6f98:	aa 1f       	adc	r26, r26
    6f9a:	a9 f3       	breq	.-22     	; 0x6f86 <__divsf3_pse+0x10>
    6f9c:	33 d0       	rcall	.+102    	; 0x7004 <__divsf3_pse+0x8e>
    6f9e:	0e 2e       	mov	r0, r30
    6fa0:	3a f0       	brmi	.+14     	; 0x6fb0 <__divsf3_pse+0x3a>
    6fa2:	e0 e8       	ldi	r30, 0x80	; 128
    6fa4:	30 d0       	rcall	.+96     	; 0x7006 <__divsf3_pse+0x90>
    6fa6:	91 50       	subi	r25, 0x01	; 1
    6fa8:	50 40       	sbci	r21, 0x00	; 0
    6faa:	e6 95       	lsr	r30
    6fac:	00 1c       	adc	r0, r0
    6fae:	ca f7       	brpl	.-14     	; 0x6fa2 <__divsf3_pse+0x2c>
    6fb0:	29 d0       	rcall	.+82     	; 0x7004 <__divsf3_pse+0x8e>
    6fb2:	fe 2f       	mov	r31, r30
    6fb4:	27 d0       	rcall	.+78     	; 0x7004 <__divsf3_pse+0x8e>
    6fb6:	66 0f       	add	r22, r22
    6fb8:	77 1f       	adc	r23, r23
    6fba:	88 1f       	adc	r24, r24
    6fbc:	bb 1f       	adc	r27, r27
    6fbe:	26 17       	cp	r18, r22
    6fc0:	37 07       	cpc	r19, r23
    6fc2:	48 07       	cpc	r20, r24
    6fc4:	ab 07       	cpc	r26, r27
    6fc6:	b0 e8       	ldi	r27, 0x80	; 128
    6fc8:	09 f0       	breq	.+2      	; 0x6fcc <__divsf3_pse+0x56>
    6fca:	bb 0b       	sbc	r27, r27
    6fcc:	80 2d       	mov	r24, r0
    6fce:	bf 01       	movw	r22, r30
    6fd0:	ff 27       	eor	r31, r31
    6fd2:	93 58       	subi	r25, 0x83	; 131
    6fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fd6:	2a f0       	brmi	.+10     	; 0x6fe2 <__divsf3_pse+0x6c>
    6fd8:	9e 3f       	cpi	r25, 0xFE	; 254
    6fda:	51 05       	cpc	r21, r1
    6fdc:	68 f0       	brcs	.+26     	; 0x6ff8 <__divsf3_pse+0x82>
    6fde:	b1 cd       	rjmp	.-1182   	; 0x6b42 <__fp_inf>
    6fe0:	fb cd       	rjmp	.-1034   	; 0x6bd8 <__fp_szero>
    6fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    6fe4:	ec f3       	brlt	.-6      	; 0x6fe0 <__divsf3_pse+0x6a>
    6fe6:	98 3e       	cpi	r25, 0xE8	; 232
    6fe8:	dc f3       	brlt	.-10     	; 0x6fe0 <__divsf3_pse+0x6a>
    6fea:	86 95       	lsr	r24
    6fec:	77 95       	ror	r23
    6fee:	67 95       	ror	r22
    6ff0:	b7 95       	ror	r27
    6ff2:	f7 95       	ror	r31
    6ff4:	9f 5f       	subi	r25, 0xFF	; 255
    6ff6:	c9 f7       	brne	.-14     	; 0x6fea <__divsf3_pse+0x74>
    6ff8:	88 0f       	add	r24, r24
    6ffa:	91 1d       	adc	r25, r1
    6ffc:	96 95       	lsr	r25
    6ffe:	87 95       	ror	r24
    7000:	97 f9       	bld	r25, 7
    7002:	08 95       	ret
    7004:	e1 e0       	ldi	r30, 0x01	; 1
    7006:	66 0f       	add	r22, r22
    7008:	77 1f       	adc	r23, r23
    700a:	88 1f       	adc	r24, r24
    700c:	bb 1f       	adc	r27, r27
    700e:	62 17       	cp	r22, r18
    7010:	73 07       	cpc	r23, r19
    7012:	84 07       	cpc	r24, r20
    7014:	ba 07       	cpc	r27, r26
    7016:	20 f0       	brcs	.+8      	; 0x7020 <__divsf3_pse+0xaa>
    7018:	62 1b       	sub	r22, r18
    701a:	73 0b       	sbc	r23, r19
    701c:	84 0b       	sbc	r24, r20
    701e:	ba 0b       	sbc	r27, r26
    7020:	ee 1f       	adc	r30, r30
    7022:	88 f7       	brcc	.-30     	; 0x7006 <__divsf3_pse+0x90>
    7024:	e0 95       	com	r30
    7026:	08 95       	ret

00007028 <__fp_mpack>:
    7028:	9f 3f       	cpi	r25, 0xFF	; 255
    702a:	31 f0       	breq	.+12     	; 0x7038 <__fp_mpack_finite+0xc>

0000702c <__fp_mpack_finite>:
    702c:	91 50       	subi	r25, 0x01	; 1
    702e:	20 f4       	brcc	.+8      	; 0x7038 <__fp_mpack_finite+0xc>
    7030:	87 95       	ror	r24
    7032:	77 95       	ror	r23
    7034:	67 95       	ror	r22
    7036:	b7 95       	ror	r27
    7038:	88 0f       	add	r24, r24
    703a:	91 1d       	adc	r25, r1
    703c:	96 95       	lsr	r25
    703e:	87 95       	ror	r24
    7040:	97 f9       	bld	r25, 7
    7042:	08 95       	ret

00007044 <__udivmodqi4>:
    7044:	99 1b       	sub	r25, r25
    7046:	79 e0       	ldi	r23, 0x09	; 9
    7048:	04 c0       	rjmp	.+8      	; 0x7052 <__udivmodqi4_ep>

0000704a <__udivmodqi4_loop>:
    704a:	99 1f       	adc	r25, r25
    704c:	96 17       	cp	r25, r22
    704e:	08 f0       	brcs	.+2      	; 0x7052 <__udivmodqi4_ep>
    7050:	96 1b       	sub	r25, r22

00007052 <__udivmodqi4_ep>:
    7052:	88 1f       	adc	r24, r24
    7054:	7a 95       	dec	r23
    7056:	c9 f7       	brne	.-14     	; 0x704a <__udivmodqi4_loop>
    7058:	80 95       	com	r24
    705a:	08 95       	ret

0000705c <__udivmodhi4>:
    705c:	aa 1b       	sub	r26, r26
    705e:	bb 1b       	sub	r27, r27
    7060:	51 e1       	ldi	r21, 0x11	; 17
    7062:	07 c0       	rjmp	.+14     	; 0x7072 <__udivmodhi4_ep>

00007064 <__udivmodhi4_loop>:
    7064:	aa 1f       	adc	r26, r26
    7066:	bb 1f       	adc	r27, r27
    7068:	a6 17       	cp	r26, r22
    706a:	b7 07       	cpc	r27, r23
    706c:	10 f0       	brcs	.+4      	; 0x7072 <__udivmodhi4_ep>
    706e:	a6 1b       	sub	r26, r22
    7070:	b7 0b       	sbc	r27, r23

00007072 <__udivmodhi4_ep>:
    7072:	88 1f       	adc	r24, r24
    7074:	99 1f       	adc	r25, r25
    7076:	5a 95       	dec	r21
    7078:	a9 f7       	brne	.-22     	; 0x7064 <__udivmodhi4_loop>
    707a:	80 95       	com	r24
    707c:	90 95       	com	r25
    707e:	bc 01       	movw	r22, r24
    7080:	cd 01       	movw	r24, r26
    7082:	08 95       	ret

00007084 <sprintf>:
    7084:	ae e0       	ldi	r26, 0x0E	; 14
    7086:	b0 e0       	ldi	r27, 0x00	; 0
    7088:	e8 e4       	ldi	r30, 0x48	; 72
    708a:	f8 e3       	ldi	r31, 0x38	; 56
    708c:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <__prologue_saves__+0x1c>
    7090:	0d 89       	ldd	r16, Y+21	; 0x15
    7092:	1e 89       	ldd	r17, Y+22	; 0x16
    7094:	86 e0       	ldi	r24, 0x06	; 6
    7096:	8c 83       	std	Y+4, r24	; 0x04
    7098:	1a 83       	std	Y+2, r17	; 0x02
    709a:	09 83       	std	Y+1, r16	; 0x01
    709c:	8f ef       	ldi	r24, 0xFF	; 255
    709e:	9f e7       	ldi	r25, 0x7F	; 127
    70a0:	9e 83       	std	Y+6, r25	; 0x06
    70a2:	8d 83       	std	Y+5, r24	; 0x05
    70a4:	9e 01       	movw	r18, r28
    70a6:	27 5e       	subi	r18, 0xE7	; 231
    70a8:	3f 4f       	sbci	r19, 0xFF	; 255
    70aa:	ce 01       	movw	r24, r28
    70ac:	01 96       	adiw	r24, 0x01	; 1
    70ae:	6f 89       	ldd	r22, Y+23	; 0x17
    70b0:	78 8d       	ldd	r23, Y+24	; 0x18
    70b2:	a9 01       	movw	r20, r18
    70b4:	0e 94 65 38 	call	0x70ca	; 0x70ca <vfprintf>
    70b8:	ef 81       	ldd	r30, Y+7	; 0x07
    70ba:	f8 85       	ldd	r31, Y+8	; 0x08
    70bc:	e0 0f       	add	r30, r16
    70be:	f1 1f       	adc	r31, r17
    70c0:	10 82       	st	Z, r1
    70c2:	2e 96       	adiw	r28, 0x0e	; 14
    70c4:	e4 e0       	ldi	r30, 0x04	; 4
    70c6:	0c 94 46 3b 	jmp	0x768c	; 0x768c <__epilogue_restores__+0x1c>

000070ca <vfprintf>:
    70ca:	ac e0       	ldi	r26, 0x0C	; 12
    70cc:	b0 e0       	ldi	r27, 0x00	; 0
    70ce:	eb e6       	ldi	r30, 0x6B	; 107
    70d0:	f8 e3       	ldi	r31, 0x38	; 56
    70d2:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <__prologue_saves__>
    70d6:	6c 01       	movw	r12, r24
    70d8:	1b 01       	movw	r2, r22
    70da:	8a 01       	movw	r16, r20
    70dc:	fc 01       	movw	r30, r24
    70de:	17 82       	std	Z+7, r1	; 0x07
    70e0:	16 82       	std	Z+6, r1	; 0x06
    70e2:	83 81       	ldd	r24, Z+3	; 0x03
    70e4:	81 ff       	sbrs	r24, 1
    70e6:	d1 c1       	rjmp	.+930    	; 0x748a <vfprintf+0x3c0>
    70e8:	2e 01       	movw	r4, r28
    70ea:	08 94       	sec
    70ec:	41 1c       	adc	r4, r1
    70ee:	51 1c       	adc	r5, r1
    70f0:	f6 01       	movw	r30, r12
    70f2:	93 81       	ldd	r25, Z+3	; 0x03
    70f4:	f1 01       	movw	r30, r2
    70f6:	93 fd       	sbrc	r25, 3
    70f8:	85 91       	lpm	r24, Z+
    70fa:	93 ff       	sbrs	r25, 3
    70fc:	81 91       	ld	r24, Z+
    70fe:	1f 01       	movw	r2, r30
    7100:	88 23       	and	r24, r24
    7102:	09 f4       	brne	.+2      	; 0x7106 <vfprintf+0x3c>
    7104:	be c1       	rjmp	.+892    	; 0x7482 <vfprintf+0x3b8>
    7106:	85 32       	cpi	r24, 0x25	; 37
    7108:	39 f4       	brne	.+14     	; 0x7118 <vfprintf+0x4e>
    710a:	93 fd       	sbrc	r25, 3
    710c:	85 91       	lpm	r24, Z+
    710e:	93 ff       	sbrs	r25, 3
    7110:	81 91       	ld	r24, Z+
    7112:	1f 01       	movw	r2, r30
    7114:	85 32       	cpi	r24, 0x25	; 37
    7116:	29 f4       	brne	.+10     	; 0x7122 <vfprintf+0x58>
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	b6 01       	movw	r22, r12
    711c:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7120:	e7 cf       	rjmp	.-50     	; 0x70f0 <vfprintf+0x26>
    7122:	ee 24       	eor	r14, r14
    7124:	ff 24       	eor	r15, r15
    7126:	20 e0       	ldi	r18, 0x00	; 0
    7128:	20 32       	cpi	r18, 0x20	; 32
    712a:	b0 f4       	brcc	.+44     	; 0x7158 <vfprintf+0x8e>
    712c:	8b 32       	cpi	r24, 0x2B	; 43
    712e:	69 f0       	breq	.+26     	; 0x714a <vfprintf+0x80>
    7130:	8c 32       	cpi	r24, 0x2C	; 44
    7132:	28 f4       	brcc	.+10     	; 0x713e <vfprintf+0x74>
    7134:	80 32       	cpi	r24, 0x20	; 32
    7136:	51 f0       	breq	.+20     	; 0x714c <vfprintf+0x82>
    7138:	83 32       	cpi	r24, 0x23	; 35
    713a:	71 f4       	brne	.+28     	; 0x7158 <vfprintf+0x8e>
    713c:	0b c0       	rjmp	.+22     	; 0x7154 <vfprintf+0x8a>
    713e:	8d 32       	cpi	r24, 0x2D	; 45
    7140:	39 f0       	breq	.+14     	; 0x7150 <vfprintf+0x86>
    7142:	80 33       	cpi	r24, 0x30	; 48
    7144:	49 f4       	brne	.+18     	; 0x7158 <vfprintf+0x8e>
    7146:	21 60       	ori	r18, 0x01	; 1
    7148:	2c c0       	rjmp	.+88     	; 0x71a2 <vfprintf+0xd8>
    714a:	22 60       	ori	r18, 0x02	; 2
    714c:	24 60       	ori	r18, 0x04	; 4
    714e:	29 c0       	rjmp	.+82     	; 0x71a2 <vfprintf+0xd8>
    7150:	28 60       	ori	r18, 0x08	; 8
    7152:	27 c0       	rjmp	.+78     	; 0x71a2 <vfprintf+0xd8>
    7154:	20 61       	ori	r18, 0x10	; 16
    7156:	25 c0       	rjmp	.+74     	; 0x71a2 <vfprintf+0xd8>
    7158:	27 fd       	sbrc	r18, 7
    715a:	2c c0       	rjmp	.+88     	; 0x71b4 <vfprintf+0xea>
    715c:	38 2f       	mov	r19, r24
    715e:	30 53       	subi	r19, 0x30	; 48
    7160:	3a 30       	cpi	r19, 0x0A	; 10
    7162:	98 f4       	brcc	.+38     	; 0x718a <vfprintf+0xc0>
    7164:	26 ff       	sbrs	r18, 6
    7166:	08 c0       	rjmp	.+16     	; 0x7178 <vfprintf+0xae>
    7168:	8e 2d       	mov	r24, r14
    716a:	88 0f       	add	r24, r24
    716c:	e8 2e       	mov	r14, r24
    716e:	ee 0c       	add	r14, r14
    7170:	ee 0c       	add	r14, r14
    7172:	e8 0e       	add	r14, r24
    7174:	e3 0e       	add	r14, r19
    7176:	15 c0       	rjmp	.+42     	; 0x71a2 <vfprintf+0xd8>
    7178:	8f 2d       	mov	r24, r15
    717a:	88 0f       	add	r24, r24
    717c:	f8 2e       	mov	r15, r24
    717e:	ff 0c       	add	r15, r15
    7180:	ff 0c       	add	r15, r15
    7182:	f8 0e       	add	r15, r24
    7184:	f3 0e       	add	r15, r19
    7186:	20 62       	ori	r18, 0x20	; 32
    7188:	0c c0       	rjmp	.+24     	; 0x71a2 <vfprintf+0xd8>
    718a:	8e 32       	cpi	r24, 0x2E	; 46
    718c:	21 f4       	brne	.+8      	; 0x7196 <vfprintf+0xcc>
    718e:	26 fd       	sbrc	r18, 6
    7190:	78 c1       	rjmp	.+752    	; 0x7482 <vfprintf+0x3b8>
    7192:	20 64       	ori	r18, 0x40	; 64
    7194:	06 c0       	rjmp	.+12     	; 0x71a2 <vfprintf+0xd8>
    7196:	8c 36       	cpi	r24, 0x6C	; 108
    7198:	11 f4       	brne	.+4      	; 0x719e <vfprintf+0xd4>
    719a:	20 68       	ori	r18, 0x80	; 128
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <vfprintf+0xd8>
    719e:	88 36       	cpi	r24, 0x68	; 104
    71a0:	49 f4       	brne	.+18     	; 0x71b4 <vfprintf+0xea>
    71a2:	f1 01       	movw	r30, r2
    71a4:	93 fd       	sbrc	r25, 3
    71a6:	85 91       	lpm	r24, Z+
    71a8:	93 ff       	sbrs	r25, 3
    71aa:	81 91       	ld	r24, Z+
    71ac:	1f 01       	movw	r2, r30
    71ae:	88 23       	and	r24, r24
    71b0:	09 f0       	breq	.+2      	; 0x71b4 <vfprintf+0xea>
    71b2:	ba cf       	rjmp	.-140    	; 0x7128 <vfprintf+0x5e>
    71b4:	98 2f       	mov	r25, r24
    71b6:	95 54       	subi	r25, 0x45	; 69
    71b8:	93 30       	cpi	r25, 0x03	; 3
    71ba:	18 f0       	brcs	.+6      	; 0x71c2 <vfprintf+0xf8>
    71bc:	90 52       	subi	r25, 0x20	; 32
    71be:	93 30       	cpi	r25, 0x03	; 3
    71c0:	28 f4       	brcc	.+10     	; 0x71cc <vfprintf+0x102>
    71c2:	0c 5f       	subi	r16, 0xFC	; 252
    71c4:	1f 4f       	sbci	r17, 0xFF	; 255
    71c6:	ff e3       	ldi	r31, 0x3F	; 63
    71c8:	f9 83       	std	Y+1, r31	; 0x01
    71ca:	0d c0       	rjmp	.+26     	; 0x71e6 <vfprintf+0x11c>
    71cc:	83 36       	cpi	r24, 0x63	; 99
    71ce:	31 f0       	breq	.+12     	; 0x71dc <vfprintf+0x112>
    71d0:	83 37       	cpi	r24, 0x73	; 115
    71d2:	71 f0       	breq	.+28     	; 0x71f0 <vfprintf+0x126>
    71d4:	83 35       	cpi	r24, 0x53	; 83
    71d6:	09 f0       	breq	.+2      	; 0x71da <vfprintf+0x110>
    71d8:	60 c0       	rjmp	.+192    	; 0x729a <vfprintf+0x1d0>
    71da:	22 c0       	rjmp	.+68     	; 0x7220 <vfprintf+0x156>
    71dc:	f8 01       	movw	r30, r16
    71de:	80 81       	ld	r24, Z
    71e0:	89 83       	std	Y+1, r24	; 0x01
    71e2:	0e 5f       	subi	r16, 0xFE	; 254
    71e4:	1f 4f       	sbci	r17, 0xFF	; 255
    71e6:	42 01       	movw	r8, r4
    71e8:	71 e0       	ldi	r23, 0x01	; 1
    71ea:	a7 2e       	mov	r10, r23
    71ec:	b1 2c       	mov	r11, r1
    71ee:	16 c0       	rjmp	.+44     	; 0x721c <vfprintf+0x152>
    71f0:	62 e0       	ldi	r22, 0x02	; 2
    71f2:	66 2e       	mov	r6, r22
    71f4:	71 2c       	mov	r7, r1
    71f6:	60 0e       	add	r6, r16
    71f8:	71 1e       	adc	r7, r17
    71fa:	f8 01       	movw	r30, r16
    71fc:	80 80       	ld	r8, Z
    71fe:	91 80       	ldd	r9, Z+1	; 0x01
    7200:	26 ff       	sbrs	r18, 6
    7202:	03 c0       	rjmp	.+6      	; 0x720a <vfprintf+0x140>
    7204:	6e 2d       	mov	r22, r14
    7206:	70 e0       	ldi	r23, 0x00	; 0
    7208:	02 c0       	rjmp	.+4      	; 0x720e <vfprintf+0x144>
    720a:	6f ef       	ldi	r22, 0xFF	; 255
    720c:	7f ef       	ldi	r23, 0xFF	; 255
    720e:	c4 01       	movw	r24, r8
    7210:	2c 87       	std	Y+12, r18	; 0x0c
    7212:	0e 94 77 3a 	call	0x74ee	; 0x74ee <strnlen>
    7216:	5c 01       	movw	r10, r24
    7218:	83 01       	movw	r16, r6
    721a:	2c 85       	ldd	r18, Y+12	; 0x0c
    721c:	2f 77       	andi	r18, 0x7F	; 127
    721e:	17 c0       	rjmp	.+46     	; 0x724e <vfprintf+0x184>
    7220:	52 e0       	ldi	r21, 0x02	; 2
    7222:	65 2e       	mov	r6, r21
    7224:	71 2c       	mov	r7, r1
    7226:	60 0e       	add	r6, r16
    7228:	71 1e       	adc	r7, r17
    722a:	f8 01       	movw	r30, r16
    722c:	80 80       	ld	r8, Z
    722e:	91 80       	ldd	r9, Z+1	; 0x01
    7230:	26 ff       	sbrs	r18, 6
    7232:	03 c0       	rjmp	.+6      	; 0x723a <vfprintf+0x170>
    7234:	6e 2d       	mov	r22, r14
    7236:	70 e0       	ldi	r23, 0x00	; 0
    7238:	02 c0       	rjmp	.+4      	; 0x723e <vfprintf+0x174>
    723a:	6f ef       	ldi	r22, 0xFF	; 255
    723c:	7f ef       	ldi	r23, 0xFF	; 255
    723e:	c4 01       	movw	r24, r8
    7240:	2c 87       	std	Y+12, r18	; 0x0c
    7242:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <strnlen_P>
    7246:	5c 01       	movw	r10, r24
    7248:	2c 85       	ldd	r18, Y+12	; 0x0c
    724a:	20 68       	ori	r18, 0x80	; 128
    724c:	83 01       	movw	r16, r6
    724e:	23 fd       	sbrc	r18, 3
    7250:	20 c0       	rjmp	.+64     	; 0x7292 <vfprintf+0x1c8>
    7252:	08 c0       	rjmp	.+16     	; 0x7264 <vfprintf+0x19a>
    7254:	80 e2       	ldi	r24, 0x20	; 32
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	b6 01       	movw	r22, r12
    725a:	2c 87       	std	Y+12, r18	; 0x0c
    725c:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7260:	fa 94       	dec	r15
    7262:	2c 85       	ldd	r18, Y+12	; 0x0c
    7264:	8f 2d       	mov	r24, r15
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	a8 16       	cp	r10, r24
    726a:	b9 06       	cpc	r11, r25
    726c:	98 f3       	brcs	.-26     	; 0x7254 <vfprintf+0x18a>
    726e:	11 c0       	rjmp	.+34     	; 0x7292 <vfprintf+0x1c8>
    7270:	f4 01       	movw	r30, r8
    7272:	27 fd       	sbrc	r18, 7
    7274:	85 91       	lpm	r24, Z+
    7276:	27 ff       	sbrs	r18, 7
    7278:	81 91       	ld	r24, Z+
    727a:	4f 01       	movw	r8, r30
    727c:	90 e0       	ldi	r25, 0x00	; 0
    727e:	b6 01       	movw	r22, r12
    7280:	2c 87       	std	Y+12, r18	; 0x0c
    7282:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7286:	2c 85       	ldd	r18, Y+12	; 0x0c
    7288:	f1 10       	cpse	r15, r1
    728a:	fa 94       	dec	r15
    728c:	08 94       	sec
    728e:	a1 08       	sbc	r10, r1
    7290:	b1 08       	sbc	r11, r1
    7292:	a1 14       	cp	r10, r1
    7294:	b1 04       	cpc	r11, r1
    7296:	61 f7       	brne	.-40     	; 0x7270 <vfprintf+0x1a6>
    7298:	f1 c0       	rjmp	.+482    	; 0x747c <vfprintf+0x3b2>
    729a:	84 36       	cpi	r24, 0x64	; 100
    729c:	11 f0       	breq	.+4      	; 0x72a2 <vfprintf+0x1d8>
    729e:	89 36       	cpi	r24, 0x69	; 105
    72a0:	49 f5       	brne	.+82     	; 0x72f4 <vfprintf+0x22a>
    72a2:	27 ff       	sbrs	r18, 7
    72a4:	08 c0       	rjmp	.+16     	; 0x72b6 <vfprintf+0x1ec>
    72a6:	f8 01       	movw	r30, r16
    72a8:	60 81       	ld	r22, Z
    72aa:	71 81       	ldd	r23, Z+1	; 0x01
    72ac:	82 81       	ldd	r24, Z+2	; 0x02
    72ae:	93 81       	ldd	r25, Z+3	; 0x03
    72b0:	0c 5f       	subi	r16, 0xFC	; 252
    72b2:	1f 4f       	sbci	r17, 0xFF	; 255
    72b4:	09 c0       	rjmp	.+18     	; 0x72c8 <vfprintf+0x1fe>
    72b6:	f8 01       	movw	r30, r16
    72b8:	60 81       	ld	r22, Z
    72ba:	71 81       	ldd	r23, Z+1	; 0x01
    72bc:	88 27       	eor	r24, r24
    72be:	77 fd       	sbrc	r23, 7
    72c0:	80 95       	com	r24
    72c2:	98 2f       	mov	r25, r24
    72c4:	0e 5f       	subi	r16, 0xFE	; 254
    72c6:	1f 4f       	sbci	r17, 0xFF	; 255
    72c8:	4f e6       	ldi	r20, 0x6F	; 111
    72ca:	b4 2e       	mov	r11, r20
    72cc:	b2 22       	and	r11, r18
    72ce:	97 ff       	sbrs	r25, 7
    72d0:	09 c0       	rjmp	.+18     	; 0x72e4 <vfprintf+0x21a>
    72d2:	90 95       	com	r25
    72d4:	80 95       	com	r24
    72d6:	70 95       	com	r23
    72d8:	61 95       	neg	r22
    72da:	7f 4f       	sbci	r23, 0xFF	; 255
    72dc:	8f 4f       	sbci	r24, 0xFF	; 255
    72de:	9f 4f       	sbci	r25, 0xFF	; 255
    72e0:	f0 e8       	ldi	r31, 0x80	; 128
    72e2:	bf 2a       	or	r11, r31
    72e4:	a2 01       	movw	r20, r4
    72e6:	2a e0       	ldi	r18, 0x0A	; 10
    72e8:	30 e0       	ldi	r19, 0x00	; 0
    72ea:	0e 94 ae 3a 	call	0x755c	; 0x755c <__ultoa_invert>
    72ee:	78 2e       	mov	r7, r24
    72f0:	74 18       	sub	r7, r4
    72f2:	45 c0       	rjmp	.+138    	; 0x737e <vfprintf+0x2b4>
    72f4:	85 37       	cpi	r24, 0x75	; 117
    72f6:	31 f4       	brne	.+12     	; 0x7304 <vfprintf+0x23a>
    72f8:	3f ee       	ldi	r19, 0xEF	; 239
    72fa:	b3 2e       	mov	r11, r19
    72fc:	b2 22       	and	r11, r18
    72fe:	2a e0       	ldi	r18, 0x0A	; 10
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	25 c0       	rjmp	.+74     	; 0x734e <vfprintf+0x284>
    7304:	99 ef       	ldi	r25, 0xF9	; 249
    7306:	b9 2e       	mov	r11, r25
    7308:	b2 22       	and	r11, r18
    730a:	8f 36       	cpi	r24, 0x6F	; 111
    730c:	c1 f0       	breq	.+48     	; 0x733e <vfprintf+0x274>
    730e:	80 37       	cpi	r24, 0x70	; 112
    7310:	20 f4       	brcc	.+8      	; 0x731a <vfprintf+0x250>
    7312:	88 35       	cpi	r24, 0x58	; 88
    7314:	09 f0       	breq	.+2      	; 0x7318 <vfprintf+0x24e>
    7316:	b5 c0       	rjmp	.+362    	; 0x7482 <vfprintf+0x3b8>
    7318:	0d c0       	rjmp	.+26     	; 0x7334 <vfprintf+0x26a>
    731a:	80 37       	cpi	r24, 0x70	; 112
    731c:	21 f0       	breq	.+8      	; 0x7326 <vfprintf+0x25c>
    731e:	88 37       	cpi	r24, 0x78	; 120
    7320:	09 f0       	breq	.+2      	; 0x7324 <vfprintf+0x25a>
    7322:	af c0       	rjmp	.+350    	; 0x7482 <vfprintf+0x3b8>
    7324:	02 c0       	rjmp	.+4      	; 0x732a <vfprintf+0x260>
    7326:	20 e1       	ldi	r18, 0x10	; 16
    7328:	b2 2a       	or	r11, r18
    732a:	b4 fe       	sbrs	r11, 4
    732c:	0b c0       	rjmp	.+22     	; 0x7344 <vfprintf+0x27a>
    732e:	84 e0       	ldi	r24, 0x04	; 4
    7330:	b8 2a       	or	r11, r24
    7332:	08 c0       	rjmp	.+16     	; 0x7344 <vfprintf+0x27a>
    7334:	b4 fe       	sbrs	r11, 4
    7336:	09 c0       	rjmp	.+18     	; 0x734a <vfprintf+0x280>
    7338:	e6 e0       	ldi	r30, 0x06	; 6
    733a:	be 2a       	or	r11, r30
    733c:	06 c0       	rjmp	.+12     	; 0x734a <vfprintf+0x280>
    733e:	28 e0       	ldi	r18, 0x08	; 8
    7340:	30 e0       	ldi	r19, 0x00	; 0
    7342:	05 c0       	rjmp	.+10     	; 0x734e <vfprintf+0x284>
    7344:	20 e1       	ldi	r18, 0x10	; 16
    7346:	30 e0       	ldi	r19, 0x00	; 0
    7348:	02 c0       	rjmp	.+4      	; 0x734e <vfprintf+0x284>
    734a:	20 e1       	ldi	r18, 0x10	; 16
    734c:	32 e0       	ldi	r19, 0x02	; 2
    734e:	b7 fe       	sbrs	r11, 7
    7350:	08 c0       	rjmp	.+16     	; 0x7362 <vfprintf+0x298>
    7352:	f8 01       	movw	r30, r16
    7354:	60 81       	ld	r22, Z
    7356:	71 81       	ldd	r23, Z+1	; 0x01
    7358:	82 81       	ldd	r24, Z+2	; 0x02
    735a:	93 81       	ldd	r25, Z+3	; 0x03
    735c:	0c 5f       	subi	r16, 0xFC	; 252
    735e:	1f 4f       	sbci	r17, 0xFF	; 255
    7360:	07 c0       	rjmp	.+14     	; 0x7370 <vfprintf+0x2a6>
    7362:	f8 01       	movw	r30, r16
    7364:	60 81       	ld	r22, Z
    7366:	71 81       	ldd	r23, Z+1	; 0x01
    7368:	80 e0       	ldi	r24, 0x00	; 0
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	0e 5f       	subi	r16, 0xFE	; 254
    736e:	1f 4f       	sbci	r17, 0xFF	; 255
    7370:	a2 01       	movw	r20, r4
    7372:	0e 94 ae 3a 	call	0x755c	; 0x755c <__ultoa_invert>
    7376:	78 2e       	mov	r7, r24
    7378:	74 18       	sub	r7, r4
    737a:	ff e7       	ldi	r31, 0x7F	; 127
    737c:	bf 22       	and	r11, r31
    737e:	b6 fe       	sbrs	r11, 6
    7380:	0b c0       	rjmp	.+22     	; 0x7398 <vfprintf+0x2ce>
    7382:	2e ef       	ldi	r18, 0xFE	; 254
    7384:	b2 22       	and	r11, r18
    7386:	7e 14       	cp	r7, r14
    7388:	38 f4       	brcc	.+14     	; 0x7398 <vfprintf+0x2ce>
    738a:	b4 fe       	sbrs	r11, 4
    738c:	07 c0       	rjmp	.+14     	; 0x739c <vfprintf+0x2d2>
    738e:	b2 fc       	sbrc	r11, 2
    7390:	05 c0       	rjmp	.+10     	; 0x739c <vfprintf+0x2d2>
    7392:	8f ee       	ldi	r24, 0xEF	; 239
    7394:	b8 22       	and	r11, r24
    7396:	02 c0       	rjmp	.+4      	; 0x739c <vfprintf+0x2d2>
    7398:	a7 2c       	mov	r10, r7
    739a:	01 c0       	rjmp	.+2      	; 0x739e <vfprintf+0x2d4>
    739c:	ae 2c       	mov	r10, r14
    739e:	8b 2d       	mov	r24, r11
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	b4 fe       	sbrs	r11, 4
    73a4:	0d c0       	rjmp	.+26     	; 0x73c0 <vfprintf+0x2f6>
    73a6:	fe 01       	movw	r30, r28
    73a8:	e7 0d       	add	r30, r7
    73aa:	f1 1d       	adc	r31, r1
    73ac:	20 81       	ld	r18, Z
    73ae:	20 33       	cpi	r18, 0x30	; 48
    73b0:	19 f4       	brne	.+6      	; 0x73b8 <vfprintf+0x2ee>
    73b2:	e9 ee       	ldi	r30, 0xE9	; 233
    73b4:	be 22       	and	r11, r30
    73b6:	09 c0       	rjmp	.+18     	; 0x73ca <vfprintf+0x300>
    73b8:	a3 94       	inc	r10
    73ba:	b2 fe       	sbrs	r11, 2
    73bc:	06 c0       	rjmp	.+12     	; 0x73ca <vfprintf+0x300>
    73be:	04 c0       	rjmp	.+8      	; 0x73c8 <vfprintf+0x2fe>
    73c0:	86 78       	andi	r24, 0x86	; 134
    73c2:	90 70       	andi	r25, 0x00	; 0
    73c4:	00 97       	sbiw	r24, 0x00	; 0
    73c6:	09 f0       	breq	.+2      	; 0x73ca <vfprintf+0x300>
    73c8:	a3 94       	inc	r10
    73ca:	8b 2c       	mov	r8, r11
    73cc:	99 24       	eor	r9, r9
    73ce:	b3 fc       	sbrc	r11, 3
    73d0:	14 c0       	rjmp	.+40     	; 0x73fa <vfprintf+0x330>
    73d2:	b0 fe       	sbrs	r11, 0
    73d4:	0f c0       	rjmp	.+30     	; 0x73f4 <vfprintf+0x32a>
    73d6:	af 14       	cp	r10, r15
    73d8:	28 f4       	brcc	.+10     	; 0x73e4 <vfprintf+0x31a>
    73da:	e7 2c       	mov	r14, r7
    73dc:	ef 0c       	add	r14, r15
    73de:	ea 18       	sub	r14, r10
    73e0:	af 2c       	mov	r10, r15
    73e2:	08 c0       	rjmp	.+16     	; 0x73f4 <vfprintf+0x32a>
    73e4:	e7 2c       	mov	r14, r7
    73e6:	06 c0       	rjmp	.+12     	; 0x73f4 <vfprintf+0x32a>
    73e8:	80 e2       	ldi	r24, 0x20	; 32
    73ea:	90 e0       	ldi	r25, 0x00	; 0
    73ec:	b6 01       	movw	r22, r12
    73ee:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    73f2:	a3 94       	inc	r10
    73f4:	af 14       	cp	r10, r15
    73f6:	c0 f3       	brcs	.-16     	; 0x73e8 <vfprintf+0x31e>
    73f8:	04 c0       	rjmp	.+8      	; 0x7402 <vfprintf+0x338>
    73fa:	af 14       	cp	r10, r15
    73fc:	10 f4       	brcc	.+4      	; 0x7402 <vfprintf+0x338>
    73fe:	fa 18       	sub	r15, r10
    7400:	01 c0       	rjmp	.+2      	; 0x7404 <vfprintf+0x33a>
    7402:	ff 24       	eor	r15, r15
    7404:	84 fe       	sbrs	r8, 4
    7406:	0f c0       	rjmp	.+30     	; 0x7426 <vfprintf+0x35c>
    7408:	80 e3       	ldi	r24, 0x30	; 48
    740a:	90 e0       	ldi	r25, 0x00	; 0
    740c:	b6 01       	movw	r22, r12
    740e:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7412:	82 fe       	sbrs	r8, 2
    7414:	1f c0       	rjmp	.+62     	; 0x7454 <vfprintf+0x38a>
    7416:	81 fe       	sbrs	r8, 1
    7418:	03 c0       	rjmp	.+6      	; 0x7420 <vfprintf+0x356>
    741a:	88 e5       	ldi	r24, 0x58	; 88
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	10 c0       	rjmp	.+32     	; 0x7440 <vfprintf+0x376>
    7420:	88 e7       	ldi	r24, 0x78	; 120
    7422:	90 e0       	ldi	r25, 0x00	; 0
    7424:	0d c0       	rjmp	.+26     	; 0x7440 <vfprintf+0x376>
    7426:	c4 01       	movw	r24, r8
    7428:	86 78       	andi	r24, 0x86	; 134
    742a:	90 70       	andi	r25, 0x00	; 0
    742c:	00 97       	sbiw	r24, 0x00	; 0
    742e:	91 f0       	breq	.+36     	; 0x7454 <vfprintf+0x38a>
    7430:	81 fc       	sbrc	r8, 1
    7432:	02 c0       	rjmp	.+4      	; 0x7438 <vfprintf+0x36e>
    7434:	80 e2       	ldi	r24, 0x20	; 32
    7436:	01 c0       	rjmp	.+2      	; 0x743a <vfprintf+0x370>
    7438:	8b e2       	ldi	r24, 0x2B	; 43
    743a:	b7 fc       	sbrc	r11, 7
    743c:	8d e2       	ldi	r24, 0x2D	; 45
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	b6 01       	movw	r22, r12
    7442:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7446:	06 c0       	rjmp	.+12     	; 0x7454 <vfprintf+0x38a>
    7448:	80 e3       	ldi	r24, 0x30	; 48
    744a:	90 e0       	ldi	r25, 0x00	; 0
    744c:	b6 01       	movw	r22, r12
    744e:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    7452:	ea 94       	dec	r14
    7454:	7e 14       	cp	r7, r14
    7456:	c0 f3       	brcs	.-16     	; 0x7448 <vfprintf+0x37e>
    7458:	7a 94       	dec	r7
    745a:	f2 01       	movw	r30, r4
    745c:	e7 0d       	add	r30, r7
    745e:	f1 1d       	adc	r31, r1
    7460:	80 81       	ld	r24, Z
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	b6 01       	movw	r22, r12
    7466:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    746a:	77 20       	and	r7, r7
    746c:	a9 f7       	brne	.-22     	; 0x7458 <vfprintf+0x38e>
    746e:	06 c0       	rjmp	.+12     	; 0x747c <vfprintf+0x3b2>
    7470:	80 e2       	ldi	r24, 0x20	; 32
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	b6 01       	movw	r22, r12
    7476:	0e 94 82 3a 	call	0x7504	; 0x7504 <fputc>
    747a:	fa 94       	dec	r15
    747c:	ff 20       	and	r15, r15
    747e:	c1 f7       	brne	.-16     	; 0x7470 <vfprintf+0x3a6>
    7480:	37 ce       	rjmp	.-914    	; 0x70f0 <vfprintf+0x26>
    7482:	f6 01       	movw	r30, r12
    7484:	26 81       	ldd	r18, Z+6	; 0x06
    7486:	37 81       	ldd	r19, Z+7	; 0x07
    7488:	02 c0       	rjmp	.+4      	; 0x748e <vfprintf+0x3c4>
    748a:	2f ef       	ldi	r18, 0xFF	; 255
    748c:	3f ef       	ldi	r19, 0xFF	; 255
    748e:	c9 01       	movw	r24, r18
    7490:	2c 96       	adiw	r28, 0x0c	; 12
    7492:	e2 e1       	ldi	r30, 0x12	; 18
    7494:	0c 94 38 3b 	jmp	0x7670	; 0x7670 <__epilogue_restores__>

00007498 <__eerd_byte_m32>:
    7498:	e1 99       	sbic	0x1c, 1	; 28
    749a:	fe cf       	rjmp	.-4      	; 0x7498 <__eerd_byte_m32>
    749c:	9f bb       	out	0x1f, r25	; 31
    749e:	8e bb       	out	0x1e, r24	; 30
    74a0:	e0 9a       	sbi	0x1c, 0	; 28
    74a2:	99 27       	eor	r25, r25
    74a4:	8d b3       	in	r24, 0x1d	; 29
    74a6:	08 95       	ret

000074a8 <__eerd_word_m32>:
    74a8:	a8 e1       	ldi	r26, 0x18	; 24
    74aa:	b0 e0       	ldi	r27, 0x00	; 0
    74ac:	42 e0       	ldi	r20, 0x02	; 2
    74ae:	50 e0       	ldi	r21, 0x00	; 0
    74b0:	0c 94 0e 3b 	jmp	0x761c	; 0x761c <__eerd_blraw_m32>

000074b4 <__eewr_byte_m32>:
    74b4:	26 2f       	mov	r18, r22

000074b6 <__eewr_r18_m32>:
    74b6:	e1 99       	sbic	0x1c, 1	; 28
    74b8:	fe cf       	rjmp	.-4      	; 0x74b6 <__eewr_r18_m32>
    74ba:	9f bb       	out	0x1f, r25	; 31
    74bc:	8e bb       	out	0x1e, r24	; 30
    74be:	2d bb       	out	0x1d, r18	; 29
    74c0:	0f b6       	in	r0, 0x3f	; 63
    74c2:	f8 94       	cli
    74c4:	e2 9a       	sbi	0x1c, 2	; 28
    74c6:	e1 9a       	sbi	0x1c, 1	; 28
    74c8:	0f be       	out	0x3f, r0	; 63
    74ca:	01 96       	adiw	r24, 0x01	; 1
    74cc:	08 95       	ret

000074ce <__eewr_word_m32>:
    74ce:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <__eewr_byte_m32>
    74d2:	27 2f       	mov	r18, r23
    74d4:	0c 94 5b 3a 	jmp	0x74b6	; 0x74b6 <__eewr_r18_m32>

000074d8 <strnlen_P>:
    74d8:	fc 01       	movw	r30, r24
    74da:	05 90       	lpm	r0, Z+
    74dc:	61 50       	subi	r22, 0x01	; 1
    74de:	70 40       	sbci	r23, 0x00	; 0
    74e0:	01 10       	cpse	r0, r1
    74e2:	d8 f7       	brcc	.-10     	; 0x74da <strnlen_P+0x2>
    74e4:	80 95       	com	r24
    74e6:	90 95       	com	r25
    74e8:	8e 0f       	add	r24, r30
    74ea:	9f 1f       	adc	r25, r31
    74ec:	08 95       	ret

000074ee <strnlen>:
    74ee:	fc 01       	movw	r30, r24
    74f0:	61 50       	subi	r22, 0x01	; 1
    74f2:	70 40       	sbci	r23, 0x00	; 0
    74f4:	01 90       	ld	r0, Z+
    74f6:	01 10       	cpse	r0, r1
    74f8:	d8 f7       	brcc	.-10     	; 0x74f0 <strnlen+0x2>
    74fa:	80 95       	com	r24
    74fc:	90 95       	com	r25
    74fe:	8e 0f       	add	r24, r30
    7500:	9f 1f       	adc	r25, r31
    7502:	08 95       	ret

00007504 <fputc>:
    7504:	0f 93       	push	r16
    7506:	1f 93       	push	r17
    7508:	cf 93       	push	r28
    750a:	df 93       	push	r29
    750c:	8c 01       	movw	r16, r24
    750e:	eb 01       	movw	r28, r22
    7510:	8b 81       	ldd	r24, Y+3	; 0x03
    7512:	81 ff       	sbrs	r24, 1
    7514:	1b c0       	rjmp	.+54     	; 0x754c <fputc+0x48>
    7516:	82 ff       	sbrs	r24, 2
    7518:	0d c0       	rjmp	.+26     	; 0x7534 <fputc+0x30>
    751a:	2e 81       	ldd	r18, Y+6	; 0x06
    751c:	3f 81       	ldd	r19, Y+7	; 0x07
    751e:	8c 81       	ldd	r24, Y+4	; 0x04
    7520:	9d 81       	ldd	r25, Y+5	; 0x05
    7522:	28 17       	cp	r18, r24
    7524:	39 07       	cpc	r19, r25
    7526:	64 f4       	brge	.+24     	; 0x7540 <fputc+0x3c>
    7528:	e8 81       	ld	r30, Y
    752a:	f9 81       	ldd	r31, Y+1	; 0x01
    752c:	01 93       	st	Z+, r16
    752e:	f9 83       	std	Y+1, r31	; 0x01
    7530:	e8 83       	st	Y, r30
    7532:	06 c0       	rjmp	.+12     	; 0x7540 <fputc+0x3c>
    7534:	e8 85       	ldd	r30, Y+8	; 0x08
    7536:	f9 85       	ldd	r31, Y+9	; 0x09
    7538:	80 2f       	mov	r24, r16
    753a:	09 95       	icall
    753c:	00 97       	sbiw	r24, 0x00	; 0
    753e:	31 f4       	brne	.+12     	; 0x754c <fputc+0x48>
    7540:	8e 81       	ldd	r24, Y+6	; 0x06
    7542:	9f 81       	ldd	r25, Y+7	; 0x07
    7544:	01 96       	adiw	r24, 0x01	; 1
    7546:	9f 83       	std	Y+7, r25	; 0x07
    7548:	8e 83       	std	Y+6, r24	; 0x06
    754a:	02 c0       	rjmp	.+4      	; 0x7550 <fputc+0x4c>
    754c:	0f ef       	ldi	r16, 0xFF	; 255
    754e:	1f ef       	ldi	r17, 0xFF	; 255
    7550:	c8 01       	movw	r24, r16
    7552:	df 91       	pop	r29
    7554:	cf 91       	pop	r28
    7556:	1f 91       	pop	r17
    7558:	0f 91       	pop	r16
    755a:	08 95       	ret

0000755c <__ultoa_invert>:
    755c:	fa 01       	movw	r30, r20
    755e:	aa 27       	eor	r26, r26
    7560:	28 30       	cpi	r18, 0x08	; 8
    7562:	51 f1       	breq	.+84     	; 0x75b8 <__ultoa_invert+0x5c>
    7564:	20 31       	cpi	r18, 0x10	; 16
    7566:	81 f1       	breq	.+96     	; 0x75c8 <__ultoa_invert+0x6c>
    7568:	e8 94       	clt
    756a:	6f 93       	push	r22
    756c:	6e 7f       	andi	r22, 0xFE	; 254
    756e:	6e 5f       	subi	r22, 0xFE	; 254
    7570:	7f 4f       	sbci	r23, 0xFF	; 255
    7572:	8f 4f       	sbci	r24, 0xFF	; 255
    7574:	9f 4f       	sbci	r25, 0xFF	; 255
    7576:	af 4f       	sbci	r26, 0xFF	; 255
    7578:	b1 e0       	ldi	r27, 0x01	; 1
    757a:	3e d0       	rcall	.+124    	; 0x75f8 <__ultoa_invert+0x9c>
    757c:	b4 e0       	ldi	r27, 0x04	; 4
    757e:	3c d0       	rcall	.+120    	; 0x75f8 <__ultoa_invert+0x9c>
    7580:	67 0f       	add	r22, r23
    7582:	78 1f       	adc	r23, r24
    7584:	89 1f       	adc	r24, r25
    7586:	9a 1f       	adc	r25, r26
    7588:	a1 1d       	adc	r26, r1
    758a:	68 0f       	add	r22, r24
    758c:	79 1f       	adc	r23, r25
    758e:	8a 1f       	adc	r24, r26
    7590:	91 1d       	adc	r25, r1
    7592:	a1 1d       	adc	r26, r1
    7594:	6a 0f       	add	r22, r26
    7596:	71 1d       	adc	r23, r1
    7598:	81 1d       	adc	r24, r1
    759a:	91 1d       	adc	r25, r1
    759c:	a1 1d       	adc	r26, r1
    759e:	20 d0       	rcall	.+64     	; 0x75e0 <__ultoa_invert+0x84>
    75a0:	09 f4       	brne	.+2      	; 0x75a4 <__ultoa_invert+0x48>
    75a2:	68 94       	set
    75a4:	3f 91       	pop	r19
    75a6:	2a e0       	ldi	r18, 0x0A	; 10
    75a8:	26 9f       	mul	r18, r22
    75aa:	11 24       	eor	r1, r1
    75ac:	30 19       	sub	r19, r0
    75ae:	30 5d       	subi	r19, 0xD0	; 208
    75b0:	31 93       	st	Z+, r19
    75b2:	de f6       	brtc	.-74     	; 0x756a <__ultoa_invert+0xe>
    75b4:	cf 01       	movw	r24, r30
    75b6:	08 95       	ret
    75b8:	46 2f       	mov	r20, r22
    75ba:	47 70       	andi	r20, 0x07	; 7
    75bc:	40 5d       	subi	r20, 0xD0	; 208
    75be:	41 93       	st	Z+, r20
    75c0:	b3 e0       	ldi	r27, 0x03	; 3
    75c2:	0f d0       	rcall	.+30     	; 0x75e2 <__ultoa_invert+0x86>
    75c4:	c9 f7       	brne	.-14     	; 0x75b8 <__ultoa_invert+0x5c>
    75c6:	f6 cf       	rjmp	.-20     	; 0x75b4 <__ultoa_invert+0x58>
    75c8:	46 2f       	mov	r20, r22
    75ca:	4f 70       	andi	r20, 0x0F	; 15
    75cc:	40 5d       	subi	r20, 0xD0	; 208
    75ce:	4a 33       	cpi	r20, 0x3A	; 58
    75d0:	18 f0       	brcs	.+6      	; 0x75d8 <__ultoa_invert+0x7c>
    75d2:	49 5d       	subi	r20, 0xD9	; 217
    75d4:	31 fd       	sbrc	r19, 1
    75d6:	40 52       	subi	r20, 0x20	; 32
    75d8:	41 93       	st	Z+, r20
    75da:	02 d0       	rcall	.+4      	; 0x75e0 <__ultoa_invert+0x84>
    75dc:	a9 f7       	brne	.-22     	; 0x75c8 <__ultoa_invert+0x6c>
    75de:	ea cf       	rjmp	.-44     	; 0x75b4 <__ultoa_invert+0x58>
    75e0:	b4 e0       	ldi	r27, 0x04	; 4
    75e2:	a6 95       	lsr	r26
    75e4:	97 95       	ror	r25
    75e6:	87 95       	ror	r24
    75e8:	77 95       	ror	r23
    75ea:	67 95       	ror	r22
    75ec:	ba 95       	dec	r27
    75ee:	c9 f7       	brne	.-14     	; 0x75e2 <__ultoa_invert+0x86>
    75f0:	00 97       	sbiw	r24, 0x00	; 0
    75f2:	61 05       	cpc	r22, r1
    75f4:	71 05       	cpc	r23, r1
    75f6:	08 95       	ret
    75f8:	9b 01       	movw	r18, r22
    75fa:	ac 01       	movw	r20, r24
    75fc:	0a 2e       	mov	r0, r26
    75fe:	06 94       	lsr	r0
    7600:	57 95       	ror	r21
    7602:	47 95       	ror	r20
    7604:	37 95       	ror	r19
    7606:	27 95       	ror	r18
    7608:	ba 95       	dec	r27
    760a:	c9 f7       	brne	.-14     	; 0x75fe <__ultoa_invert+0xa2>
    760c:	62 0f       	add	r22, r18
    760e:	73 1f       	adc	r23, r19
    7610:	84 1f       	adc	r24, r20
    7612:	95 1f       	adc	r25, r21
    7614:	a0 1d       	adc	r26, r0
    7616:	08 95       	ret

00007618 <__eerd_block_m32>:
    7618:	dc 01       	movw	r26, r24
    761a:	cb 01       	movw	r24, r22

0000761c <__eerd_blraw_m32>:
    761c:	fc 01       	movw	r30, r24
    761e:	e1 99       	sbic	0x1c, 1	; 28
    7620:	fe cf       	rjmp	.-4      	; 0x761e <__eerd_blraw_m32+0x2>
    7622:	06 c0       	rjmp	.+12     	; 0x7630 <__eerd_blraw_m32+0x14>
    7624:	ff bb       	out	0x1f, r31	; 31
    7626:	ee bb       	out	0x1e, r30	; 30
    7628:	e0 9a       	sbi	0x1c, 0	; 28
    762a:	31 96       	adiw	r30, 0x01	; 1
    762c:	0d b2       	in	r0, 0x1d	; 29
    762e:	0d 92       	st	X+, r0
    7630:	41 50       	subi	r20, 0x01	; 1
    7632:	50 40       	sbci	r21, 0x00	; 0
    7634:	b8 f7       	brcc	.-18     	; 0x7624 <__eerd_blraw_m32+0x8>
    7636:	08 95       	ret

00007638 <__prologue_saves__>:
    7638:	2f 92       	push	r2
    763a:	3f 92       	push	r3
    763c:	4f 92       	push	r4
    763e:	5f 92       	push	r5
    7640:	6f 92       	push	r6
    7642:	7f 92       	push	r7
    7644:	8f 92       	push	r8
    7646:	9f 92       	push	r9
    7648:	af 92       	push	r10
    764a:	bf 92       	push	r11
    764c:	cf 92       	push	r12
    764e:	df 92       	push	r13
    7650:	ef 92       	push	r14
    7652:	ff 92       	push	r15
    7654:	0f 93       	push	r16
    7656:	1f 93       	push	r17
    7658:	cf 93       	push	r28
    765a:	df 93       	push	r29
    765c:	cd b7       	in	r28, 0x3d	; 61
    765e:	de b7       	in	r29, 0x3e	; 62
    7660:	ca 1b       	sub	r28, r26
    7662:	db 0b       	sbc	r29, r27
    7664:	0f b6       	in	r0, 0x3f	; 63
    7666:	f8 94       	cli
    7668:	de bf       	out	0x3e, r29	; 62
    766a:	0f be       	out	0x3f, r0	; 63
    766c:	cd bf       	out	0x3d, r28	; 61
    766e:	09 94       	ijmp

00007670 <__epilogue_restores__>:
    7670:	2a 88       	ldd	r2, Y+18	; 0x12
    7672:	39 88       	ldd	r3, Y+17	; 0x11
    7674:	48 88       	ldd	r4, Y+16	; 0x10
    7676:	5f 84       	ldd	r5, Y+15	; 0x0f
    7678:	6e 84       	ldd	r6, Y+14	; 0x0e
    767a:	7d 84       	ldd	r7, Y+13	; 0x0d
    767c:	8c 84       	ldd	r8, Y+12	; 0x0c
    767e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7680:	aa 84       	ldd	r10, Y+10	; 0x0a
    7682:	b9 84       	ldd	r11, Y+9	; 0x09
    7684:	c8 84       	ldd	r12, Y+8	; 0x08
    7686:	df 80       	ldd	r13, Y+7	; 0x07
    7688:	ee 80       	ldd	r14, Y+6	; 0x06
    768a:	fd 80       	ldd	r15, Y+5	; 0x05
    768c:	0c 81       	ldd	r16, Y+4	; 0x04
    768e:	1b 81       	ldd	r17, Y+3	; 0x03
    7690:	aa 81       	ldd	r26, Y+2	; 0x02
    7692:	b9 81       	ldd	r27, Y+1	; 0x01
    7694:	ce 0f       	add	r28, r30
    7696:	d1 1d       	adc	r29, r1
    7698:	0f b6       	in	r0, 0x3f	; 63
    769a:	f8 94       	cli
    769c:	de bf       	out	0x3e, r29	; 62
    769e:	0f be       	out	0x3f, r0	; 63
    76a0:	cd bf       	out	0x3d, r28	; 61
    76a2:	ed 01       	movw	r28, r26
    76a4:	08 95       	ret

000076a6 <_exit>:
    76a6:	f8 94       	cli

000076a8 <__stop_program>:
    76a8:	ff cf       	rjmp	.-2      	; 0x76a8 <__stop_program>
